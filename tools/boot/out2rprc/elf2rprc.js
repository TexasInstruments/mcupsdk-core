(()=>{var t={783:(t,e,s)=>{const i=s(614).EventEmitter,n=s(129),o=s(622),r=s(747);class a{constructor(){this.helpWidth=void 0,this.sortSubcommands=!1,this.sortOptions=!1}visibleCommands(t){const e=t.commands.filter((t=>!t._hidden));if(t._hasImplicitHelpCommand()){const s=t._helpCommandnameAndArgs.split(/ +/),i=t.createCommand(s.shift()).helpOption(!1);i.description(t._helpCommandDescription),i._parseExpectedArgs(s),e.push(i)}return this.sortSubcommands&&e.sort(((t,e)=>t.name().localeCompare(e.name()))),e}visibleOptions(t){const e=t.options.filter((t=>!t.hidden)),s=t._hasHelpOption&&t._helpShortFlag&&!t._findOption(t._helpShortFlag),i=t._hasHelpOption&&!t._findOption(t._helpLongFlag);if(s||i){let n;n=s?i?t.createOption(t._helpFlags,t._helpDescription):t.createOption(t._helpShortFlag,t._helpDescription):t.createOption(t._helpLongFlag,t._helpDescription),e.push(n)}if(this.sortOptions){const t=t=>t.short?t.short.replace(/^-/,""):t.long.replace(/^--/,"");e.sort(((e,s)=>t(e).localeCompare(t(s))))}return e}visibleArguments(t){return t._argsDescription&&t._args.length?t._args.map((e=>({term:e.name,description:t._argsDescription[e.name]||""})),0):[]}subcommandTerm(t){const e=t._args.map((t=>u(t))).join(" ");return t._name+(t._aliases[0]?"|"+t._aliases[0]:"")+(t.options.length?" [options]":"")+(e?" "+e:"")}optionTerm(t){return t.flags}longestSubcommandTermLength(t,e){return e.visibleCommands(t).reduce(((t,s)=>Math.max(t,e.subcommandTerm(s).length)),0)}longestOptionTermLength(t,e){return e.visibleOptions(t).reduce(((t,s)=>Math.max(t,e.optionTerm(s).length)),0)}longestArgumentTermLength(t,e){return e.visibleArguments(t).reduce(((t,e)=>Math.max(t,e.term.length)),0)}commandUsage(t){let e=t._name;t._aliases[0]&&(e=e+"|"+t._aliases[0]);let s="";for(let e=t.parent;e;e=e.parent)s=e.name()+" "+s;return s+e+" "+t.usage()}commandDescription(t){return t.description()}subcommandDescription(t){return t.description()}optionDescription(t){if(t.negate)return t.description;const e=[];return t.argChoices&&e.push(`choices: ${t.argChoices.map((t=>JSON.stringify(t))).join(", ")}`),void 0!==t.defaultValue&&e.push(`default: ${t.defaultValueDescription||JSON.stringify(t.defaultValue)}`),e.length>0?`${t.description} (${e.join(", ")})`:t.description}formatHelp(t,e){const s=e.padWidth(t,e),i=e.helpWidth||80;function n(t,n){if(n){const o=`${t.padEnd(s+2)}${n}`;return e.wrap(o,i-2,s+2)}return t}function o(t){return t.join("\n").replace(/^/gm," ".repeat(2))}let r=[`Usage: ${e.commandUsage(t)}`,""];const a=e.commandDescription(t);a.length>0&&(r=r.concat([a,""]));const h=e.visibleArguments(t).map((t=>n(t.term,t.description)));h.length>0&&(r=r.concat(["Arguments:",o(h),""]));const l=e.visibleOptions(t).map((t=>n(e.optionTerm(t),e.optionDescription(t))));l.length>0&&(r=r.concat(["Options:",o(l),""]));const p=e.visibleCommands(t).map((t=>n(e.subcommandTerm(t),e.subcommandDescription(t))));return p.length>0&&(r=r.concat(["Commands:",o(p),""])),r.join("\n")}padWidth(t,e){return Math.max(e.longestOptionTermLength(t,e),e.longestSubcommandTermLength(t,e),e.longestArgumentTermLength(t,e))}wrap(t,e,s,i=40){if(t.match(/[\n]\s+/))return t;const n=e-s;if(n<i)return t;const o=t.substr(0,s),r=t.substr(s),a=" ".repeat(s),h=new RegExp(".{1,"+(n-1)+"}([\\s​]|$)|[^\\s​]+?([\\s​]|$)","g");return o+(r.match(h)||[]).map(((t,e)=>("\n"===t.slice(-1)&&(t=t.slice(0,t.length-1)),(e>0?a:"")+t.trimRight()))).join("\n")}}class h{constructor(t,e){this.flags=t,this.description=e||"",this.required=t.includes("<"),this.optional=t.includes("["),this.variadic=/\w\.\.\.[>\]]$/.test(t),this.mandatory=!1;const s=d(t);this.short=s.shortFlag,this.long=s.longFlag,this.negate=!1,this.long&&(this.negate=this.long.startsWith("--no-")),this.defaultValue=void 0,this.defaultValueDescription=void 0,this.parseArg=void 0,this.hidden=!1,this.argChoices=void 0}default(t,e){return this.defaultValue=t,this.defaultValueDescription=e,this}argParser(t){return this.parseArg=t,this}makeOptionMandatory(t=!0){return this.mandatory=!!t,this}hideHelp(t=!0){return this.hidden=!!t,this}_concatValue(t,e){return e!==this.defaultValue&&Array.isArray(e)?e.concat(t):[t]}choices(t){return this.argChoices=t,this.parseArg=(e,s)=>{if(!t.includes(e))throw new p(`Allowed choices are ${t.join(", ")}.`);return this.variadic?this._concatValue(e,s):e},this}name(){return this.long?this.long.replace(/^--/,""):this.short.replace(/^-/,"")}attributeName(){return this.name().replace(/^no-/,"").split("-").reduce(((t,e)=>t+e[0].toUpperCase()+e.slice(1)))}is(t){return this.short===t||this.long===t}}class l extends Error{constructor(t,e,s){super(s),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name,this.code=e,this.exitCode=t,this.nestedError=void 0}}class p extends l{constructor(t){super(1,"commander.invalidOptionArgument",t),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name}}class c extends i{constructor(t){super(),this.commands=[],this.options=[],this.parent=null,this._allowUnknownOption=!1,this._allowExcessArguments=!0,this._args=[],this.rawArgs=null,this._scriptPath=null,this._name=t||"",this._optionValues={},this._storeOptionsAsProperties=!1,this._actionResults=[],this._actionHandler=null,this._executableHandler=!1,this._executableFile=null,this._defaultCommandName=null,this._exitCallback=null,this._aliases=[],this._combineFlagAndOptionalValue=!0,this._description="",this._argsDescription=void 0,this._enablePositionalOptions=!1,this._passThroughOptions=!1,this._outputConfiguration={writeOut:t=>process.stdout.write(t),writeErr:t=>process.stderr.write(t),getOutHelpWidth:()=>process.stdout.isTTY?process.stdout.columns:void 0,getErrHelpWidth:()=>process.stderr.isTTY?process.stderr.columns:void 0,outputError:(t,e)=>e(t)},this._hidden=!1,this._hasHelpOption=!0,this._helpFlags="-h, --help",this._helpDescription="display help for command",this._helpShortFlag="-h",this._helpLongFlag="--help",this._addImplicitHelpCommand=void 0,this._helpCommandName="help",this._helpCommandnameAndArgs="help [command]",this._helpCommandDescription="display help for command",this._helpConfiguration={}}command(t,e,s){let i=e,n=s;"object"==typeof i&&null!==i&&(n=i,i=null),n=n||{};const o=t.split(/ +/),r=this.createCommand(o.shift());return i&&(r.description(i),r._executableHandler=!0),n.isDefault&&(this._defaultCommandName=r._name),r._outputConfiguration=this._outputConfiguration,r._hidden=!(!n.noHelp&&!n.hidden),r._hasHelpOption=this._hasHelpOption,r._helpFlags=this._helpFlags,r._helpDescription=this._helpDescription,r._helpShortFlag=this._helpShortFlag,r._helpLongFlag=this._helpLongFlag,r._helpCommandName=this._helpCommandName,r._helpCommandnameAndArgs=this._helpCommandnameAndArgs,r._helpCommandDescription=this._helpCommandDescription,r._helpConfiguration=this._helpConfiguration,r._exitCallback=this._exitCallback,r._storeOptionsAsProperties=this._storeOptionsAsProperties,r._combineFlagAndOptionalValue=this._combineFlagAndOptionalValue,r._allowExcessArguments=this._allowExcessArguments,r._enablePositionalOptions=this._enablePositionalOptions,r._executableFile=n.executableFile||null,this.commands.push(r),r._parseExpectedArgs(o),r.parent=this,i?this:r}createCommand(t){return new c(t)}createHelp(){return Object.assign(new a,this.configureHelp())}configureHelp(t){return void 0===t?this._helpConfiguration:(this._helpConfiguration=t,this)}configureOutput(t){return void 0===t?this._outputConfiguration:(Object.assign(this._outputConfiguration,t),this)}addCommand(t,e){if(!t._name)throw new Error("Command passed to .addCommand() must have a name");return function t(e){e.forEach((e=>{if(e._executableHandler&&!e._executableFile)throw new Error(`Must specify executableFile for deeply nested executable: ${e.name()}`);t(e.commands)}))}(t.commands),(e=e||{}).isDefault&&(this._defaultCommandName=t._name),(e.noHelp||e.hidden)&&(t._hidden=!0),this.commands.push(t),t.parent=this,this}arguments(t){return this._parseExpectedArgs(t.split(/ +/))}addHelpCommand(t,e){return!1===t?this._addImplicitHelpCommand=!1:(this._addImplicitHelpCommand=!0,"string"==typeof t&&(this._helpCommandName=t.split(" ")[0],this._helpCommandnameAndArgs=t),this._helpCommandDescription=e||this._helpCommandDescription),this}_hasImplicitHelpCommand(){return void 0===this._addImplicitHelpCommand?this.commands.length&&!this._actionHandler&&!this._findCommand("help"):this._addImplicitHelpCommand}_parseExpectedArgs(t){if(t.length)return t.forEach((t=>{const e={required:!1,name:"",variadic:!1};switch(t[0]){case"<":e.required=!0,e.name=t.slice(1,-1);break;case"[":e.name=t.slice(1,-1)}e.name.length>3&&"..."===e.name.slice(-3)&&(e.variadic=!0,e.name=e.name.slice(0,-3)),e.name&&this._args.push(e)})),this._args.forEach(((t,e)=>{if(t.variadic&&e<this._args.length-1)throw new Error(`only the last argument can be variadic '${t.name}'`)})),this}exitOverride(t){return this._exitCallback=t||(t=>{if("commander.executeSubCommandAsync"!==t.code)throw t}),this}_exit(t,e,s){this._exitCallback&&this._exitCallback(new l(t,e,s)),process.exit(t)}action(t){return this._actionHandler=e=>{const s=this._args.length,i=e.slice(0,s);this._storeOptionsAsProperties?i[s]=this:i[s]=this.opts(),i.push(this);const n=t.apply(this,i);let o=this;for(;o.parent;)o=o.parent;o._actionResults.push(n)},this}createOption(t,e){return new h(t,e)}addOption(t){const e=t.name(),s=t.attributeName();let i=t.defaultValue;if(t.negate||t.optional||t.required||"boolean"==typeof i){if(t.negate){const e=t.long.replace(/^--no-/,"--");i=!this._findOption(e)||this._getOptionValue(s)}void 0!==i&&this._setOptionValue(s,i)}return this.options.push(t),this.on("option:"+e,(e=>{const n=this._getOptionValue(s);if(null!==e&&t.parseArg)try{e=t.parseArg(e,void 0===n?i:n)}catch(s){if("commander.invalidOptionArgument"===s.code){const i=`error: option '${t.flags}' argument '${e}' is invalid. ${s.message}`;this._displayError(s.exitCode,s.code,i)}throw s}else null!==e&&t.variadic&&(e=t._concatValue(e,n));"boolean"==typeof n||void 0===n?null==e?this._setOptionValue(s,!t.negate&&(i||!0)):this._setOptionValue(s,e):null!==e&&this._setOptionValue(s,!t.negate&&e)})),this}_optionEx(t,e,s,i,n){const o=this.createOption(e,s);if(o.makeOptionMandatory(!!t.mandatory),"function"==typeof i)o.default(n).argParser(i);else if(i instanceof RegExp){const t=i;i=(e,s)=>{const i=t.exec(e);return i?i[0]:s},o.default(n).argParser(i)}else o.default(i);return this.addOption(o)}option(t,e,s,i){return this._optionEx({},t,e,s,i)}requiredOption(t,e,s,i){return this._optionEx({mandatory:!0},t,e,s,i)}combineFlagAndOptionalValue(t=!0){return this._combineFlagAndOptionalValue=!!t,this}allowUnknownOption(t=!0){return this._allowUnknownOption=!!t,this}allowExcessArguments(t=!0){return this._allowExcessArguments=!!t,this}enablePositionalOptions(t=!0){return this._enablePositionalOptions=!!t,this}passThroughOptions(t=!0){if(this._passThroughOptions=!!t,this.parent&&t&&!this.parent._enablePositionalOptions)throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");return this}storeOptionsAsProperties(t=!0){if(this._storeOptionsAsProperties=!!t,this.options.length)throw new Error("call .storeOptionsAsProperties() before adding options");return this}_setOptionValue(t,e){this._storeOptionsAsProperties?this[t]=e:this._optionValues[t]=e}_getOptionValue(t){return this._storeOptionsAsProperties?this[t]:this._optionValues[t]}parse(t,e){if(void 0!==t&&!Array.isArray(t))throw new Error("first parameter to parse must be array or undefined");let i;switch(e=e||{},void 0===t&&(t=process.argv,process.versions&&process.versions.electron&&(e.from="electron")),this.rawArgs=t.slice(),e.from){case void 0:case"node":this._scriptPath=t[1],i=t.slice(2);break;case"electron":process.defaultApp?(this._scriptPath=t[1],i=t.slice(2)):i=t.slice(1);break;case"user":i=t.slice(0);break;default:throw new Error(`unexpected parse option { from: '${e.from}' }`)}return!this._scriptPath&&s.c[s.s]&&(this._scriptPath=s.c[s.s].filename),this._name=this._name||this._scriptPath&&o.basename(this._scriptPath,o.extname(this._scriptPath)),this._parseCommand([],i),this}parseAsync(t,e){return this.parse(t,e),Promise.all(this._actionResults).then((()=>this))}_executeSubCommand(t,e){e=e.slice();let i=!1;const a=[".js",".ts",".tsx",".mjs",".cjs"];this._checkForMissingMandatoryOptions();let h,p=this._scriptPath;!p&&s.c[s.s]&&(p=s.c[s.s].filename);try{const t=r.realpathSync(p);h=o.dirname(t)}catch(t){h="."}let c=o.basename(p,o.extname(p))+"-"+t._name;t._executableFile&&(c=t._executableFile);const m=o.join(h,c);let u;r.existsSync(m)?c=m:a.forEach((t=>{r.existsSync(`${m}${t}`)&&(c=`${m}${t}`)})),i=a.includes(o.extname(c)),"win32"!==process.platform?i?(e.unshift(c),e=_(process.execArgv).concat(e),u=n.spawn(process.argv[0],e,{stdio:"inherit"})):u=n.spawn(c,e,{stdio:"inherit"}):(e.unshift(c),e=_(process.execArgv).concat(e),u=n.spawn(process.execPath,e,{stdio:"inherit"})),["SIGUSR1","SIGUSR2","SIGTERM","SIGINT","SIGHUP"].forEach((t=>{process.on(t,(()=>{!1===u.killed&&null===u.exitCode&&u.kill(t)}))}));const d=this._exitCallback;d?u.on("close",(()=>{d(new l(process.exitCode||0,"commander.executeSubCommandAsync","(close)"))})):u.on("close",process.exit.bind(process)),u.on("error",(e=>{if("ENOENT"===e.code){const e=`'${c}' does not exist\n - if '${t._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;throw new Error(e)}if("EACCES"===e.code)throw new Error(`'${c}' not executable`);if(d){const t=new l(1,"commander.executeSubCommandAsync","(error)");t.nestedError=e,d(t)}else process.exit(1)})),this.runningCommand=u}_dispatchSubcommand(t,e,s){const i=this._findCommand(t);i||this.help({error:!0}),i._executableHandler?this._executeSubCommand(i,e.concat(s)):i._parseCommand(e,s)}_parseCommand(t,e){const s=this.parseOptions(e);if(t=t.concat(s.operands),e=s.unknown,this.args=t.concat(e),t&&this._findCommand(t[0]))this._dispatchSubcommand(t[0],t.slice(1),e);else if(this._hasImplicitHelpCommand()&&t[0]===this._helpCommandName)1===t.length?this.help():this._dispatchSubcommand(t[1],[],[this._helpLongFlag]);else if(this._defaultCommandName)m(this,e),this._dispatchSubcommand(this._defaultCommandName,t,e);else{!this.commands.length||0!==this.args.length||this._actionHandler||this._defaultCommandName||this.help({error:!0}),m(this,s.unknown),this._checkForMissingMandatoryOptions();const i=()=>{s.unknown.length>0&&this.unknownOption(s.unknown[0])},n=`command:${this.name()}`;if(this._actionHandler){i();const s=this.args.slice();this._args.forEach(((t,e)=>{t.required&&null==s[e]?this.missingArgument(t.name):t.variadic&&(s[e]=s.splice(e),s.length=Math.min(e+1,s.length))})),s.length>this._args.length&&this._excessArguments(s),this._actionHandler(s),this.parent&&this.parent.emit(n,t,e)}else this.parent&&this.parent.listenerCount(n)?(i(),this.parent.emit(n,t,e)):t.length?this._findCommand("*")?this._dispatchSubcommand("*",t,e):this.listenerCount("command:*")?this.emit("command:*",t,e):this.commands.length?this.unknownCommand():i():this.commands.length?this.help({error:!0}):i()}}_findCommand(t){if(t)return this.commands.find((e=>e._name===t||e._aliases.includes(t)))}_findOption(t){return this.options.find((e=>e.is(t)))}_checkForMissingMandatoryOptions(){for(let t=this;t;t=t.parent)t.options.forEach((e=>{e.mandatory&&void 0===t._getOptionValue(e.attributeName())&&t.missingMandatoryOptionValue(e)}))}parseOptions(t){const e=[],s=[];let i=e;const n=t.slice();function o(t){return t.length>1&&"-"===t[0]}let r=null;for(;n.length;){const t=n.shift();if("--"===t){i===s&&i.push(t),i.push(...n);break}if(!r||o(t)){if(r=null,o(t)){const e=this._findOption(t);if(e){if(e.required){const t=n.shift();void 0===t&&this.optionMissingArgument(e),this.emit(`option:${e.name()}`,t)}else if(e.optional){let t=null;n.length>0&&!o(n[0])&&(t=n.shift()),this.emit(`option:${e.name()}`,t)}else this.emit(`option:${e.name()}`);r=e.variadic?e:null;continue}}if(t.length>2&&"-"===t[0]&&"-"!==t[1]){const e=this._findOption(`-${t[1]}`);if(e){e.required||e.optional&&this._combineFlagAndOptionalValue?this.emit(`option:${e.name()}`,t.slice(2)):(this.emit(`option:${e.name()}`),n.unshift(`-${t.slice(2)}`));continue}}if(/^--[^=]+=/.test(t)){const e=t.indexOf("="),s=this._findOption(t.slice(0,e));if(s&&(s.required||s.optional)){this.emit(`option:${s.name()}`,t.slice(e+1));continue}}if(o(t)&&(i=s),(this._enablePositionalOptions||this._passThroughOptions)&&0===e.length&&0===s.length){if(this._findCommand(t)){e.push(t),n.length>0&&s.push(...n);break}if(t===this._helpCommandName&&this._hasImplicitHelpCommand()){e.push(t),n.length>0&&e.push(...n);break}if(this._defaultCommandName){s.push(t),n.length>0&&s.push(...n);break}}if(this._passThroughOptions){i.push(t),n.length>0&&i.push(...n);break}i.push(t)}else this.emit(`option:${r.name()}`,t)}return{operands:e,unknown:s}}opts(){if(this._storeOptionsAsProperties){const t={},e=this.options.length;for(let s=0;s<e;s++){const e=this.options[s].attributeName();t[e]=e===this._versionOptionName?this._version:this[e]}return t}return this._optionValues}_displayError(t,e,s){this._outputConfiguration.outputError(`${s}\n`,this._outputConfiguration.writeErr),this._exit(t,e,s)}missingArgument(t){const e=`error: missing required argument '${t}'`;this._displayError(1,"commander.missingArgument",e)}optionMissingArgument(t){const e=`error: option '${t.flags}' argument missing`;this._displayError(1,"commander.optionMissingArgument",e)}missingMandatoryOptionValue(t){const e=`error: required option '${t.flags}' not specified`;this._displayError(1,"commander.missingMandatoryOptionValue",e)}unknownOption(t){if(this._allowUnknownOption)return;const e=`error: unknown option '${t}'`;this._displayError(1,"commander.unknownOption",e)}_excessArguments(t){if(this._allowExcessArguments)return;const e=this._args.length,s=1===e?"":"s",i=`error: too many arguments${this.parent?` for '${this.name()}'`:""}. Expected ${e} argument${s} but got ${t.length}.`;this._displayError(1,"commander.excessArguments",i)}unknownCommand(){const t=[this.name()];for(let e=this.parent;e;e=e.parent)t.unshift(e.name());const e=t.join(" "),s=`error: unknown command '${this.args[0]}'.`+(this._hasHelpOption?` See '${e} ${this._helpLongFlag}'.`:"");this._displayError(1,"commander.unknownCommand",s)}version(t,e,s){if(void 0===t)return this._version;this._version=t,e=e||"-V, --version",s=s||"output the version number";const i=this.createOption(e,s);return this._versionOptionName=i.attributeName(),this.options.push(i),this.on("option:"+i.name(),(()=>{this._outputConfiguration.writeOut(`${t}\n`),this._exit(0,"commander.version",t)})),this}description(t,e){return void 0===t&&void 0===e?this._description:(this._description=t,this._argsDescription=e,this)}alias(t){if(void 0===t)return this._aliases[0];let e=this;if(0!==this.commands.length&&this.commands[this.commands.length-1]._executableHandler&&(e=this.commands[this.commands.length-1]),t===e._name)throw new Error("Command alias can't be the same as its name");return e._aliases.push(t),this}aliases(t){return void 0===t?this._aliases:(t.forEach((t=>this.alias(t))),this)}usage(t){if(void 0===t){if(this._usage)return this._usage;const t=this._args.map((t=>u(t)));return[].concat(this.options.length||this._hasHelpOption?"[options]":[],this.commands.length?"[command]":[],this._args.length?t:[]).join(" ")}return this._usage=t,this}name(t){return void 0===t?this._name:(this._name=t,this)}helpInformation(t){const e=this.createHelp();return void 0===e.helpWidth&&(e.helpWidth=t&&t.error?this._outputConfiguration.getErrHelpWidth():this._outputConfiguration.getOutHelpWidth()),e.formatHelp(this,e)}_getHelpContext(t){const e={error:!!(t=t||{}).error};let s;return s=e.error?t=>this._outputConfiguration.writeErr(t):t=>this._outputConfiguration.writeOut(t),e.write=t.write||s,e.command=this,e}outputHelp(t){let e;"function"==typeof t&&(e=t,t=void 0);const s=this._getHelpContext(t),i=[];let n=this;for(;n;)i.push(n),n=n.parent;i.slice().reverse().forEach((t=>t.emit("beforeAllHelp",s))),this.emit("beforeHelp",s);let o=this.helpInformation(s);if(e&&(o=e(o),"string"!=typeof o&&!Buffer.isBuffer(o)))throw new Error("outputHelp callback must return a string or a Buffer");s.write(o),this.emit(this._helpLongFlag),this.emit("afterHelp",s),i.forEach((t=>t.emit("afterAllHelp",s)))}helpOption(t,e){if("boolean"==typeof t)return this._hasHelpOption=t,this;this._helpFlags=t||this._helpFlags,this._helpDescription=e||this._helpDescription;const s=d(this._helpFlags);return this._helpShortFlag=s.shortFlag,this._helpLongFlag=s.longFlag,this}help(t){this.outputHelp(t);let e=process.exitCode||0;0===e&&t&&"function"!=typeof t&&t.error&&(e=1),this._exit(e,"commander.help","(outputHelp)")}addHelpText(t,e){const s=["beforeAll","before","after","afterAll"];if(!s.includes(t))throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${s.join("', '")}'`);const i=`${t}Help`;return this.on(i,(t=>{let s;s="function"==typeof e?e({error:t.error,command:t.command}):e,s&&t.write(`${s}\n`)})),this}}function m(t,e){t._hasHelpOption&&e.find((e=>e===t._helpLongFlag||e===t._helpShortFlag))&&(t.outputHelp(),t._exit(0,"commander.helpDisplayed","(outputHelp)"))}function u(t){const e=t.name+(!0===t.variadic?"...":"");return t.required?"<"+e+">":"["+e+"]"}function d(t){let e,s;const i=t.split(/[ |,]+/);return i.length>1&&!/^[[<]/.test(i[1])&&(e=i.shift()),s=i.shift(),!e&&/^-[^-]$/.test(s)&&(e=s,s=void 0),{shortFlag:e,longFlag:s}}function _(t){return t.map((t=>{if(!t.startsWith("--inspect"))return t;let e,s,i="127.0.0.1",n="9229";return null!==(s=t.match(/^(--inspect(-brk)?)$/))?e=s[1]:null!==(s=t.match(/^(--inspect(-brk|-port)?)=([^:]+)$/))?(e=s[1],/^\d+$/.test(s[3])?n=s[3]:i=s[3]):null!==(s=t.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/))&&(e=s[1],i=s[3],n=s[4]),e&&"0"!==n?`${e}=${i}:${parseInt(n)+1}`:t}))}(e=t.exports=new c).program=e,e.Command=c,e.Option=h,e.CommanderError=l,e.InvalidOptionArgumentError=p,e.Help=a},832:(t,e,s)=>{"use strict";const i=s(747),n=s(783),o=s(179),r=s(622);n.program.version("00.01.00").description("Convert an Elf file to an RPRC file.").option("-e, --bigEndian","Generate Big Endian File",!1).option("-o, --out <value>","The path for the output file").arguments("<elfFile>").action((t=>{i.existsSync(t)||(console.error(`Elf File ${t} does not exist`),process.exit(1));const e=n.program.opts();e.out||(e.out=r.parse(t).name+".rprc"),o.elf2rprc_sections(t,e.out,e.bigEndian)})),n.program.parse()},179:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.elf2rprc_sections=void 0;const i=s(747),n=s(297);function o(t,e,s,i=!1){i?t.writeUInt32BE(e,s):t.writeUInt32LE(e,s)}e.elf2rprc_sections=function(t,e,s=!1){const r=i.openSync(t,"r"),a=n.readElfFileHeader(r);if("ELF"!==a.e_ident_magic)return 1;let h=n.readElfSectionHeader(r,a);h=h.filter((t=>!(8&t.sh_type))),h=h.filter((t=>2&t.sh_flags)),h=h.sort(((t,e)=>t.sh_addr<e.sh_addr?-1:t.sh_addr==e.sh_addr?0:1));let l=0;const p=i.openSync(e,"w"),c=Buffer.alloc(20);c.write("RPRC"),o(c,a.e_entry,4,s),o(c,0,8,s),o(c,h.length,12,s),o(c,1,16,s),i.writeSync(p,c,0,20,l),l+=20;for(const t of h){const e=Buffer.alloc(20);o(e,t.sh_addr,0,s),o(e,0,4,s),o(e,t.sh_size,8,s),o(e,0,12,s),o(e,0,16,s),i.writeSync(p,e,0,20,l),l+=20;const n=Buffer.alloc(t.sh_size);i.readSync(r,n,0,t.sh_size,t.sh_offset),i.writeSync(p,n,0,t.sh_size,l),l+=t.sh_size}return i.closeSync(r),i.closeSync(p),0}},297:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isElfFile=e.readElfSectionHeader=e.readElfProgramHeader=e.readElfFileHeader=void 0;const i=s(747);function n(t,e,s,i){if(i<8)return 1==t?e.readUIntLE(s,i):e.readUIntBE(s,i);{const i=1==t?e.readBigUInt64LE(s):e.readBigUInt64BE(s);if(i>BigInt(Number.MAX_SAFE_INTEGER))throw"elf reader cannot handle 8 byte fields with > 53 bits";return Number(i)}}function o(t,e,s,n){const o=s[n.e_shstrndx].sh_offset+e,r=Buffer.alloc(32);i.readSync(t,r,0,32,o);const a=r.indexOf(0);return r.toString("utf8",0,a)}e.readElfFileHeader=function(t){const e=Buffer.alloc(64);i.readSync(t,e,0,64,0);const s=e.readUInt8(5),o=4*e.readUInt8(4);return{e_ident_magic:e.toString("utf8",0,4),e_ident_class:e.readUInt8(4),e_ident_data:e.readUInt8(5),e_ident_version:e.readUInt8(6),e_ident_osabi:e.readUInt8(7),e_ident_abiversion:e.readUInt8(8),e_type:n(s,e,16,2),e_machine:n(s,e,18,2),e_version:n(s,e,20,4),e_entry:n(s,e,24,o),e_phoff:n(s,e,24+o,o),e_shoff:n(s,e,24+2*o,o),e_flags:n(s,e,24+3*o,4),e_ehsize:n(s,e,28+3*o,2),e_phentsize:n(s,e,30+3*o,2),e_phnum:n(s,e,32+3*o,2),e_shentsize:n(s,e,34+3*o,2),e_shnum:n(s,e,36+3*o,2),e_shstrndx:n(s,e,38+3*o,2)}},e.readElfProgramHeader=function(t,e){const s=Number(e.e_ident_data),o=Number(e.e_phnum*e.e_phentsize),r=Buffer.alloc(o);let a;const h=[];i.readSync(t,r,0,o,e.e_phoff);for(let t=0;t<e.e_phnum;t+=1){const i=t*Number(e.e_phentsize);a=32==e.e_phentsize?{p_type:n(s,r,i+0,4),p_offset:n(s,r,i+4,4),p_vaddr:n(s,r,i+8,4),p_paddr:n(s,r,i+12,4),p_filesz:n(s,r,i+16,4),p_memsz:n(s,r,i+20,4),p_flags:n(s,r,i+24,4),p_align:n(s,r,i+28,4)}:{p_type:n(s,r,i+0,4),p_flags:n(s,r,i+4,4),p_offset:n(s,r,i+8,8),p_vaddr:n(s,r,i+16,8),p_paddr:n(s,r,i+24,8),p_filesz:n(s,r,i+32,8),p_memsz:n(s,r,i+40,8),p_align:n(s,r,i+48,8)},h.push(a)}return h},e.readElfSectionHeader=function(t,e){const s=Number(e.e_ident_data),r=Number(e.e_shnum*e.e_shentsize),a=Buffer.alloc(r);let h;const l=[];i.readSync(t,a,0,r,e.e_shoff);for(let t=0;t<e.e_shnum;t+=1){const i=t*e.e_shentsize;h=40==e.e_shentsize?{name:"",sh_name:n(s,a,i+0,4),sh_type:n(s,a,i+4,4),sh_flags:n(s,a,i+8,4),sh_addr:n(s,a,i+12,4),sh_offset:n(s,a,i+16,4),sh_size:n(s,a,i+20,4),sh_link:n(s,a,i+24,4),sh_info:n(s,a,i+28,4),sh_addralign:n(s,a,i+32,4),sh_entsize:n(s,a,i+36,4)}:{name:"",sh_name:n(s,a,i+0,4),sh_type:n(s,a,i+4,4),sh_flags:n(s,a,i+8,8),sh_addr:n(s,a,i+16,8),sh_offset:n(s,a,i+24,8),sh_size:n(s,a,i+32,8),sh_link:n(s,a,i+40,4),sh_info:n(s,a,i+44,4),sh_addralign:n(s,a,i+48,8),sh_entsize:n(s,a,i+56,8)},l.push(h)}for(let s=0;s<e.e_shnum;s+=1)l[s].name=o(t,l[s].sh_name,l,e);return l},e.isElfFile=function(t){const e=Buffer.alloc(4),s=i.openSync(t,"r");return i.readSync(s,e,0,4,0),i.closeSync(s),"ELF"==e.toString()}},129:t=>{"use strict";t.exports=require("child_process")},614:t=>{"use strict";t.exports=require("events")},747:t=>{"use strict";t.exports=require("fs")},622:t=>{"use strict";t.exports=require("path")}},e={};function s(i){var n=e[i];if(void 0!==n)return n.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,s),o.exports}s.c=e,s(s.s=832)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{var e={783:(e,t,n)=>{const i=n(614).EventEmitter,s=n(129),r=n(622),o=n(747);class a{constructor(){this.helpWidth=void 0,this.sortSubcommands=!1,this.sortOptions=!1}visibleCommands(e){const t=e.commands.filter((e=>!e._hidden));if(e._hasImplicitHelpCommand()){const n=e._helpCommandnameAndArgs.split(/ +/),i=e.createCommand(n.shift()).helpOption(!1);i.description(e._helpCommandDescription),i._parseExpectedArgs(n),t.push(i)}return this.sortSubcommands&&t.sort(((e,t)=>e.name().localeCompare(t.name()))),t}visibleOptions(e){const t=e.options.filter((e=>!e.hidden)),n=e._hasHelpOption&&e._helpShortFlag&&!e._findOption(e._helpShortFlag),i=e._hasHelpOption&&!e._findOption(e._helpLongFlag);if(n||i){let s;s=n?i?e.createOption(e._helpFlags,e._helpDescription):e.createOption(e._helpShortFlag,e._helpDescription):e.createOption(e._helpLongFlag,e._helpDescription),t.push(s)}if(this.sortOptions){const e=e=>e.short?e.short.replace(/^-/,""):e.long.replace(/^--/,"");t.sort(((t,n)=>e(t).localeCompare(e(n))))}return t}visibleArguments(e){return e._argsDescription&&e._args.length?e._args.map((t=>({term:t.name,description:e._argsDescription[t.name]||""})),0):[]}subcommandTerm(e){const t=e._args.map((e=>m(e))).join(" ");return e._name+(e._aliases[0]?"|"+e._aliases[0]:"")+(e.options.length?" [options]":"")+(t?" "+t:"")}optionTerm(e){return e.flags}longestSubcommandTermLength(e,t){return t.visibleCommands(e).reduce(((e,n)=>Math.max(e,t.subcommandTerm(n).length)),0)}longestOptionTermLength(e,t){return t.visibleOptions(e).reduce(((e,n)=>Math.max(e,t.optionTerm(n).length)),0)}longestArgumentTermLength(e,t){return t.visibleArguments(e).reduce(((e,t)=>Math.max(e,t.term.length)),0)}commandUsage(e){let t=e._name;e._aliases[0]&&(t=t+"|"+e._aliases[0]);let n="";for(let t=e.parent;t;t=t.parent)n=t.name()+" "+n;return n+t+" "+e.usage()}commandDescription(e){return e.description()}subcommandDescription(e){return e.description()}optionDescription(e){if(e.negate)return e.description;const t=[];return e.argChoices&&t.push(`choices: ${e.argChoices.map((e=>JSON.stringify(e))).join(", ")}`),void 0!==e.defaultValue&&t.push(`default: ${e.defaultValueDescription||JSON.stringify(e.defaultValue)}`),t.length>0?`${e.description} (${t.join(", ")})`:e.description}formatHelp(e,t){const n=t.padWidth(e,t),i=t.helpWidth||80;function s(e,s){if(s){const r=`${e.padEnd(n+2)}${s}`;return t.wrap(r,i-2,n+2)}return e}function r(e){return e.join("\n").replace(/^/gm," ".repeat(2))}let o=[`Usage: ${t.commandUsage(e)}`,""];const a=t.commandDescription(e);a.length>0&&(o=o.concat([a,""]));const l=t.visibleArguments(e).map((e=>s(e.term,e.description)));l.length>0&&(o=o.concat(["Arguments:",r(l),""]));const h=t.visibleOptions(e).map((e=>s(t.optionTerm(e),t.optionDescription(e))));h.length>0&&(o=o.concat(["Options:",r(h),""]));const c=t.visibleCommands(e).map((e=>s(t.subcommandTerm(e),t.subcommandDescription(e))));return c.length>0&&(o=o.concat(["Commands:",r(c),""])),o.join("\n")}padWidth(e,t){return Math.max(t.longestOptionTermLength(e,t),t.longestSubcommandTermLength(e,t),t.longestArgumentTermLength(e,t))}wrap(e,t,n,i=40){if(e.match(/[\n]\s+/))return e;const s=t-n;if(s<i)return e;const r=e.substr(0,n),o=e.substr(n),a=" ".repeat(n),l=new RegExp(".{1,"+(s-1)+"}([\\s​]|$)|[^\\s​]+?([\\s​]|$)","g");return r+(o.match(l)||[]).map(((e,t)=>("\n"===e.slice(-1)&&(e=e.slice(0,e.length-1)),(t>0?a:"")+e.trimRight()))).join("\n")}}class l{constructor(e,t){this.flags=e,this.description=t||"",this.required=e.includes("<"),this.optional=e.includes("["),this.variadic=/\w\.\.\.[>\]]$/.test(e),this.mandatory=!1;const n=d(e);this.short=n.shortFlag,this.long=n.longFlag,this.negate=!1,this.long&&(this.negate=this.long.startsWith("--no-")),this.defaultValue=void 0,this.defaultValueDescription=void 0,this.parseArg=void 0,this.hidden=!1,this.argChoices=void 0}default(e,t){return this.defaultValue=e,this.defaultValueDescription=t,this}argParser(e){return this.parseArg=e,this}makeOptionMandatory(e=!0){return this.mandatory=!!e,this}hideHelp(e=!0){return this.hidden=!!e,this}_concatValue(e,t){return t!==this.defaultValue&&Array.isArray(t)?t.concat(e):[e]}choices(e){return this.argChoices=e,this.parseArg=(t,n)=>{if(!e.includes(t))throw new c(`Allowed choices are ${e.join(", ")}.`);return this.variadic?this._concatValue(t,n):t},this}name(){return this.long?this.long.replace(/^--/,""):this.short.replace(/^-/,"")}attributeName(){return this.name().replace(/^no-/,"").split("-").reduce(((e,t)=>e+t[0].toUpperCase()+t.slice(1)))}is(e){return this.short===e||this.long===e}}class h extends Error{constructor(e,t,n){super(n),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name,this.code=t,this.exitCode=e,this.nestedError=void 0}}class c extends h{constructor(e){super(1,"commander.invalidOptionArgument",e),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name}}class p extends i{constructor(e){super(),this.commands=[],this.options=[],this.parent=null,this._allowUnknownOption=!1,this._allowExcessArguments=!0,this._args=[],this.rawArgs=null,this._scriptPath=null,this._name=e||"",this._optionValues={},this._storeOptionsAsProperties=!1,this._actionResults=[],this._actionHandler=null,this._executableHandler=!1,this._executableFile=null,this._defaultCommandName=null,this._exitCallback=null,this._aliases=[],this._combineFlagAndOptionalValue=!0,this._description="",this._argsDescription=void 0,this._enablePositionalOptions=!1,this._passThroughOptions=!1,this._outputConfiguration={writeOut:e=>process.stdout.write(e),writeErr:e=>process.stderr.write(e),getOutHelpWidth:()=>process.stdout.isTTY?process.stdout.columns:void 0,getErrHelpWidth:()=>process.stderr.isTTY?process.stderr.columns:void 0,outputError:(e,t)=>t(e)},this._hidden=!1,this._hasHelpOption=!0,this._helpFlags="-h, --help",this._helpDescription="display help for command",this._helpShortFlag="-h",this._helpLongFlag="--help",this._addImplicitHelpCommand=void 0,this._helpCommandName="help",this._helpCommandnameAndArgs="help [command]",this._helpCommandDescription="display help for command",this._helpConfiguration={}}command(e,t,n){let i=t,s=n;"object"==typeof i&&null!==i&&(s=i,i=null),s=s||{};const r=e.split(/ +/),o=this.createCommand(r.shift());return i&&(o.description(i),o._executableHandler=!0),s.isDefault&&(this._defaultCommandName=o._name),o._outputConfiguration=this._outputConfiguration,o._hidden=!(!s.noHelp&&!s.hidden),o._hasHelpOption=this._hasHelpOption,o._helpFlags=this._helpFlags,o._helpDescription=this._helpDescription,o._helpShortFlag=this._helpShortFlag,o._helpLongFlag=this._helpLongFlag,o._helpCommandName=this._helpCommandName,o._helpCommandnameAndArgs=this._helpCommandnameAndArgs,o._helpCommandDescription=this._helpCommandDescription,o._helpConfiguration=this._helpConfiguration,o._exitCallback=this._exitCallback,o._storeOptionsAsProperties=this._storeOptionsAsProperties,o._combineFlagAndOptionalValue=this._combineFlagAndOptionalValue,o._allowExcessArguments=this._allowExcessArguments,o._enablePositionalOptions=this._enablePositionalOptions,o._executableFile=s.executableFile||null,this.commands.push(o),o._parseExpectedArgs(r),o.parent=this,i?this:o}createCommand(e){return new p(e)}createHelp(){return Object.assign(new a,this.configureHelp())}configureHelp(e){return void 0===e?this._helpConfiguration:(this._helpConfiguration=e,this)}configureOutput(e){return void 0===e?this._outputConfiguration:(Object.assign(this._outputConfiguration,e),this)}addCommand(e,t){if(!e._name)throw new Error("Command passed to .addCommand() must have a name");return function e(t){t.forEach((t=>{if(t._executableHandler&&!t._executableFile)throw new Error(`Must specify executableFile for deeply nested executable: ${t.name()}`);e(t.commands)}))}(e.commands),(t=t||{}).isDefault&&(this._defaultCommandName=e._name),(t.noHelp||t.hidden)&&(e._hidden=!0),this.commands.push(e),e.parent=this,this}arguments(e){return this._parseExpectedArgs(e.split(/ +/))}addHelpCommand(e,t){return!1===e?this._addImplicitHelpCommand=!1:(this._addImplicitHelpCommand=!0,"string"==typeof e&&(this._helpCommandName=e.split(" ")[0],this._helpCommandnameAndArgs=e),this._helpCommandDescription=t||this._helpCommandDescription),this}_hasImplicitHelpCommand(){return void 0===this._addImplicitHelpCommand?this.commands.length&&!this._actionHandler&&!this._findCommand("help"):this._addImplicitHelpCommand}_parseExpectedArgs(e){if(e.length)return e.forEach((e=>{const t={required:!1,name:"",variadic:!1};switch(e[0]){case"<":t.required=!0,t.name=e.slice(1,-1);break;case"[":t.name=e.slice(1,-1)}t.name.length>3&&"..."===t.name.slice(-3)&&(t.variadic=!0,t.name=t.name.slice(0,-3)),t.name&&this._args.push(t)})),this._args.forEach(((e,t)=>{if(e.variadic&&t<this._args.length-1)throw new Error(`only the last argument can be variadic '${e.name}'`)})),this}exitOverride(e){return this._exitCallback=e||(e=>{if("commander.executeSubCommandAsync"!==e.code)throw e}),this}_exit(e,t,n){this._exitCallback&&this._exitCallback(new h(e,t,n)),process.exit(e)}action(e){return this._actionHandler=t=>{const n=this._args.length,i=t.slice(0,n);this._storeOptionsAsProperties?i[n]=this:i[n]=this.opts(),i.push(this);const s=e.apply(this,i);let r=this;for(;r.parent;)r=r.parent;r._actionResults.push(s)},this}createOption(e,t){return new l(e,t)}addOption(e){const t=e.name(),n=e.attributeName();let i=e.defaultValue;if(e.negate||e.optional||e.required||"boolean"==typeof i){if(e.negate){const t=e.long.replace(/^--no-/,"--");i=!this._findOption(t)||this._getOptionValue(n)}void 0!==i&&this._setOptionValue(n,i)}return this.options.push(e),this.on("option:"+t,(t=>{const s=this._getOptionValue(n);if(null!==t&&e.parseArg)try{t=e.parseArg(t,void 0===s?i:s)}catch(n){if("commander.invalidOptionArgument"===n.code){const i=`error: option '${e.flags}' argument '${t}' is invalid. ${n.message}`;this._displayError(n.exitCode,n.code,i)}throw n}else null!==t&&e.variadic&&(t=e._concatValue(t,s));"boolean"==typeof s||void 0===s?null==t?this._setOptionValue(n,!e.negate&&(i||!0)):this._setOptionValue(n,t):null!==t&&this._setOptionValue(n,!e.negate&&t)})),this}_optionEx(e,t,n,i,s){const r=this.createOption(t,n);if(r.makeOptionMandatory(!!e.mandatory),"function"==typeof i)r.default(s).argParser(i);else if(i instanceof RegExp){const e=i;i=(t,n)=>{const i=e.exec(t);return i?i[0]:n},r.default(s).argParser(i)}else r.default(i);return this.addOption(r)}option(e,t,n,i){return this._optionEx({},e,t,n,i)}requiredOption(e,t,n,i){return this._optionEx({mandatory:!0},e,t,n,i)}combineFlagAndOptionalValue(e=!0){return this._combineFlagAndOptionalValue=!!e,this}allowUnknownOption(e=!0){return this._allowUnknownOption=!!e,this}allowExcessArguments(e=!0){return this._allowExcessArguments=!!e,this}enablePositionalOptions(e=!0){return this._enablePositionalOptions=!!e,this}passThroughOptions(e=!0){if(this._passThroughOptions=!!e,this.parent&&e&&!this.parent._enablePositionalOptions)throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");return this}storeOptionsAsProperties(e=!0){if(this._storeOptionsAsProperties=!!e,this.options.length)throw new Error("call .storeOptionsAsProperties() before adding options");return this}_setOptionValue(e,t){this._storeOptionsAsProperties?this[e]=t:this._optionValues[e]=t}_getOptionValue(e){return this._storeOptionsAsProperties?this[e]:this._optionValues[e]}parse(e,t){if(void 0!==e&&!Array.isArray(e))throw new Error("first parameter to parse must be array or undefined");let i;switch(t=t||{},void 0===e&&(e=process.argv,process.versions&&process.versions.electron&&(t.from="electron")),this.rawArgs=e.slice(),t.from){case void 0:case"node":this._scriptPath=e[1],i=e.slice(2);break;case"electron":process.defaultApp?(this._scriptPath=e[1],i=e.slice(2)):i=e.slice(1);break;case"user":i=e.slice(0);break;default:throw new Error(`unexpected parse option { from: '${t.from}' }`)}return!this._scriptPath&&n.c[n.s]&&(this._scriptPath=n.c[n.s].filename),this._name=this._name||this._scriptPath&&r.basename(this._scriptPath,r.extname(this._scriptPath)),this._parseCommand([],i),this}parseAsync(e,t){return this.parse(e,t),Promise.all(this._actionResults).then((()=>this))}_executeSubCommand(e,t){t=t.slice();let i=!1;const a=[".js",".ts",".tsx",".mjs",".cjs"];this._checkForMissingMandatoryOptions();let l,c=this._scriptPath;!c&&n.c[n.s]&&(c=n.c[n.s].filename);try{const e=o.realpathSync(c);l=r.dirname(e)}catch(e){l="."}let p=r.basename(c,r.extname(c))+"-"+e._name;e._executableFile&&(p=e._executableFile);const u=r.join(l,p);let m;o.existsSync(u)?p=u:a.forEach((e=>{o.existsSync(`${u}${e}`)&&(p=`${u}${e}`)})),i=a.includes(r.extname(p)),"win32"!==process.platform?i?(t.unshift(p),t=f(process.execArgv).concat(t),m=s.spawn(process.argv[0],t,{stdio:"inherit"})):m=s.spawn(p,t,{stdio:"inherit"}):(t.unshift(p),t=f(process.execArgv).concat(t),m=s.spawn(process.execPath,t,{stdio:"inherit"})),["SIGUSR1","SIGUSR2","SIGTERM","SIGINT","SIGHUP"].forEach((e=>{process.on(e,(()=>{!1===m.killed&&null===m.exitCode&&m.kill(e)}))}));const d=this._exitCallback;d?m.on("close",(()=>{d(new h(process.exitCode||0,"commander.executeSubCommandAsync","(close)"))})):m.on("close",process.exit.bind(process)),m.on("error",(t=>{if("ENOENT"===t.code){const t=`'${p}' does not exist\n - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;throw new Error(t)}if("EACCES"===t.code)throw new Error(`'${p}' not executable`);if(d){const e=new h(1,"commander.executeSubCommandAsync","(error)");e.nestedError=t,d(e)}else process.exit(1)})),this.runningCommand=m}_dispatchSubcommand(e,t,n){const i=this._findCommand(e);i||this.help({error:!0}),i._executableHandler?this._executeSubCommand(i,t.concat(n)):i._parseCommand(t,n)}_parseCommand(e,t){const n=this.parseOptions(t);if(e=e.concat(n.operands),t=n.unknown,this.args=e.concat(t),e&&this._findCommand(e[0]))this._dispatchSubcommand(e[0],e.slice(1),t);else if(this._hasImplicitHelpCommand()&&e[0]===this._helpCommandName)1===e.length?this.help():this._dispatchSubcommand(e[1],[],[this._helpLongFlag]);else if(this._defaultCommandName)u(this,t),this._dispatchSubcommand(this._defaultCommandName,e,t);else{!this.commands.length||0!==this.args.length||this._actionHandler||this._defaultCommandName||this.help({error:!0}),u(this,n.unknown),this._checkForMissingMandatoryOptions();const i=()=>{n.unknown.length>0&&this.unknownOption(n.unknown[0])},s=`command:${this.name()}`;if(this._actionHandler){i();const n=this.args.slice();this._args.forEach(((e,t)=>{e.required&&null==n[t]?this.missingArgument(e.name):e.variadic&&(n[t]=n.splice(t),n.length=Math.min(t+1,n.length))})),n.length>this._args.length&&this._excessArguments(n),this._actionHandler(n),this.parent&&this.parent.emit(s,e,t)}else this.parent&&this.parent.listenerCount(s)?(i(),this.parent.emit(s,e,t)):e.length?this._findCommand("*")?this._dispatchSubcommand("*",e,t):this.listenerCount("command:*")?this.emit("command:*",e,t):this.commands.length?this.unknownCommand():i():this.commands.length?this.help({error:!0}):i()}}_findCommand(e){if(e)return this.commands.find((t=>t._name===e||t._aliases.includes(e)))}_findOption(e){return this.options.find((t=>t.is(e)))}_checkForMissingMandatoryOptions(){for(let e=this;e;e=e.parent)e.options.forEach((t=>{t.mandatory&&void 0===e._getOptionValue(t.attributeName())&&e.missingMandatoryOptionValue(t)}))}parseOptions(e){const t=[],n=[];let i=t;const s=e.slice();function r(e){return e.length>1&&"-"===e[0]}let o=null;for(;s.length;){const e=s.shift();if("--"===e){i===n&&i.push(e),i.push(...s);break}if(!o||r(e)){if(o=null,r(e)){const t=this._findOption(e);if(t){if(t.required){const e=s.shift();void 0===e&&this.optionMissingArgument(t),this.emit(`option:${t.name()}`,e)}else if(t.optional){let e=null;s.length>0&&!r(s[0])&&(e=s.shift()),this.emit(`option:${t.name()}`,e)}else this.emit(`option:${t.name()}`);o=t.variadic?t:null;continue}}if(e.length>2&&"-"===e[0]&&"-"!==e[1]){const t=this._findOption(`-${e[1]}`);if(t){t.required||t.optional&&this._combineFlagAndOptionalValue?this.emit(`option:${t.name()}`,e.slice(2)):(this.emit(`option:${t.name()}`),s.unshift(`-${e.slice(2)}`));continue}}if(/^--[^=]+=/.test(e)){const t=e.indexOf("="),n=this._findOption(e.slice(0,t));if(n&&(n.required||n.optional)){this.emit(`option:${n.name()}`,e.slice(t+1));continue}}if(r(e)&&(i=n),(this._enablePositionalOptions||this._passThroughOptions)&&0===t.length&&0===n.length){if(this._findCommand(e)){t.push(e),s.length>0&&n.push(...s);break}if(e===this._helpCommandName&&this._hasImplicitHelpCommand()){t.push(e),s.length>0&&t.push(...s);break}if(this._defaultCommandName){n.push(e),s.length>0&&n.push(...s);break}}if(this._passThroughOptions){i.push(e),s.length>0&&i.push(...s);break}i.push(e)}else this.emit(`option:${o.name()}`,e)}return{operands:t,unknown:n}}opts(){if(this._storeOptionsAsProperties){const e={},t=this.options.length;for(let n=0;n<t;n++){const t=this.options[n].attributeName();e[t]=t===this._versionOptionName?this._version:this[t]}return e}return this._optionValues}_displayError(e,t,n){this._outputConfiguration.outputError(`${n}\n`,this._outputConfiguration.writeErr),this._exit(e,t,n)}missingArgument(e){const t=`error: missing required argument '${e}'`;this._displayError(1,"commander.missingArgument",t)}optionMissingArgument(e){const t=`error: option '${e.flags}' argument missing`;this._displayError(1,"commander.optionMissingArgument",t)}missingMandatoryOptionValue(e){const t=`error: required option '${e.flags}' not specified`;this._displayError(1,"commander.missingMandatoryOptionValue",t)}unknownOption(e){if(this._allowUnknownOption)return;const t=`error: unknown option '${e}'`;this._displayError(1,"commander.unknownOption",t)}_excessArguments(e){if(this._allowExcessArguments)return;const t=this._args.length,n=1===t?"":"s",i=`error: too many arguments${this.parent?` for '${this.name()}'`:""}. Expected ${t} argument${n} but got ${e.length}.`;this._displayError(1,"commander.excessArguments",i)}unknownCommand(){const e=[this.name()];for(let t=this.parent;t;t=t.parent)e.unshift(t.name());const t=e.join(" "),n=`error: unknown command '${this.args[0]}'.`+(this._hasHelpOption?` See '${t} ${this._helpLongFlag}'.`:"");this._displayError(1,"commander.unknownCommand",n)}version(e,t,n){if(void 0===e)return this._version;this._version=e,t=t||"-V, --version",n=n||"output the version number";const i=this.createOption(t,n);return this._versionOptionName=i.attributeName(),this.options.push(i),this.on("option:"+i.name(),(()=>{this._outputConfiguration.writeOut(`${e}\n`),this._exit(0,"commander.version",e)})),this}description(e,t){return void 0===e&&void 0===t?this._description:(this._description=e,this._argsDescription=t,this)}alias(e){if(void 0===e)return this._aliases[0];let t=this;if(0!==this.commands.length&&this.commands[this.commands.length-1]._executableHandler&&(t=this.commands[this.commands.length-1]),e===t._name)throw new Error("Command alias can't be the same as its name");return t._aliases.push(e),this}aliases(e){return void 0===e?this._aliases:(e.forEach((e=>this.alias(e))),this)}usage(e){if(void 0===e){if(this._usage)return this._usage;const e=this._args.map((e=>m(e)));return[].concat(this.options.length||this._hasHelpOption?"[options]":[],this.commands.length?"[command]":[],this._args.length?e:[]).join(" ")}return this._usage=e,this}name(e){return void 0===e?this._name:(this._name=e,this)}helpInformation(e){const t=this.createHelp();return void 0===t.helpWidth&&(t.helpWidth=e&&e.error?this._outputConfiguration.getErrHelpWidth():this._outputConfiguration.getOutHelpWidth()),t.formatHelp(this,t)}_getHelpContext(e){const t={error:!!(e=e||{}).error};let n;return n=t.error?e=>this._outputConfiguration.writeErr(e):e=>this._outputConfiguration.writeOut(e),t.write=e.write||n,t.command=this,t}outputHelp(e){let t;"function"==typeof e&&(t=e,e=void 0);const n=this._getHelpContext(e),i=[];let s=this;for(;s;)i.push(s),s=s.parent;i.slice().reverse().forEach((e=>e.emit("beforeAllHelp",n))),this.emit("beforeHelp",n);let r=this.helpInformation(n);if(t&&(r=t(r),"string"!=typeof r&&!Buffer.isBuffer(r)))throw new Error("outputHelp callback must return a string or a Buffer");n.write(r),this.emit(this._helpLongFlag),this.emit("afterHelp",n),i.forEach((e=>e.emit("afterAllHelp",n)))}helpOption(e,t){if("boolean"==typeof e)return this._hasHelpOption=e,this;this._helpFlags=e||this._helpFlags,this._helpDescription=t||this._helpDescription;const n=d(this._helpFlags);return this._helpShortFlag=n.shortFlag,this._helpLongFlag=n.longFlag,this}help(e){this.outputHelp(e);let t=process.exitCode||0;0===t&&e&&"function"!=typeof e&&e.error&&(t=1),this._exit(t,"commander.help","(outputHelp)")}addHelpText(e,t){const n=["beforeAll","before","after","afterAll"];if(!n.includes(e))throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${n.join("', '")}'`);const i=`${e}Help`;return this.on(i,(e=>{let n;n="function"==typeof t?t({error:e.error,command:e.command}):t,n&&e.write(`${n}\n`)})),this}}function u(e,t){e._hasHelpOption&&t.find((t=>t===e._helpLongFlag||t===e._helpShortFlag))&&(e.outputHelp(),e._exit(0,"commander.helpDisplayed","(outputHelp)"))}function m(e){const t=e.name+(!0===e.variadic?"...":"");return e.required?"<"+t+">":"["+t+"]"}function d(e){let t,n;const i=e.split(/[ |,]+/);return i.length>1&&!/^[[<]/.test(i[1])&&(t=i.shift()),n=i.shift(),!t&&/^-[^-]$/.test(n)&&(t=n,n=void 0),{shortFlag:t,longFlag:n}}function f(e){return e.map((e=>{if(!e.startsWith("--inspect"))return e;let t,n,i="127.0.0.1",s="9229";return null!==(n=e.match(/^(--inspect(-brk)?)$/))?t=n[1]:null!==(n=e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/))?(t=n[1],/^\d+$/.test(n[3])?s=n[3]:i=n[3]):null!==(n=e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/))&&(t=n[1],i=n[3],s=n[4]),t&&"0"!==s?`${t}=${i}:${parseInt(s)+1}`:e}))}(t=e.exports=new p).program=t,t.Command=p,t.Option=l,t.CommanderError=h,t.InvalidOptionArgumentError=c,t.Help=a},179:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.elf2rprc_sections=void 0;const i=n(747),s=n(297);function r(e,t,n,i=!1){i?e.writeUInt32BE(t,n):e.writeUInt32LE(t,n)}t.elf2rprc_sections=function(e,t,n=!1){const o=i.openSync(e,"r"),a=s.readElfFileHeader(o);if("ELF"!==a.e_ident_magic)return 1;let l=s.readElfSectionHeader(o,a);l=l.filter((e=>!(8&e.sh_type))),l=l.filter((e=>2&e.sh_flags)),l=l.sort(((e,t)=>e.sh_addr<t.sh_addr?-1:e.sh_addr==t.sh_addr?0:1));let h=0;const c=i.openSync(t,"w"),p=Buffer.alloc(20);p.write("RPRC"),r(p,a.e_entry,4,n),r(p,0,8,n),r(p,l.length,12,n),r(p,1,16,n),i.writeSync(c,p,0,20,h),h+=20;for(const e of l){const t=Buffer.alloc(20);r(t,e.sh_addr,0,n),r(t,0,4,n),r(t,e.sh_size,8,n),r(t,0,12,n),r(t,0,16,n),i.writeSync(c,t,0,20,h),h+=20;const s=Buffer.alloc(e.sh_size);i.readSync(o,s,0,e.sh_size,e.sh_offset),i.writeSync(c,s,0,e.sh_size,h),h+=e.sh_size}return i.closeSync(o),i.closeSync(c),0}},297:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isElfFile=t.readElfSectionHeader=t.readElfProgramHeader=t.readElfFileHeader=void 0;const i=n(747);function s(e,t,n,i){if(i<8)return 1==e?t.readUIntLE(n,i):t.readUIntBE(n,i);{const i=1==e?t.readBigUInt64LE(n):t.readBigUInt64BE(n);if(i>BigInt(Number.MAX_SAFE_INTEGER))throw"elf reader cannot handle 8 byte fields with > 53 bits";return Number(i)}}function r(e,t,n,s){const r=n[s.e_shstrndx].sh_offset+t,o=Buffer.alloc(32);i.readSync(e,o,0,32,r);const a=o.indexOf(0);return o.toString("utf8",0,a)}t.readElfFileHeader=function(e){const t=Buffer.alloc(64);i.readSync(e,t,0,64,0);const n=t.readUInt8(5),r=4*t.readUInt8(4);return{e_ident_magic:t.toString("utf8",0,4),e_ident_class:t.readUInt8(4),e_ident_data:t.readUInt8(5),e_ident_version:t.readUInt8(6),e_ident_osabi:t.readUInt8(7),e_ident_abiversion:t.readUInt8(8),e_type:s(n,t,16,2),e_machine:s(n,t,18,2),e_version:s(n,t,20,4),e_entry:s(n,t,24,r),e_phoff:s(n,t,24+r,r),e_shoff:s(n,t,24+2*r,r),e_flags:s(n,t,24+3*r,4),e_ehsize:s(n,t,28+3*r,2),e_phentsize:s(n,t,30+3*r,2),e_phnum:s(n,t,32+3*r,2),e_shentsize:s(n,t,34+3*r,2),e_shnum:s(n,t,36+3*r,2),e_shstrndx:s(n,t,38+3*r,2)}},t.readElfProgramHeader=function(e,t){const n=Number(t.e_ident_data),r=Number(t.e_phnum*t.e_phentsize),o=Buffer.alloc(r);let a;const l=[];i.readSync(e,o,0,r,t.e_phoff);for(let e=0;e<t.e_phnum;e+=1){const i=e*Number(t.e_phentsize);a=32==t.e_phentsize?{p_type:s(n,o,i+0,4),p_offset:s(n,o,i+4,4),p_vaddr:s(n,o,i+8,4),p_paddr:s(n,o,i+12,4),p_filesz:s(n,o,i+16,4),p_memsz:s(n,o,i+20,4),p_flags:s(n,o,i+24,4),p_align:s(n,o,i+28,4)}:{p_type:s(n,o,i+0,4),p_flags:s(n,o,i+4,4),p_offset:s(n,o,i+8,8),p_vaddr:s(n,o,i+16,8),p_paddr:s(n,o,i+24,8),p_filesz:s(n,o,i+32,8),p_memsz:s(n,o,i+40,8),p_align:s(n,o,i+48,8)},l.push(a)}return l},t.readElfSectionHeader=function(e,t){const n=Number(t.e_ident_data),o=Number(t.e_shnum*t.e_shentsize),a=Buffer.alloc(o);let l;const h=[];i.readSync(e,a,0,o,t.e_shoff);for(let e=0;e<t.e_shnum;e+=1){const i=e*t.e_shentsize;l=40==t.e_shentsize?{name:"",sh_name:s(n,a,i+0,4),sh_type:s(n,a,i+4,4),sh_flags:s(n,a,i+8,4),sh_addr:s(n,a,i+12,4),sh_offset:s(n,a,i+16,4),sh_size:s(n,a,i+20,4),sh_link:s(n,a,i+24,4),sh_info:s(n,a,i+28,4),sh_addralign:s(n,a,i+32,4),sh_entsize:s(n,a,i+36,4)}:{name:"",sh_name:s(n,a,i+0,4),sh_type:s(n,a,i+4,4),sh_flags:s(n,a,i+8,8),sh_addr:s(n,a,i+16,8),sh_offset:s(n,a,i+24,8),sh_size:s(n,a,i+32,8),sh_link:s(n,a,i+40,4),sh_info:s(n,a,i+44,4),sh_addralign:s(n,a,i+48,8),sh_entsize:s(n,a,i+56,8)},h.push(l)}for(let n=0;n<t.e_shnum;n+=1)h[n].name=r(e,h[n].sh_name,h,t);return h},t.isElfFile=function(e){const t=Buffer.alloc(4),n=i.openSync(e,"r");return i.readSync(n,t,0,4,0),i.closeSync(n),"ELF"==t.toString()}},888:(e,t,n)=>{"use strict";const i=n(524),s=n(783);s.program.version("00.01.00").description("Generate a multi-core images file").arguments("<inFiles...>").option("-e, --bigEndian","Generate Big Endian File",!1).option("-o, --out <file>","Output File","multicore.appimage").requiredOption("-i, --devID <deviceID>","Device ID").action((e=>{const t=s.program.opts();i.multicoreImageGen_function(e,t.out,t.devID)})),s.program.parse()},524:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multicoreImageGen_function=void 0;const i=n(747),s=n(297),r=n(179),o=n(622),a=n(834);t.multicoreImageGen_function=function(e,t,n){a.autoCleanTempFiles();const l=i.openSync(t,"w");let h=0,c=24+8*e.length;const p={},u=e.length;for(let t=0;t<u;++t){const[n,l]=e[t].split("@");if(l&&n||(console.error("Input files must be in pairs of filePath@coreID"),process.exit(1)),i.existsSync(n)||(console.error(`File ${n} does not exist`),process.exit(1)),s.isElfFile(n)){const i=a.temp(o.parse(n).name+".rprc");r.elf2rprc_sections(n,i),e[t]=i+(l?"@"+l:"")}p[l]=i.statSync(n).size}const m=Buffer.alloc(16);m.write("MSTR"),m.writeUInt32LE(e.length,4),m.writeUInt32LE(Number(n),8),m.writeUInt32LE(0,12),i.writeSync(l,m,0,16,h),h+=16,e.forEach((e=>{const t=e.split("@")[1],n=Buffer.alloc(8);n.writeUInt32LE(Number(t),0),n.writeUInt32LE(c,4),i.writeSync(l,n,0,8,h),h+=8,c+=p[t]}));const d=Buffer.alloc(8);return d.writeUInt32LE(0,0),d.write("MEND",4),i.writeSync(l,d,0,8,h),h+=8,e.forEach((e=>{const[t,n]=e.split("@"),s=p[n],r=Buffer.alloc(s),o=i.openSync(t,"r");i.readSync(o,r,0,s,0),i.writeSync(l,r,0,s,h),i.closeSync(o),h+=s})),i.closeSync(l),0}},834:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoCleanTempFiles=t.getAllTempFiles=t.temp=t.rmTempFile=t.mkDir=void 0;const i=n(87),s=n(747),r=n(622),o=n(749),a=[];function l(e,t=!1){if(s.existsSync(e))t&&(console.log(`mkDir failed. Path ${e} already exists`),process.exit(1));else try{s.mkdirSync(e)}catch(t){console.log(`Could not make directory ${e}`),process.exit(1)}}function h(e,t=!1){if(s.existsSync(e))try{s.unlinkSync(e)}catch(t){console.log(`Could not remove file ${e}`),process.exit(1)}else t&&(console.log(`rmTempFile failed. File ${e} does not exist`),process.exit(1))}let c;function p(){for(const e of a)h(e)}t.mkDir=l,t.rmTempFile=h,t.temp=function(e,t=""){let n,s;c||(c=o.v4()+"_"),""==t?(n=i.tmpdir(),s=c+(e||"")):(n=t,s=e);const h=r.join(n,s);return l(r.dirname(h)),a.push(h),h},t.getAllTempFiles=function(){return a},t.autoCleanTempFiles=function(){process.on("exit",p)}},749:(e,t,n)=>{"use strict";n.r(t),n.d(t,{NIL:()=>O,parse:()=>g,stringify:()=>p,v1:()=>_,v3:()=>y,v4:()=>v,v5:()=>w,validate:()=>h,version:()=>C});const i=require("crypto");var s=n.n(i);const r=new Uint8Array(256);let o=r.length;function a(){return o>r.length-16&&(s().randomFillSync(r),o=0),r.slice(o,o+=16)}const l=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,h=function(e){return"string"==typeof e&&l.test(e)},c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).substr(1));const p=function(e,t=0){const n=(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase();if(!h(n))throw TypeError("Stringified UUID is invalid");return n};let u,m,d=0,f=0;const _=function(e,t,n){let i=t&&n||0;const s=t||new Array(16);let r=(e=e||{}).node||u,o=void 0!==e.clockseq?e.clockseq:m;if(null==r||null==o){const t=e.random||(e.rng||a)();null==r&&(r=u=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==o&&(o=m=16383&(t[6]<<8|t[7]))}let l=void 0!==e.msecs?e.msecs:Date.now(),h=void 0!==e.nsecs?e.nsecs:f+1;const c=l-d+(h-f)/1e4;if(c<0&&void 0===e.clockseq&&(o=o+1&16383),(c<0||l>d)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=l,f=h,m=o,l+=122192928e5;const _=(1e4*(268435455&l)+h)%4294967296;s[i++]=_>>>24&255,s[i++]=_>>>16&255,s[i++]=_>>>8&255,s[i++]=255&_;const g=l/4294967296*1e4&268435455;s[i++]=g>>>8&255,s[i++]=255&g,s[i++]=g>>>24&15|16,s[i++]=g>>>16&255,s[i++]=o>>>8|128,s[i++]=255&o;for(let e=0;e<6;++e)s[i+e]=r[e];return t||p(s)},g=function(e){if(!h(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};function b(e,t,n){function i(e,i,s,r){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof i&&(i=g(i)),16!==i.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let o=new Uint8Array(16+e.length);if(o.set(i),o.set(e,i.length),o=n(o),o[6]=15&o[6]|t,o[8]=63&o[8]|128,s){r=r||0;for(let e=0;e<16;++e)s[r+e]=o[e];return s}return p(o)}try{i.name=e}catch(e){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}const y=b("v3",48,(function(e){return Array.isArray(e)?e=Buffer.from(e):"string"==typeof e&&(e=Buffer.from(e,"utf8")),s().createHash("md5").update(e).digest()})),v=function(e,t,n){const i=(e=e||{}).random||(e.rng||a)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=i[e];return t}return p(i)},w=b("v5",80,(function(e){return Array.isArray(e)?e=Buffer.from(e):"string"==typeof e&&(e=Buffer.from(e,"utf8")),s().createHash("sha1").update(e).digest()})),O="00000000-0000-0000-0000-000000000000",C=function(e){if(!h(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},129:e=>{"use strict";e.exports=require("child_process")},614:e=>{"use strict";e.exports=require("events")},747:e=>{"use strict";e.exports=require("fs")},87:e=>{"use strict";e.exports=require("os")},622:e=>{"use strict";e.exports=require("path")}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,n),r.exports}n.c=t,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(n.s=888)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
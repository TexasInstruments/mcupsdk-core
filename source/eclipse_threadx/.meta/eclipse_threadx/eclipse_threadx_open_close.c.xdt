% let filex_module = system.modules['/eclipse_threadx/filex/filex'];
/*
 *  Copyright (C) 2018-2024 Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Auto generated file
 */

#include "ti_drivers_config.h"
#include "ti_eclipse_threadx_config.h"
#include "ti_eclipse_threadx_open_close.h"
% if (filex_module) {
#include <fx_api.h>
% if (!_.isEmpty(_.filter(filex_module.$instances, function (inst) { return (inst.media == "SD" || inst.media == "EMMC");}))) {
#include <eclipse_threadx/filex/filex_mmcsd/filex_mmcsd.h>
#include <drivers/mmcsd.h>
% }
% }

% if (filex_module) {
% if (!_.isEmpty(_.filter(filex_module.$instances, function (inst) { return (inst.media == "RAMDISK");}))) {
extern VOID _fx_ram_driver(FX_MEDIA *media_ptr);
% }
% }


int32_t EclipseThreadx_open(void)
{
% for(let subTemplate of args) {
`system.getTemplate(subTemplate.open)()`
% }

    return (SystemP_SUCCESS);
}

int32_t EclipseThreadx_close(void)
{
% for(let subTemplate of args) {
`system.getTemplate(subTemplate.close)()`
% }

    return (SystemP_SUCCESS);
}

% for(let subTemplate of args) {
    % if (subTemplate.open_close_config) {
`system.getTemplate(subTemplate.open_close_config)()`
    % }
% }

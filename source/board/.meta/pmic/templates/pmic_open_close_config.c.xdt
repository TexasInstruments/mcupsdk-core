%%{
    let common = system.getScript("/common");
    let module = system.modules['/board/pmic/pmic'];
%%}
/*
 * PMIC
 */
/* PMIC specific includes */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
#include <board/pmic/pmic_`config.name.toLowerCase()`.h>
% }

/* PMIC Object - initalized during PMIC_open() */
PMIC_Object gPmicObject[CONFIG_PMIC_NUM_INSTANCES];
/* PMIC Driver handles - opened during Board_pmicOpen() */
PMIC_Handle gPmicHandle[CONFIG_PMIC_NUM_INSTANCES];

/* PMIC Config */
PMIC_Config gPmicConfig[CONFIG_PMIC_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    {
        .fxns = &gPmicFxns_`config.name`,
        .object = (void *)&gPmicObject[`i`],
    },
% }
};
uint32_t gPmicConfigNum = CONFIG_PMIC_NUM_INSTANCES;

/* PMIC params */
PMIC_Params gPmicParams[CONFIG_PMIC_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let peripheralDriver = instance.peripheralDriver;
    {
        .deviceType  = `config.deviceType`,
        .commMode    = `config.commMode`,
        .instType    = `config.instType`,
        .instance    = `peripheralDriver.$name.toUpperCase()`,
    },
% }
};

int32_t Board_pmicOpen()
{
    uint32_t instCnt;
    int32_t  status = SystemP_SUCCESS;

    for(instCnt = 0U; instCnt < CONFIG_PMIC_NUM_INSTANCES; instCnt++)
    {
        gPmicHandle[instCnt] = NULL;   /* Init to NULL so that we can exit gracefully */
    }

    /* Open all instances */
    for(instCnt = 0U; instCnt < CONFIG_PMIC_NUM_INSTANCES; instCnt++)
    {
        gPmicHandle[instCnt] = PMIC_open(instCnt, &gPmicParams[instCnt]);
        if(NULL == gPmicHandle[instCnt])
        {
            DebugP_logError("PMIC open failed for instance %d !!!\r\n", instCnt);
            status = SystemP_FAILURE;
            break;
        }
    }

    if(SystemP_FAILURE == status)
    {
        Board_pmicClose();   /* Exit gracefully */
    }

    return status;
}

void Board_pmicClose(void)
{
    uint32_t instCnt;

    /* Close all instances that are open */
    for(instCnt = 0U; instCnt < CONFIG_PMIC_NUM_INSTANCES; instCnt++)
    {
        if(gPmicHandle[instCnt] != NULL)
        {
            PMIC_close(gPmicHandle[instCnt]);
            gPmicHandle[instCnt] = NULL;
        }
    }

    return;
}

void Drivers_pmicOpen()
{
    PMIC_Handle pmicHandle = NULL;

    Drivers_mcspiOpen();
    Board_pmicOpen();
    pmicHandle = gPmicHandle[CONFIG_PMIC0];
    PMIC_configure(pmicHandle);
    Drivers_mcspiClose();
    /*Wait 5ms for LDO rail to get initilized*/
    ClockP_usleep(5000);
}
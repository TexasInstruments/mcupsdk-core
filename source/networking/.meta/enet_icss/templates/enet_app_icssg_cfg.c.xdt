%%{
    let module = system.modules["/networking/enet_icss/enet_icss"];
%%}
% let instance = module.$instances[0];
% let enetutilsScript = system.getScript("./../../common/enet_cpsw_utils");

static const Mdio_Cfg enetAppIcssgMdioCfg =
{
    .mode               = `instance.mdioMode`,
    .mdioBusFreqHz      = `instance.mdioBusFreqHz`,
    .phyStatePollFreqHz = `instance.mdioPhyStatePollFreqHz`,
    .pollEnMask         = `enetutilsScript.getArraytoBitMask(instance.mdioPollEnMask)`,
    .c45EnMask          = `enetutilsScript.getArraytoBitMask(instance.mdioC45EnMask)`,
    .isMaster           = `instance.mdioIsMaster`,
    .disableStateMachineOnInit = `instance.mdioDisableStateMachineOnInit`,
};

static const IcssgTimeSync_Cfg enetAppIcssgTimesyncCfg =
{
    .enable            = `instance.timesyncEnable`,
    .clkType           = `instance.timesyncClkType`,
    .syncOut_start_WC  = `instance.timesyncSyncOut_start_WC`,
    .syncOut_pwidth_WC = `instance.timesyncSyncOut_pwidth_WC`
};

static void EnetApp_initMdioConfig(Mdio_Cfg *pMdioCfg)
{
    *pMdioCfg = enetAppIcssgMdioCfg;
}

static void EnetApp_initTimesyncConfig(IcssgTimeSync_Cfg *pTimesyncCfg)
{
    *pTimesyncCfg = enetAppIcssgTimesyncCfg;
}

static void EnetApp_getIcssgInitCfg(Enet_Type enetType,
                                    uint32_t instId,
                                    Icssg_Cfg *pIcssgCfg)
{
    EnetApp_initTimesyncConfig(&pIcssgCfg->timeSyncCfg);
    EnetApp_initMdioConfig(&pIcssgCfg->mdioCfg);
}

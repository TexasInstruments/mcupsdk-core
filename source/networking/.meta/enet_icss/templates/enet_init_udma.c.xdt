%%{
    let module = system.modules["/networking/enet_icss/enet_icss"];
%%}
% let instance = module.$instances[0];
% let instances = module.$instances;

%%{
function getTxNumPkts(module, instance) {
    let txPktAry = new Array();        

    for (var i = 0; i < module.getTxChannelCount(instance); i++)
    {
        txPktAry.push((module.getChannelConfig(instance, "TX", i)).PacketsCount);
    }
    return txPktAry;
}

function getAllTxNumPkts(module, instances){
    let txPktTtlAry = new Array();

    for ( let i in instances)
    {
        txPktTtlAry.push(getTxNumPkts(module, instances[i]));
    }
    return txPktTtlAry;
}

function getRxNumPkts(module, instance) {
    let rxPktAry = new Array();

    for (var i = 0; i < module.getRxChannelCount(instance); i++)
    {
        rxPktAry.push((module.getChannelConfig(instance, "RX", i)).PacketsCount);
    }
    return rxPktAry;
}

function getRxAllocMacInfo(module, instance) {
    let rxPktAry = new Array();

    for (var i = 0; i < module.getRxChannelCount(instance); i++)
    {
        rxPktAry.push((module.getChannelConfig(instance, "RX", i)).macAddrCount);
    }
    return rxPktAry;
}

function getTxDmaGlobalEvtCfg(module, instance) {
    let txDmaCfgAry = new Array();        

    for (var i = 0; i < module.getTxChannelCount(instance); i++)
    {
        txDmaCfgAry.push((module.getChannelConfig(instance, "TX", i)).useGlobalEvt);
    }
    return txDmaCfgAry;
}

function getAllTxDmaGlobalEvtCfg(module, instances) {
    let txAllDmaCfgAry = new Array();
    
    for (let i in instances)
    {
        txAllDmaCfgAry.push(getTxDmaGlobalEvtCfg(module, instances[i]));
    }
    return txAllDmaCfgAry;
}

function getRxDmaGlobalEvtCfg(module, instance) {
    let rxDmaCfgAry = new Array();        

    for (var i = 0; i < module.getRxChannelCount(instance); i++)
    {
        rxDmaCfgAry.push((module.getChannelConfig(instance, "RX", i)).useGlobalEvt);
    }
    return rxDmaCfgAry;
}

function getRxDmaSizeThreshEn(module, instance) {
    let rxDmaCfgAry = new Array();        

    for (var i = 0; i < module.getRxChannelCount(instance); i++)
    {
        rxDmaCfgAry.push((module.getChannelConfig(instance, "RX", i)).sizeThreshEn);
    }
    return rxDmaCfgAry;
}

function getRxDmaIsDefaultFlow(module, instance) {
    let rxDmaCfgAry = new Array();        

    for (var i = 0; i < module.getRxChannelCount(instance); i++)
    {
        rxDmaCfgAry.push((module.getChannelConfig(instance, "RX", i)).useDefaultFlow);
    }
    return rxDmaCfgAry;
}

function getDmaCfgInitArray(module, instances, indent) {
    let rxDmaCfgAry = new Array();
    let count = 0;
    for (let i in instances)
    {
        let instance = instances[i];
        for (var j = 0; j < module.getRxChannelCount(instance); j++)
        {
            let matchInstId = module.getInstId(instance);
            let rxChCfg = module.getChannelConfig(instance, "RX", j);
            let rxChCfgInitStr = "\n\t[" + count + "] = " +
                                 "\n\t{"              + 
                                    "\n\t\t.maxNumRxPkts    = " + rxChCfg.PacketsCount + "," +
                                    "\n\t\t.numValidMacAddress = " + rxChCfg.macAddrCount + "," +
                                    "\n\t\t.useGlobalEvt    = " + rxChCfg.useGlobalEvt + "," +
                                    "\n\t\t.useDefaultFlow  = " + rxChCfg.useDefaultFlow + "," +
                                    "\n\t\t.sizeThreshEn    = " + rxChCfg.sizeThreshEn + "," +
                                    "\n\t\t.enetType        = " + matchInstId.enetType + "," +
                                    "\n\t\t.instId          = " + matchInstId.instId + "," +
                                    "\n\t\t.chIdx           = " + rxChCfg.chIdx + "," +
                                 "\n\t}";
            const numSpaces = 4 + indent;
            let rxChCfgInitStrFormat = rxChCfgInitStr.replace(/\t/g, ' '.repeat(numSpaces));
            rxDmaCfgAry.push(rxChCfgInitStrFormat);
            count++;
        }
    }
    
    return rxDmaCfgAry;
}

function getDmaCfgOnlyInitArray(module, instances, indent) {
    let rxDmaCfgAry = new Array();
    let count = 0;
    for (let i in instances)
    {
        let instance = instances[i];
        for (var j = 0; j < module.getRxChannelCount(instance); j++)
        {
            let matchInstId = module.getInstId(instance);
            let rxChCfg = module.getChannelConfig(instance, "RX", j);
            let rxChCfgInitStr = "\n\t[" + count + "] = " +
                                 "\n\t{"              + 
                                    "\n\t\t.maxNumRxPkts    = " + rxChCfg.PacketsCount + "," +
                                    "\n\t\t.numValidMacAddress = " + rxChCfg.macAddrCount + "," +
                                    "\n\t\t.useGlobalEvt    = " + rxChCfg.useGlobalEvt + "," +
                                    "\n\t\t.useDefaultFlow  = " + rxChCfg.useDefaultFlow + "," +
                                    "\n\t\t.sizeThreshEn    = " + rxChCfg.sizeThreshEn + "," +
                                 "\n\t}";
            const numSpaces = 4 + indent;
            let rxChCfgInitStrFormat = rxChCfgInitStr.replace(/\t/g, ' '.repeat(numSpaces));
            rxDmaCfgAry.push(rxChCfgInitStrFormat);
            count++;
        }
    }
    
    return rxDmaCfgAry;
}

function getTxDmaHandleArray(module, instances, indent) {
    let txDmaHandleAry = new Array();
    let count = 0;
    for (let i in instances)
    {
        let instance = instances[i];
        for (var j = 0; j < module.getTxChannelCount(instance); j++)
        {
            let matchInstId = module.getInstId(instance);
            let txChCfg = module.getChannelConfig(instance, "TX", j);
            let txChCfgInitStr = "\n\t[" + count + "] = " +
                                 "\n\t{"              + 
                                    "\n\t\t.useGlobalEvt    = " + (module.getChannelConfig(instance, "TX", j)).useGlobalEvt + "," +
                                    "\n\t\t.packetsCount    = " + (module.getChannelConfig(instance, "TX", j)).PacketsCount + "," +
                                    "\n\t\t.enetType        = " + matchInstId.enetType + "," +
                                    "\n\t\t.instId          = " + matchInstId.instId + "," +
                                 "\n\t}";
            const numSpaces = 4 + indent;
            let txChCfgInitStrFormat = txChCfgInitStr.replace(/\t/g, ' '.repeat(numSpaces));
            txDmaHandleAry.push(txChCfgInitStrFormat);
            count++;
        }
    }
    
    return txDmaHandleAry;
}

function getTotalRxChCount(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getRxChannelCount(instances[i]);
    }
    return num;
}

function getTotalTxChCount(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getTxChannelCount(instances[i]);
    }
    return num;
}

function getTxDmaCfgInitArray(module, instances, indent) {
    let txDmaCfgAry = new Array();
    let count = 0;
    
    for(let i in instances)
    {
        let matchInstId = module.getInstId(instances[i]);
        for (var j = 0; j < module.getTxChannelCount(instances[i]); j++)
        {
            let instance = instances[i];
            let txChCfgInitStr = "\n\t[" + count + "] = " +
                                 "\n\t{"              + 
                                    "\n\t\t.useGlobalEvt    = " + (module.getChannelConfig(instance, "TX", j)).useGlobalEvt + "," +
                                    "\n\t\t.hUdmaDrv        = " + "NULL" + "," +
                                    "\n\t\t.enetType        = " + matchInstId.enetType + "," +
                                    "\n\t\t.instId          = " + matchInstId.instId + "," +
                                 "\n\t}";
            const numSpaces = 4 + indent;
            let txChCfgInitStrFormat = txChCfgInitStr.replace(/\t/g, ' '.repeat(numSpaces));
            txDmaCfgAry.push(txChCfgInitStrFormat);
            count++;
        }
    }
    return txDmaCfgAry;
}

%%}


static int32_t EnetAppUtils_allocRxFlowForChIdx(Enet_Handle hEnet,
                                                uint32_t coreKey,
                                                uint32_t coreId,
                                                uint32_t chIdx,
                                                uint32_t *rxFlowStartIdx,
                                                uint32_t *flowIdx)
{
    int32_t status = ENET_SOK;
    Enet_IoctlPrms prms;
    EnetRm_AllocRxFlowInArgs inArgs;
    EnetRm_AllocRxFlow rxFlowPrms;

    inArgs.coreKey = coreKey;
    inArgs.chIdx   = chIdx;

    ENET_IOCTL_SET_INOUT_ARGS(&prms, &inArgs, &rxFlowPrms);
    ENET_IOCTL(hEnet,
               coreId,
               ENET_RM_IOCTL_ALLOC_RX_FLOW,
               &prms,
               status);

    if (status == ENET_SOK)
    {
        *rxFlowStartIdx = rxFlowPrms.startIdx;
        *flowIdx        = rxFlowPrms.flowIdx;
    }
    else
    {
        EnetAppUtils_print("EnetAppUtils_allocRxFlowForChIdx() failed : %d\n", status);
    }

    return status;
}

static int32_t EnetAppUtils_allocTxCh(Enet_Handle hEnet,
                                      uint32_t coreKey,
                                      uint32_t coreId,
                                      uint32_t *txPSILThreadId)
{
    int32_t status = ENET_SOK;
    Enet_IoctlPrms prms;

    /* Allocate Tx Ch */
    ENET_IOCTL_SET_INOUT_ARGS(&prms, &coreKey, txPSILThreadId);
    ENET_IOCTL(hEnet,
               coreId,
               ENET_RM_IOCTL_ALLOC_TX_CH_PEERID,
               &prms,
               status);
    if (status != ENET_SOK)
    {
        *txPSILThreadId = ENET_RM_TXCHNUM_INVALID;
        EnetAppUtils_print("EnetAppUtils_allocTxCh() failed: %d\n", status);
    }

    return status;
}

static int32_t EnetAppUtils_freeRxFlow(Enet_Handle hEnet,
                                       uint32_t coreKey,
                                       uint32_t coreId,
                                       uint32_t rxFlowIdx)
{
    int32_t status = ENET_SOK;
    Enet_IoctlPrms prms;
    EnetRm_FreeRxFlowInArgs freeRxFlowInArgs;

    /*Free Rx Flow*/
    freeRxFlowInArgs.coreKey = coreKey;
    freeRxFlowInArgs.flowIdx = rxFlowIdx;
    freeRxFlowInArgs.chIdx   = 0U;

    ENET_IOCTL_SET_IN_ARGS(&prms, &freeRxFlowInArgs);
    ENET_IOCTL(hEnet,
               coreId,
               ENET_RM_IOCTL_FREE_RX_FLOW,
               &prms,
               status);

    return status;
}

static int32_t EnetAppUtils_freeRxFlowForChIdx(Enet_Handle hEnet,
                                               uint32_t coreKey,
                                               uint32_t coreId,
                                               uint32_t chIdx,
                                               uint32_t rxFlowIdx)
{
    int32_t status = ENET_SOK;
    Enet_IoctlPrms prms;
    EnetRm_FreeRxFlowInArgs freeRxFlowInArgs;

    /*Free Rx Flow*/
    freeRxFlowInArgs.coreKey = coreKey;
    freeRxFlowInArgs.flowIdx = rxFlowIdx;
    freeRxFlowInArgs.chIdx   = chIdx;

    ENET_IOCTL_SET_IN_ARGS(&prms, &freeRxFlowInArgs);
    ENET_IOCTL(hEnet,
               coreId,
               ENET_RM_IOCTL_FREE_RX_FLOW,
               &prms,
               status);

    return status;
}

static int32_t EnetAppUtils_freeTxCh(Enet_Handle hEnet,
                                     uint32_t coreKey,
                                     uint32_t coreId,
                                     uint32_t txChNum)
{
    int32_t status = ENET_SOK;
    Enet_IoctlPrms prms;
    EnetRm_FreeTxChInArgs freeTxChInArgs;

    /* Release Tx Ch */
    freeTxChInArgs.coreKey = coreKey;
    freeTxChInArgs.txChNum = txChNum;

    ENET_IOCTL_SET_IN_ARGS(&prms, &freeTxChInArgs);
    ENET_IOCTL(hEnet,
               coreId,
               ENET_RM_IOCTL_FREE_TX_CH_PEERID,
               &prms,
               status);

    return status;
}


static void EnetAppUtils_openTxCh(Enet_Handle hEnet,
                                  uint32_t coreKey,
                                  uint32_t coreId,
                                  uint32_t *pTxChNum,
                                  EnetDma_TxChHandle *pTxChHandle,
                                  EnetUdma_OpenTxChPrms *pIcssTxChCfg)
{
    EnetDma_Handle hDma = Enet_getDmaHandle(hEnet);
    int32_t status;

    EnetAppUtils_assert(hDma != NULL);

    status = EnetAppUtils_allocTxCh(hEnet,
                                    coreKey,
                                    coreId,
                                    pTxChNum);
    EnetAppUtils_assert(ENET_SOK == status);

    pIcssTxChCfg->chNum = *pTxChNum;

    *pTxChHandle = EnetDma_openTxCh(hDma, pIcssTxChCfg);
    EnetAppUtils_assert(NULL != *pTxChHandle);
}

static void EnetAppUtils_closeTxCh(Enet_Handle hEnet,
                                   uint32_t coreKey,
                                   uint32_t coreId,
                                   EnetDma_PktQ *pFqPktInfoQ,
                                   EnetDma_PktQ *pCqPktInfoQ,
                                   EnetDma_TxChHandle hTxChHandle,
                                   uint32_t txChNum)
{
    int32_t status;

    EnetQueue_initQ(pFqPktInfoQ);
    EnetQueue_initQ(pCqPktInfoQ);

    EnetDma_disableTxEvent(hTxChHandle);
    status = EnetDma_closeTxCh(hTxChHandle, pFqPktInfoQ, pCqPktInfoQ);
    EnetAppUtils_assert(ENET_SOK == status);

    status = EnetAppUtils_freeTxCh(hEnet,
                                   coreKey,
                                   coreId,
                                   txChNum);
    EnetAppUtils_assert(ENET_SOK == status);
}


static void EnetAppUtils_openRxFlowForChIdx(Enet_Type enetType,
                                            Enet_Handle hEnet,
                                            uint32_t coreKey,
                                            uint32_t coreId,
                                            bool useDefaultFlow,
                                            uint32_t allocMacAddrCnt,
                                            uint32_t chIdx,
                                            uint32_t *pRxFlowStartIdx,
                                            uint32_t *pRxFlowIdx,
                                            uint8_t macAddr[ENET_MAX_NUM_MAC_PER_PHER][ENET_MAC_ADDR_LEN],
                                            EnetDma_RxChHandle *pRxFlowHandle,
                                            EnetUdma_OpenRxFlowPrms *pRxFlowPrms)
{
    EnetDma_Handle hDma = Enet_getDmaHandle(hEnet);
    int32_t status = ENET_SOK;

    EnetAppUtils_assert(hDma != NULL);

    status = EnetAppUtils_allocRxFlowForChIdx(hEnet,
                                              coreKey,
                                              coreId,
                                              chIdx,
                                              pRxFlowStartIdx,
                                              pRxFlowIdx);
    EnetAppUtils_assert(status == ENET_SOK);

    pRxFlowPrms->startIdx = *pRxFlowStartIdx;
    pRxFlowPrms->flowIdx  = *pRxFlowIdx;
    pRxFlowPrms->chIdx    = chIdx;

    *pRxFlowHandle = EnetDma_openRxCh(hDma, pRxFlowPrms);
    EnetAppUtils_assert(*pRxFlowHandle != NULL);

    if (useDefaultFlow)
    {
        if (chIdx == 0U)
        {
            for (uint32_t i = 0; i < allocMacAddrCnt; i++)
            {
                status = EnetAppUtils_allocMac(hEnet, coreKey, coreId, macAddr[i]);
                EnetAppUtils_assert(status == ENET_SOK);

                {
                    // Should we add this entry to ICSSG FDB?
                }
            }
        }

        status = EnetAppUtils_regDfltRxFlowForChIdx(hEnet,
                                                    coreKey,
                                                    coreId,
                                                    chIdx,
                                                    *pRxFlowStartIdx,
                                                    *pRxFlowIdx);
    }
    else
    {
        if (allocMacAddrCnt > 0)
        {

        }
    }

    EnetAppUtils_assert(status == ENET_SOK);
}

static void EnetAppUtils_closeRxFlowForChIdx(Enet_Type enetType,
                                            Enet_Handle hEnet,
                                            uint32_t coreKey,
                                            uint32_t coreId,
                                            bool useDefaultFlow,
                                            EnetDma_PktQ *pFqPktInfoQ,
                                            EnetDma_PktQ *pCqPktInfoQ,
                                            uint32_t chIdx,
                                            uint32_t rxFlowStartIdx,
                                            uint32_t rxFlowIdx,
                                            uint32_t allocMacAddrCnt,
                                            uint8_t macAddr[ENET_MAX_NUM_MAC_PER_PHER][ENET_MAC_ADDR_LEN],
                                            EnetDma_RxChHandle hRxFlow)
{
    int32_t status = ENET_SOK;

    EnetQueue_initQ(pFqPktInfoQ);
    EnetQueue_initQ(pCqPktInfoQ);

    EnetDma_disableRxEvent(hRxFlow);

    if (useDefaultFlow)
    {
        status = EnetAppUtils_unregDfltRxFlowForChIdx(hEnet,
                                                      coreKey,
                                                      coreId,
                                                      chIdx,
                                                      rxFlowStartIdx,
                                                      rxFlowIdx);
        EnetAppUtils_assert(status == ENET_SOK);

        for(uint32_t i = 0; i < allocMacAddrCnt; i++)
        {
            status = EnetAppUtils_freeMac(hEnet,
                                          coreKey,
                                          coreId,
                                          macAddr[i]);
            EnetAppUtils_assert(status == ENET_SOK);
        }
    }
    else
    {

    }

    status = EnetDma_closeRxCh(hRxFlow, pFqPktInfoQ, pCqPktInfoQ);
    EnetAppUtils_assert(status == ENET_SOK);


    status = EnetAppUtils_freeRxFlowForChIdx(hEnet,
                                             coreKey,
                                             coreId,
                                             chIdx,
                                             rxFlowIdx);
    EnetAppUtils_assert(status == ENET_SOK);
}


static void EnetApp_txPktNotifyCb(void *cbArg)
{


}

static void EnetApp_rxPktNotifyCb(void *cbArg)
{


}

static void EnetApp_openTxDma(EnetAppTxDmaSysCfg_Obj *tx,
                              uint32_t numTxPkts,
                              Enet_Handle hEnet, 
                              uint32_t coreKey,
                              uint32_t coreId,
                              EnetAppTxDmaCfg_Info *txCfg)
{
    EnetUdma_OpenTxChPrms enetTxChCfg;

    EnetDma_initTxChParams(&enetTxChCfg);
    EnetAppUtils_setCommonTxChPrms(&enetTxChCfg);
    enetTxChCfg.hUdmaDrv  = txCfg->hUdmaDrv;
    /* This param is dont care for UDMA LCDMA variant */
    enetTxChCfg.useProxy  = false;
    enetTxChCfg.numTxPkts = numTxPkts;
    enetTxChCfg.cbArg     = tx;
    enetTxChCfg.notifyCb  = EnetApp_txPktNotifyCb;
    enetTxChCfg.useGlobalEvt = txCfg->useGlobalEvt;


    EnetAppUtils_openTxCh(hEnet,
                          coreKey,
                          coreId,
                          &tx->txChNum,
                          &tx->hTxCh,
                          &enetTxChCfg);
}

static void EnetApp_openRxDma(EnetAppRxDmaSysCfg_Obj *rx,
                              Enet_Handle hEnet, 
                              uint32_t coreKey,
                              uint32_t coreId,
                              uint32_t chIdx,
                              Udma_DrvHandle hUdmaDrv,
                              const EnetAppRxDmaCfg_Info *rxCfg)
{
    EnetUdma_OpenRxFlowPrms enetRxFlowCfg;
    int32_t status;
    Enet_Type enetType;
    uint32_t instId;

    status = Enet_getHandleInfo(hEnet,
                                &enetType,
                                &instId);
    EnetAppUtils_assert(status == ENET_SOK);
    (void)instId; /* Instd id not used */

    EnetDma_initRxChParams(&enetRxFlowCfg);
    EnetAppUtils_setCommonRxFlowPrms(&enetRxFlowCfg);
    /* Plugin dummy callback. This will be overridden by 
     * application provided callback when getHandle is done */
    enetRxFlowCfg.notifyCb  = EnetApp_rxPktNotifyCb;
    enetRxFlowCfg.cbArg     = rx;
    enetRxFlowCfg.numRxPkts = rxCfg->maxNumRxPkts;
    enetRxFlowCfg.hUdmaDrv  = hUdmaDrv;
    /* This param is dont care for UDMA LCDMA variant */
    enetRxFlowCfg.useProxy  = false;
    enetRxFlowCfg.useGlobalEvt = rxCfg->useGlobalEvt;
    enetRxFlowCfg.flowPrms.sizeThreshEn = rxCfg->sizeThreshEn;

#if (UDMA_SOC_CFG_UDMAP_PRESENT == 1)
    {
        /* Use ring monitor for the CQ ring of RX flow */
        EnetUdma_UdmaRingPrms *pFqRingPrms = &enetRxFlowCfg.udmaChPrms.fqRingPrms;
        pFqRingPrms->useRingMon = rxCfg->useRingMon;
        pFqRingPrms->ringMonCfg.mode = TISCI_MSG_VALUE_RM_MON_MODE_THRESHOLD;
        /* Ring mon low threshold */

#if defined _DEBUG_
        /* In debug mode as CPU is processing lesser packets per event, keep threshold more */
        pFqRingPrms->ringMonCfg.data0 = (numRxPkts - 10U);
#else
        pFqRingPrms->ringMonCfg.data0 = (numRxPkts - 20U);
#endif
        /* Ring mon high threshold - to get only low  threshold event, setting high threshold as more than ring depth*/
        pFqRingPrms->ringMonCfg.data1 = numRxPkts;
    }
#endif


    EnetAppUtils_openRxFlowForChIdx(enetType,
                                hEnet,
                                coreKey,
                                coreId,
                                rxCfg->useDefaultFlow,
                                rxCfg->numValidMacAddress,
                                chIdx,
                                &rx->rxFlowStartIdx,
                                &rx->rxFlowIdx,
                                rx->macAddr,
                                &rx->hRxCh,
                                &enetRxFlowCfg);

    rx->numValidMacAddress = rxCfg->numValidMacAddress;

}

void EnetApp_closeTxDma(uint32_t enetTxDmaChId,
                        Enet_Handle hEnet, 
                        uint32_t coreKey,
                        uint32_t coreId,
                        EnetDma_PktQ *fqPktInfoQ,
                        EnetDma_PktQ *cqPktInfoQ)
{
    EnetAppTxDmaSysCfg_Obj *tx;
    uint32_t i;
    for (i = 0; i< ENET_SYSCFG_NUM_PERIPHERAL; i++)
    {
        EnetAppUtils_assert(enetTxDmaChId < ENET_ARRAYSIZE(gEnetAppSysCfgObj.dma[i].tx));
        tx = &gEnetAppSysCfgObj.dma[i].tx[enetTxDmaChId];
    }
    EnetQueue_initQ(fqPktInfoQ);
    EnetQueue_initQ(cqPktInfoQ);
    EnetApp_retrieveFreeTxPkts(tx->hTxCh, cqPktInfoQ);
    EnetAppUtils_closeTxCh(hEnet,
                           coreKey,
                           coreId,
                           fqPktInfoQ,
                           cqPktInfoQ,
                           tx->hTxCh,
                           tx->txChNum);
    memset(tx, 0, sizeof(*tx));
}

void EnetApp_closeRxDma(uint32_t enetRxDmaChId,
                        Enet_Handle hEnet, 
                        uint32_t coreKey,
                        uint32_t coreId,
                        EnetDma_PktQ *fqPktInfoQ,
                        EnetDma_PktQ *cqPktInfoQ)
{
    Enet_Type enetType;
    uint32_t instId;
    int32_t status;
    const EnetAppRxDmaCfg_Info rxDmaInfo[ENET_SYSCFG_RX_FLOWS_NUM] = 
    {
        `getDmaCfgInitArray(module, instances, 4)`
    
    };

    status = Enet_getHandleInfo(hEnet,
                                &enetType,
                                &instId);
    EnetAppUtils_assert(status == ENET_SOK);
    EnetAppUtils_assert(enetRxDmaChId < ENET_ARRAYSIZE(gEnetAppSysCfgObj.dma[0].rx));
    EnetAppUtils_assert(enetRxDmaChId < ENET_ARRAYSIZE(rxDmaInfo));

    /* Close RX channel */
    EnetQueue_initQ(fqPktInfoQ);
    EnetQueue_initQ(cqPktInfoQ);

    EnetAppRxDmaSysCfg_Obj *pRx= &gEnetAppSysCfgObj.dma[0].rx[enetRxDmaChId];
    EnetAppUtils_closeRxFlowForChIdx(enetType,
                                         hEnet,
                                         coreKey,
                                         coreId,
                                         rxDmaInfo[enetRxDmaChId].useDefaultFlow,
                                         fqPktInfoQ,
                                         cqPktInfoQ,
                                         enetRxDmaChId,
                                         pRx->rxFlowStartIdx,
                                         pRx->rxFlowIdx,
                                         pRx->numValidMacAddress,
                                         pRx->macAddr,
                                         pRx->hRxCh);
    EnetAppSoc_releaseMacAddrList(pRx->macAddr, pRx->numValidMacAddress);
    memset(pRx, 0, sizeof(*pRx));
}

void EnetApp_txChInPeripheral(Enet_Type enetType, uint32_t instId, uint32_t *startIdx, uint32_t *chCount)
{
    uint32_t i, count = 0;
    int32_t startIdOffset = -1;
    const txAppHandleInfo txChInfo[ENET_SYSCFG_TX_CHANNELS_NUM] =
                           {
                               `getTxDmaHandleArray(module, instances, 4)`
                           };
    
    for (i = 0; i < ENET_SYSCFG_TX_CHANNELS_NUM; i++)
    {
        if (enetType == txChInfo[i].enetType && instId == txChInfo[i].instId)
        {
            if (startIdOffset == -1)
            {
                startIdOffset = i;
            }
            count++;
        }
    }
    *startIdx = startIdOffset;
    *chCount  = count;
}

void EnetApp_rxChInPeripheral(Enet_Type enetType, uint32_t instId, uint32_t *startIdx, uint32_t *chCount)
{
    uint32_t i, count = 0;
    int32_t startIdOffset = -1;
    const EnetApp_GetRxDmaHandleOutArgs rxChInfo[ENET_SYSCFG_RX_FLOWS_NUM] =
                           {
                               `getDmaCfgInitArray(module, instances, 4)`
                           };
    
    for (i = 0; i < ENET_SYSCFG_RX_FLOWS_NUM; i++)
    {
        if (enetType == rxChInfo[i].enetType && instId == rxChInfo[i].instId)
        {
            if (startIdOffset == -1)
            {
                startIdOffset = i;
            }
            count++;
        }
    }
    *startIdx = startIdOffset;
    *chCount  = count;
}

void EnetApp_getTxDmaHandle(uint32_t enetTxDmaChId,
                            const EnetApp_GetDmaHandleInArgs *inArgs,
                            EnetApp_GetTxDmaHandleOutArgs *outArgs)
{
    int32_t status;
    EnetAppTxDmaSysCfg_Obj *tx;
    const uint32_t module = 0;
    const uint32_t txNumPkts[ENET_SYSCFG_TX_CHANNELS_NUM] = 
                           {
                            `getAllTxNumPkts(module, instances)`
                           };

    const txAppHandleInfo txChInfo[ENET_SYSCFG_TX_CHANNELS_NUM] =
                           {
                               `getTxDmaHandleArray(module, instances, 4)`
                           };

    EnetAppUtils_assert(enetTxDmaChId < ENET_ARRAYSIZE(txNumPkts));
    EnetAppUtils_assert(enetTxDmaChId < ENET_ARRAYSIZE(gEnetAppSysCfgObj.dma[module].tx));
    tx = &gEnetAppSysCfgObj.dma[module].tx[enetTxDmaChId];

    EnetAppUtils_assert(tx->hTxCh != NULL);
    status = EnetDma_registerTxEventCb(tx->hTxCh, inArgs->notifyCb, inArgs->cbArg);
    EnetAppUtils_assert(status == ENET_SOK);
    outArgs->hTxCh = tx->hTxCh;
    outArgs->txChNum = tx->txChNum;
    outArgs->maxNumTxPkts = txChInfo[enetTxDmaChId].packetsCount;
    outArgs->useGlobalEvt = txChInfo[enetTxDmaChId].useGlobalEvt;
    return;
}

void EnetApp_getMacAddress(uint32_t enetRxDmaChId,
                            EnetApp_GetMacAddrOutArgs *outArgs)
{

    EnetAppUtils_assert(enetRxDmaChId < ENET_ARRAYSIZE(gEnetAppSysCfgObj.dma[0].rx));
    EnetAppRxDmaSysCfg_Obj* rx = &gEnetAppSysCfgObj.dma[0].rx[enetRxDmaChId]; // 

    outArgs->macAddressCnt = rx->numValidMacAddress;
    EnetAppUtils_assert(outArgs->macAddressCnt <= ENET_MAX_NUM_MAC_PER_PHER);
    for (uint32_t i = 0; i < outArgs->macAddressCnt; i++)
    {
        EnetUtils_copyMacAddr(outArgs->macAddr[i], rx->macAddr[i]);
    }

}

void EnetApp_getRxDmaHandle(uint32_t enetRxDmaChId,
                            const EnetApp_GetDmaHandleInArgs *inArgs,
                            EnetApp_GetRxDmaHandleOutArgs *outArgs)
{
    int32_t status;
    uint32_t startIdOffset;
    EnetAppRxDmaSysCfg_Obj *rx;

    const uint32_t module = 0;
    const EnetApp_GetRxDmaHandleOutArgs rxDmaInfo[ENET_SYSCFG_RX_FLOWS_NUM] = 
    {
        `getDmaCfgInitArray(module, instances, 4)`
    };

    for (startIdOffset = 0; startIdOffset < ENET_SYSCFG_RX_FLOWS_NUM; startIdOffset++)
    {
        if (inArgs->enetType == rxDmaInfo[startIdOffset].enetType && inArgs->instId == rxDmaInfo[startIdOffset].instId)
        {
            break;
        }
    }
    EnetAppUtils_assert(enetRxDmaChId < ENET_ARRAYSIZE(gEnetAppSysCfgObj.dma[module].rx));
    rx = &gEnetAppSysCfgObj.dma[module].rx[enetRxDmaChId];

    EnetAppUtils_assert(rx->hRxCh != NULL);
    status = EnetDma_registerRxEventCb(rx->hRxCh, inArgs->notifyCb, inArgs->cbArg);
    EnetAppUtils_assert(status == ENET_SOK);
    
    outArgs->hRxCh = rx->hRxCh;
    outArgs->rxFlowIdx = rx->rxFlowIdx;
    outArgs->rxFlowStartIdx = rx->rxFlowStartIdx;
    EnetAppUtils_assert(enetRxDmaChId < ENET_ARRAYSIZE(rxDmaInfo));
    outArgs->numValidMacAddress = rx->numValidMacAddress;
    for (uint32_t i = 0; i < rx->numValidMacAddress; i++)
    {
        EnetUtils_copyMacAddr(outArgs->macAddr[i], rx->macAddr[i]);
    }
    outArgs->maxNumRxPkts   = rxDmaInfo[enetRxDmaChId].maxNumRxPkts;
    outArgs->sizeThreshEn   = rxDmaInfo[enetRxDmaChId].sizeThreshEn;
    outArgs->useDefaultFlow = rxDmaInfo[enetRxDmaChId].useDefaultFlow;
    outArgs->useGlobalEvt   = rxDmaInfo[enetRxDmaChId].useGlobalEvt;
    outArgs->chIdx          = rxDmaInfo[enetRxDmaChId].chIdx;
    return;
}

static void EnetApp_openAllTxDmaChannels(EnetAppDmaSysCfg_Obj *dma,
                                         Enet_Handle hEnet, 
                                         uint32_t coreKey,
                                         uint32_t coreId)
{
    const uint32_t txNumPkts[ENET_SYSCFG_TX_CHANNELS_NUM] = 
                           {
                            `getAllTxNumPkts(module, instances)`
                           };
                           
    EnetAppTxDmaCfg_Info txDmaCfg[ENET_SYSCFG_TX_CHANNELS_NUM] =
                           {
                            `getTxDmaCfgInitArray(module, instances, 4)`
                           };

    for (uint32_t chIdx = 0; chIdx < ENET_SYSCFG_TX_CHANNELS_NUM; chIdx++)
    {
        if (hEnet->enetPer->enetType == txDmaCfg[chIdx].enetType && hEnet->enetPer->instId == txDmaCfg[chIdx].instId)
        {
            txDmaCfg[chIdx].hUdmaDrv     = EnetApp_getUdmaInstanceHandle();
            EnetApp_openTxDma(&dma->tx[chIdx], txNumPkts[chIdx], hEnet, coreKey, coreId, &txDmaCfg[chIdx]);
        }
    }
}

static void EnetApp_openAllRxDmaChannels(EnetAppDmaSysCfg_Obj *dma,
                                         Enet_Handle hEnet, 
                                         uint32_t coreKey,
                                         uint32_t coreId)
{
    uint32_t flowIdx;
    const EnetAppRxDmaCfg_Info rxDmaCfg[ENET_SYSCFG_RX_FLOWS_NUM] = 
    {
        `getDmaCfgInitArray(module, instances, 4)`
    };
    Udma_DrvHandle hUdmaDrv;

    hUdmaDrv = EnetApp_getUdmaInstanceHandle();

    for (flowIdx = 0; flowIdx<ENET_SYSCFG_RX_FLOWS_NUM; flowIdx++)
    {
        if(hEnet->enetPer->enetType == rxDmaCfg[flowIdx].enetType && hEnet->enetPer->instId == rxDmaCfg[flowIdx].instId)
        {
            EnetApp_openRxDma(&dma->rx[flowIdx], hEnet, coreKey, coreId,  rxDmaCfg[flowIdx].chIdx, hUdmaDrv, &rxDmaCfg[flowIdx]);
        }
    }
}

#define ENET_SYSCFG_DEFAULT_NUM_TX_PKT                                     (`module.getDefaultPacketCount("TX")`U)
#define ENET_SYSCFG_DEFAULT_NUM_RX_PKT                                     (`module.getDefaultPacketCount("RX")`U)


void EnetAppUtils_setCommonRxFlowPrms(EnetUdma_OpenRxFlowPrms *pRxFlowPrms)
{
    pRxFlowPrms->numRxPkts           = ENET_SYSCFG_DEFAULT_NUM_RX_PKT;
    pRxFlowPrms->disableCacheOpsFlag = false;
    pRxFlowPrms->rxFlowMtu           = ENET_MEM_LARGE_POOL_PKT_SIZE;

    pRxFlowPrms->ringMemAllocFxn = &EnetMem_allocRingMem;
    pRxFlowPrms->ringMemFreeFxn  = &EnetMem_freeRingMem;

    pRxFlowPrms->dmaDescAllocFxn = &EnetMem_allocDmaDesc;
    pRxFlowPrms->dmaDescFreeFxn  = &EnetMem_freeDmaDesc;
}

void EnetAppUtils_setCommonTxChPrms(EnetUdma_OpenTxChPrms *pTxChPrms)
{
    pTxChPrms->numTxPkts           = ENET_SYSCFG_DEFAULT_NUM_TX_PKT;
    pTxChPrms->disableCacheOpsFlag = false;

    pTxChPrms->ringMemAllocFxn = &EnetMem_allocRingMem;
    pTxChPrms->ringMemFreeFxn  = &EnetMem_freeRingMem;

    pTxChPrms->dmaDescAllocFxn = &EnetMem_allocDmaDesc;
    pTxChPrms->dmaDescFreeFxn  = &EnetMem_freeDmaDesc;
}


Udma_DrvHandle EnetApp_getUdmaInstanceHandle(void)
{
    Udma_DrvHandle hUdmaDrv;

    hUdmaDrv = &gUdmaDrvObj[CONFIG_UDMA_PKTDMA_0];
    return hUdmaDrv;
}


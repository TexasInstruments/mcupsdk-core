%%{
    let module = system.modules["/networking/enet_icss/enet_icss"];
    const netifScript = system.getScript("../enet_icssg_lwipif_netif");
%%}
% let instance = module.$instances[0];
% let instances = module.$instances;
%%{

function getMaxMacNum(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getMacPortInfo(instances[i]).numMacPorts;
    }
    return num;
}

function getTotalTxPacketsCount(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getTxPacketsCount(instances[i]);
    }
    return num;
}

function getTotalRxPacketsCount(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getRxPacketsCount(instances[i]);
    }
    return num;
}

function checkMacPortEn(value)
{
    let check = 0;
    for(let i in instances)
    {
        check = (check || (instances[i].dualMacPortSelected == value));
    }
    return check;
}

function checkModeEn(value)
{
    let check = 0;
    for(let i in instances)
    {
        check = (check || (instances[i].mode == value));
    }
    return check;
}

function getTotalRxChCount(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getRxChannelCount(instances[i]);
    }
    return num;
}

function getTotalTxChCount(instances)
{
    let num = 0;
    for(let i in instances)
    {
        num += module.getTxChannelCount(instances[i]);
    }
    return num;
}

%%}
/* ========================================================================== */
/*                           Macros & Typedefs                                */
/* ========================================================================== */

/* ENET Pheriphel instance indexes. Name of ENET PHERIPHERAL can be changed in example syscfg */
/* Application should use the defines below when opening a ENET Driver */
% for (var i = 0; i < instances.length; i++) {
#define `instances[i].$name.toUpperCase()`       (`i`U)
% }
#define ENET_SYSCFG_MAX_ENET_INSTANCES           (`instances.length`U)

#define ENET_SYSCFG_ICSSG0_ENABLED               (`Number((instance.instance === "ICSSG0"))`U)
#define ENET_SYSCFG_ICSSG1_ENABLED               (`Number((instance.instance === "ICSSG1"))`U)
#define ENET_SYSCFG_NUM_PERIPHERAL               (`module.$instances.length`U)
#define ENET_SYSCFG_TOTAL_NUM_TX_PKT             (`getTotalTxPacketsCount(instances)`U)
#define ENET_SYSCFG_TOTAL_NUM_RX_PKT             (`getTotalRxPacketsCount(instances)`U)
#define ENET_SYSCFG_PKT_POOL_ENABLE              (`Number(instance.PktPoolEnable)`U)
#define ENET_SYSCFG_PKT_INFO_ONLY_ENABLE         (`Number(instance.PktInfoOnlyEnable)`U)
%for(let i in instances) {
%if (module.isIcssgIfEnabled(instances[i], "DUAL MAC", "ICSSG1", "ENET_MAC_PORT_1")) {
#define ENET_SYSCFG_MAC_PORT_1_QOS_LEVEL         (`instances[i].QoS`U)
%}
%if (module.isIcssgIfEnabled(instances[i], "DUAL MAC", "ICSSG1", "ENET_MAC_PORT_2")) {
#define ENET_SYSCFG_MAC_PORT_2_QOS_LEVEL         (`instances[i].QoS`U)
%}
%}
#define ENET_SYSCFG_SWITCH_QOS_LEVEL             (`instance.QoS`U)
#define ENET_SYSCFG_PREMPTION_ENABLE             (`Number(instance.PremptionEnable)`U)
#define ENET_SYSCFG_ENABLE_GIGABIT               (`Number(instance.GigabitSupportEnable)`U)
#define ENET_SYSCFG_DUAL_MAC                     (`Number(instance.mode == "DUAL MAC")`U)
#define ENET_SYSCFG_DUALMAC_PORT1_ENABLED        (`Number(checkMacPortEn('ENET_MAC_PORT_1') && checkModeEn('DUAL MAC'))`U)
#define ENET_SYSCFG_DUALMAC_PORT2_ENABLED        (`Number(checkMacPortEn('ENET_MAC_PORT_2') && checkModeEn('DUAL MAC'))`U)
#define ENET_SYSCFG_MAX_MAC_PORTS                (`Number(getMaxMacNum(instances))`U)
#define ENET_SYSCFG_ENABLE_EXTPHY                (`Number((instance.ExternalPhyMgmtEnable == true))`U)
#define ENET_SYSCFG_RX_FLOWS_NUM                 (`Number(getTotalRxChCount(instances))`U)
#define ENET_SYSCFG_RX_CHANNELS_NUM              (1U + `Number(instance.mode == "SWITCH")`U)
#define ENET_SYSCFG_TX_CHANNELS_NUM              (`Number(getTotalTxChCount(instances))`U)
#define ENET_SYSCFG_RING_MON_NUM                 (3U) /*Not appicable for LCDMA devices*/
#define ENET_SYSCFG_ENABLE_MDIO_MANUALMODE       (`Number(instance.mdioMode === "MDIO_MODE_MANUAL")`U)


/*! \brief Number of external mac ports. */
%var count = 0; 
%for(let i in instances) {
%count += Number(module.getMacPortInfo(instances[i]).numMacPorts);
%}
#define ENET_SYSCFG_NUM_EXT_MAC_PORTS       (`count`U)

/*! \brief Number of host buffer pools required for Dual-MAC. */
%for(let i in instances) {
%if (module.isIcssgIfEnabled(instances[i], "DUAL MAC", "ICSSG1", "ENET_MAC_PORT_1")) {
#define ICSSG_DUALMAC_PORT_1_HOST_BUFFER_POOL_NUM_CFG        (ENET_SYSCFG_MAC_PORT_1_QOS_LEVEL)
%}
%if (module.isIcssgIfEnabled(instances[i], "DUAL MAC", "ICSSG1", "ENET_MAC_PORT_2")) {
#define ICSSG_DUALMAC_PORT_2_HOST_BUFFER_POOL_NUM_CFG        (ENET_SYSCFG_MAC_PORT_2_QOS_LEVEL)
%}
%}
#define ICSSG_SWITCH_HOST_BUFFER_POOL_NUM_CFG         ((ENET_SYSCFG_NUM_EXT_MAC_PORTS + 1) * ENET_SYSCFG_SWITCH_QOS_LEVEL)

/* TX DMA Channel indexes. Name of TX DMA channel can be changed in example syscfg */
/* Application should use the define below when opening a Tx DMA channel */
% var idx = 0;
% var count = 0
% for (let inst in instances) {
#define `instances[inst].$name.toUpperCase()`_TX_CH_START    (`idx`U)
% count = 0;
% for (let i = 0; i < module.getTxChannelCount(instances[inst]); i++) {
#define `module.getChannelConfig(instances[inst], "TX", i).$name.toUpperCase()`                  (`idx`U)
% idx++; count++;
% }
#define `instances[inst].$name.toUpperCase()`_TX_CH_COUNT    (`count`U)
% }

/* RX DMA Channel indexes. Name of RX DMA channel can be changed in example syscfg */
/* Application should use the define below when opening a Rx DMA channel */
% var idx = 0;
% for (let inst in instances) {
#define `instances[inst].$name.toUpperCase()`_RX_CH_START    (`idx`U)
% count = 0;
% for(let i = 0; i < module.getRxChannelCount(instances[inst]); i++) {
#define `module.getChannelConfig(instances[inst], "RX", i).$name.toUpperCase()`                  (`idx`U)
% idx++; count++;
% }
#define `instances[inst].$name.toUpperCase()`_RX_CH_COUNT    (`count`U)
% }

/* TX DMA max num packets allocated to the DMA channel */
/* Application should use the define below when opening a Tx DMA channel */
% for (let inst in instances) {
% for(let i = 0; i < module.getTxChannelCount(instances[inst]); i++) {
#define `module.getChannelConfig(instances[inst], "TX", i).$name.toUpperCase()`_NUM_PKTS          (`Number(module.getChannelConfig(instances[inst], "TX", i).PacketsCount)`U)
% }
% }

/* RX DMA DMA max num packets allocated to the DMA channel  */
/* Application should use the define below when opening a Rx DMA channel */
% for (let inst in instances) {
% for(let i = 0; i < module.getRxChannelCount(instances[inst]); i++) {
#define `module.getChannelConfig(instances[inst], "RX", i).$name.toUpperCase()`_NUM_PKTS          (`Number(module.getChannelConfig(instances[inst], "RX", i).PacketsCount)`U)
% }
% }


/* NETIF indexes. Name of NETIF can be changed in example syscfg */
/* Application should use the define below when opening a NETIF */
% var idx = 0;
% for (let inst in instances) {
% for (let i = 0; i < module.getNetifCount(instances[inst]); i++) {
#define `module.getNetifConfig(instances[inst], i).$name.toUpperCase()`          (`idx`U)
% idx++;
% }
% }
#define ENET_SYSCFG_NETIF_COUNT                    (`netifScript.getTotalNetIfCount(instances)`U)
#define ENET_SYSCFG_DEFAULT_NETIF_IDX              (`netifScript.getDefaultNetifIndex()`)
/*
 * Packet sizes for different pools. LARGE_POOL is largest packet size pool with MEDIUM_POOL
 * second largest and SMALL_POOL smallest
 */
#define ENET_MEM_LARGE_POOL_PKT_SIZE        ENET_UTILS_ALIGN(`Number(instance.LargePoolPktSize)`U, ENET_UTILS_CACHELINE_SIZE)
#define ENET_MEM_MEDIUM_POOL_PKT_SIZE       ENET_UTILS_ALIGN(`Number(instance.MediumPoolPktSize)`U, ENET_UTILS_CACHELINE_SIZE)
#define ENET_MEM_SMALL_POOL_PKT_SIZE        ENET_UTILS_ALIGN(`Number(instance.SmallPoolPktSize)`U, ENET_UTILS_CACHELINE_SIZE)

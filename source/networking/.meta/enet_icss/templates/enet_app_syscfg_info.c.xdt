%%{
    let module = system.modules["/networking/enet_icss/enet_icss"];
%%}
% let instance = module.$instances[0];
% let instances = module.$instances;
% let common = system.getScript("/common");
% let device = common.getDeviceName();
/*
 * Enet DMA memory allocation utility functions.
 */

/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <string.h>
#include <stdint.h>
#include <stdarg.h>

#include <enet.h>
#include "enet_appmemutils.h"
#include "enet_appmemutils_cfg.h"
#include "enet_apputils.h"
% if(instance.McmEnable == true){
#include "enet_mcm.h"
% }
#include <enet_cfg.h>
#include <include/core/enet_per.h>
#include <include/core/enet_utils.h>
#include <include/core/enet_dma.h>
#include <include/per/icssg.h>
#include <priv/per/icssg_priv.h>
#include <soc/k3/icssg_soc.h>

#include <kernel/dpl/TaskP.h>
#include <kernel/dpl/ClockP.h>

#include "ti_enet_config.h"
#include "ti_drivers_config.h"
#include "ti_enet_open_close.h"
#include <networking/enet/utils/include/enet_appboardutils.h>
#include <utils/include/enet_appsoc.h>

/* Maximum number of MAC address to be set per CPSW peripheral.
Since CPSW_3G can support upto two MACs, this is set to 2 here */
#define MAC_ADDR_LIST_LEN_SHARED_PER_PER (1U)

#define ENET_MAX_NUM_MAC_ADDR_STORED (5U)

typedef struct EnetApp_MacAddrElem_s
{
    EnetQ_Node node;
    uint8_t macAddr[ENET_MAC_ADDR_LEN];
} EnetApp_MacAddrElem;

typedef struct EnetApp_MacAddrPool_s
{
    bool isInitialized;
    uint32_t macAddrContainerLen;
    EnetApp_MacAddrElem macAddrContainer[ENET_MAX_NUM_MAC_ADDR_STORED];
    EnetQ freeMacAddrQ;
} EnetApp_MacAddrPool;

EnetApp_MacAddrPool gEnetMacAddrPool = { .isInitialized = false };

const Icssg_FwPoolMem* EnetCb_GetFwPoolMem(Enet_Type enetType, uint32_t instId)
{
    uint32_t enetIdx = 0;
    const Icssg_FwPoolMem* fwPoolMem;
    extern const  Icssg_FwPoolMem *Icssq_FwPoolMemInfo[2][4];

    switch (enetType)
    {
        case ENET_ICSSG_DUALMAC:
            enetIdx = 0;
            break;

        case ENET_ICSSG_SWITCH:
            enetIdx = 1;
            break;

        default:
            EnetAppUtils_assert(false);
    }
    EnetAppUtils_assert(enetIdx < ENET_ARRAYSIZE(Icssq_FwPoolMemInfo));
    EnetAppUtils_assert(instId < ENET_ARRAYSIZE(Icssq_FwPoolMemInfo[0]));
    fwPoolMem = Icssq_FwPoolMemInfo[enetIdx][instId];
    EnetAppUtils_assert(fwPoolMem != NULL);
    return (fwPoolMem);
}

void EnetApp_getEnetInstInfo(uint32_t enetInstanceId, Enet_Type *enetType, uint32_t *instId)
{
    uint32_t idx = 0;
    const uint32_t instInfoTable[ENET_SYSCFG_MAX_ENET_INSTANCES][3] = `module.getInstIdTable(instances)`; 

    EnetAppUtils_assert(enetInstanceId < ENET_SYSCFG_MAX_ENET_INSTANCES);
    for (idx = 0; idx < ENET_SYSCFG_MAX_ENET_INSTANCES; idx++)
    {
        if (instInfoTable[idx][0] ==  enetInstanceId)
        {
            *enetType = (Enet_Type)instInfoTable[idx][1];
            *instId   = instInfoTable[idx][2];
            break;
        }
    }

    /* assert if enetInstanceId is not found in the table. Wrong enetInstanceId parameter */
    EnetAppUtils_assert(idx < ENET_SYSCFG_MAX_ENET_INSTANCES);
}

void EnetApp_getEnetInstMacInfo(Enet_Type enetType,
                             uint32_t instId,
                             Enet_MacPort macPortList[],
                             uint8_t *numMacPorts)
{

    *numMacPorts = 0;
%for (var inst in instances) {
%let macPortInfo = module.getMacPortInfo(instances[inst]);
% if (instances[inst].mode == "DUAL MAC") {
    if ((instId &0x01) ==  `(macPortInfo.macPortList[0])`)
    {
%}
        *numMacPorts += `(macPortInfo.numMacPorts)`;
%for (var i in macPortInfo.macPortList) {
        macPortList[`i`] = `(macPortInfo.macPortList[i])`;
%}
% if (instances[inst].mode == "DUAL MAC") {
    }
%}
%}
}

% if(instance.McmEnable == true){
void EnetApp_acquireHandleInfo(Enet_Type enetType, uint32_t instId,
                                   EnetApp_HandleInfo *handleInfo)
{
    EnetMcm_CmdIf hMcmCmdIf;
    EnetMcm_getCmdIf(enetType, &hMcmCmdIf);

    EnetAppUtils_assert(hMcmCmdIf.hMboxCmd != NULL);
    EnetAppUtils_assert(hMcmCmdIf.hMboxResponse != NULL);
    EnetMcm_acquireHandleInfo(&hMcmCmdIf, handleInfo);

}

void EnetApp_coreAttach(Enet_Type enetType, uint32_t instId,
                            uint32_t coreId,
                            EnetPer_AttachCoreOutArgs *attachInfo)
{
    EnetMcm_CmdIf hMcmCmdIf;
    EnetMcm_getCmdIf(enetType, &hMcmCmdIf);

    EnetAppUtils_assert(hMcmCmdIf.hMboxCmd != NULL);
    EnetAppUtils_assert(hMcmCmdIf.hMboxResponse != NULL);
    EnetMcm_coreAttach(&hMcmCmdIf, coreId, attachInfo);
}

void EnetApp_coreDetach(Enet_Type enetType, uint32_t instId,
                            uint32_t coreId,
                            uint32_t coreKey)
{
    EnetMcm_CmdIf hMcmCmdIf;
    EnetMcm_getCmdIf(enetType, &hMcmCmdIf);

    EnetAppUtils_assert(hMcmCmdIf.hMboxCmd != NULL);
    EnetAppUtils_assert(hMcmCmdIf.hMboxResponse != NULL);
    EnetMcm_coreDetach(&hMcmCmdIf, coreId, coreKey);
}

void EnetApp_releaseHandleInfo(Enet_Type enetType, uint32_t instId)
{
    EnetMcm_CmdIf hMcmCmdIf;
    EnetMcm_getCmdIf(enetType, &hMcmCmdIf);

    EnetAppUtils_assert(hMcmCmdIf.hMboxCmd != NULL);
    EnetAppUtils_assert(hMcmCmdIf.hMboxResponse != NULL);
    EnetMcm_releaseHandleInfo(&hMcmCmdIf);
}
% }
% else {
void EnetApp_acquireHandleInfo(Enet_Type enetType, uint32_t instId,
                                   EnetApp_HandleInfo *handleInfo)
{
    handleInfo->hEnet = Enet_getHandle(enetType, instId);
    handleInfo->hUdmaDrv = &gUdmaDrvObj[CONFIG_UDMA_PKTDMA_0];
}

void EnetApp_coreAttach(Enet_Type enetType, uint32_t instId,
                            uint32_t coreId,
                            EnetPer_AttachCoreOutArgs *attachInfo)
{
    Enet_IoctlPrms prms;
    int32_t status;
    Enet_Handle hEnet = Enet_getHandle(enetType, instId);

    if (NULL_PTR != attachInfo)
    {
        ENET_IOCTL_SET_INOUT_ARGS(&prms, &coreId, attachInfo);
        ENET_IOCTL(hEnet,
                   coreId,
                   ENET_PER_IOCTL_ATTACH_CORE,
                   &prms,
                   status);
        if (status != ENET_SOK)
        {
            EnetAppUtils_print("EnetApp_coreAttach failed ENET_PER_IOCTL_ATTACH_CORE: %d\r\n", status);
            EnetAppUtils_assert(false);
        }
    }
    else
    {
        EnetAppUtils_assert(false);
    }
}

void EnetApp_coreDetach(Enet_Type enetType, uint32_t instId,
                            uint32_t coreId,
                            uint32_t coreKey)
{
    Enet_IoctlPrms prms;
    int32_t status;
    Enet_Handle hEnet = Enet_getHandle(enetType, instId);

    ENET_IOCTL_SET_IN_ARGS(&prms, &coreKey);
    ENET_IOCTL(hEnet,
               coreId,
               ENET_PER_IOCTL_DETACH_CORE,
               &prms,
               status);
    if (status != ENET_SOK)
    {
        EnetAppUtils_print("close() failed ENET_PER_IOCTL_DETACH_CORE: %d\r\n", status);
        EnetAppUtils_assert(false);
    }
}

void EnetApp_releaseHandleInfo(Enet_Type enetType, uint32_t instId)
{
    EnetApp_driverClose(enetType, instId);
}
% }

%if(instance.ExternalPhyMgmtEnable == false){
bool EnetApp_isPortLinked(Enet_Handle hEnet)
{
    Enet_Type enetType;
    uint32_t instId;
    uint32_t linkUpMask = 0U;
    bool linkUp;
    Enet_IoctlPrms prms;
    Enet_MacPort macPortList[ENET_MAC_PORT_NUM];
    uint8_t numMacPorts;
    int32_t status;
    uint32_t i;
    uint32_t coreId = EnetSoc_getCoreId();

    status = Enet_getHandleInfo(hEnet, &enetType, &instId);
    EnetAppUtils_assert(status == ENET_SOK);
    EnetApp_getEnetInstMacInfo(enetType, instId, macPortList, &numMacPorts);
    for (i = 0; i < numMacPorts; i++)
    {
        linkUp = false;
        ENET_IOCTL_SET_INOUT_ARGS(&prms, &macPortList[i], &linkUp);

        ENET_IOCTL(hEnet, coreId, ENET_PER_IOCTL_IS_PORT_LINK_UP, &prms, status);
        if (status != ENET_SOK)
        {
            EnetAppUtils_print("Failed to get port %u link status: %d\r\n",
                               ENET_MACPORT_ID(macPortList[i]), status);
        }
        linkUpMask |= (linkUp << i);
    }
    
    linkUp =  (linkUpMask != 0) ? true : false;
    return linkUp;
}
%}

static int32_t EnetAppSoc_fillMacAddrList(uint8_t macAddr[][ENET_MAC_ADDR_LEN],
                                  uint32_t maxMacEntries,
                                  uint32_t *pAvailMacEntries)
{
    uint32_t numEfusedMacAddrs;
    uint32_t numBoardMacAddrs;
    int32_t status = ENET_SOK;

    if (maxMacEntries >= 1)
    {
        numEfusedMacAddrs = maxMacEntries;
        numBoardMacAddrs = 0;
        EnetSoc_getEFusedMacAddrs(&macAddr[0], &numEfusedMacAddrs);

        if (maxMacEntries > numEfusedMacAddrs)
        {
            EnetBoard_getMacAddrList(&macAddr[numEfusedMacAddrs], (maxMacEntries - numEfusedMacAddrs),&numBoardMacAddrs);
        }
        EnetAppUtils_assert(pAvailMacEntries != NULL);
        *pAvailMacEntries = numEfusedMacAddrs + numBoardMacAddrs;
    }
    else
    {
        status = ENET_EINVALIDPARAMS;
    }

    return status;
}

static void EnetApp_initializeMacAddrPool()
{
    uint8_t macAddrList[ENET_MAX_NUM_MAC_ADDR_STORED][ENET_MAC_ADDR_LEN];
    const uint32_t maxMacEntries = ENET_MAX_NUM_MAC_ADDR_STORED;
    uint32_t filledMacEntries = 0;

    if (!gEnetMacAddrPool.isInitialized)
    {
        EnetQueue_initQ(&gEnetMacAddrPool.freeMacAddrQ);

        EnetAppSoc_fillMacAddrList(macAddrList, maxMacEntries, &filledMacEntries);
        gEnetMacAddrPool.macAddrContainerLen =  filledMacEntries;

        for (uint32_t entryIdx = 0; entryIdx < gEnetMacAddrPool.macAddrContainerLen; entryIdx++)
        {
            EnetApp_MacAddrElem* pElem = &gEnetMacAddrPool.macAddrContainer[entryIdx];
            memcpy(pElem->macAddr, &macAddrList[entryIdx][0], ENET_MAC_ADDR_LEN);
            EnetQueue_enq(&gEnetMacAddrPool.freeMacAddrQ, &pElem->node);
        }
        gEnetMacAddrPool.isInitialized = true;
    }
}

static int32_t EnetApp_getMacAddrFromPool(uint8_t macAddr[ENET_MAC_ADDR_LEN])
{
    int32_t status = ENET_EALLOC;
    EnetApp_MacAddrElem* pElem = (EnetApp_MacAddrElem*)EnetQueue_deq(&gEnetMacAddrPool.freeMacAddrQ);
    if (pElem != NULL)
    {
        memcpy(macAddr, pElem->macAddr, ENET_MAC_ADDR_LEN);
        status = ENET_SOK;
    }
    return status;
}

static int32_t EnetApp_releaseMacAddrToPool(uint8_t macAddr[ENET_MAC_ADDR_LEN])
{
    int32_t status = ENET_EALLOC;
    
    for (uint32_t entryIdx = 0; entryIdx < gEnetMacAddrPool.macAddrContainerLen; entryIdx++)
    {
        EnetApp_MacAddrElem* pElem = &gEnetMacAddrPool.macAddrContainer[entryIdx];
        if (0 == memcmp(pElem->macAddr, &macAddr[0], ENET_MAC_ADDR_LEN))
        {
            EnetQueue_enq(&gEnetMacAddrPool.freeMacAddrQ, &pElem->node);
            status = ENET_SOK;
            break;
        }
    }
    return status;
}

int32_t EnetAppSoc_getMacAddrList(Enet_Type enetType,
                                  uint8_t macAddr[][ENET_MAC_ADDR_LEN],
                                  uint32_t maxMacEntries,
                                  uint32_t *pAvailMacEntries)
{
    const uint32_t sharedListLen = MAC_ADDR_LIST_LEN_SHARED_PER_PER;

    EnetApp_initializeMacAddrPool();
    *pAvailMacEntries = 0;
    for (uint32_t idx = 0; idx < sharedListLen; idx++)
    {
        if (EnetApp_getMacAddrFromPool(macAddr[idx]) == ENET_SOK)
        {
            (*pAvailMacEntries)++;
        }
        else
        {
            break;
        }
    }

    return ((*pAvailMacEntries) == 0) ? ENET_EINVALIDPARAMS : ENET_SOK;
}

int32_t EnetAppSoc_releaseMacAddrList(uint8_t macAddr[][ENET_MAC_ADDR_LEN],
                                        uint32_t maxMacEntries)
{
    int32_t status = ENET_SOK;
    for (uint32_t idx = 0; idx < maxMacEntries; idx++)
    {
        status = EnetApp_releaseMacAddrToPool(macAddr[idx]);
        if (status != ENET_SOK)
        {
            break;
        }
    }
    return status;
}

%%{
    let module = system.modules["/networking/enet_icss/enet_icss"];
%%}
% let instance = module.$instances[0];
% let instance2 = module.$instances[1]; 


%%{
    let totalNumNetifs = 0;
    for(let i=0; i < module.$instances.length; i++) {
        let instance = module.$instances[i];
        totalNumNetifs+= (module.getNetifCount(instance));
    }
%%}

%if(module.getNetifCount(instance) >= 1)
%{
/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <string.h>
#include <stdint.h>
#include <stdarg.h>

#include <lwip/netif.h>
#include <lwip/tcpip.h>
%if(instance.RtosVariant == "NoRTOS"){
#include "kernel/dpl/EventP.h"
%}

#include "lwip2enet.h"
#include <networking/enet/core/lwipif/inc/lwip2lwipif.h>
#include <networking/enet/core/lwipif/inc/lwipif2enet_AppIf.h>
/* ========================================================================== */
/*                           Macros & Typedefs                                */
/* ========================================================================== */

/* ========================================================================== */
/*                         Structure Declarations                             */
/* ========================================================================== */
typedef enum NetifName_e
{
    NetifName_CPSW_SWITCH = 0,
//    NetifName_CPSW_DUAL_MAC_PORT1,
//    NetifName_CPSW_DUAL_MAC_PORT2,
    NetifName_NUM_NETIFS,
}NetifName_e;

%if(instance.RtosVariant == "NoRTOS"){
typedef enum AppEventId_e
{
    AppEventId_NONE = 0,
    AppEventId_NETIFMNGR_POLL  = (1 << 0),
    AppEventId_NETIFMNGR_RXPKT = (1 << 1),
    AppEventId_NETIFMNGR_TXPKT = (1 << 2),
    AppEventId_ICSSG_PERIODIC_POLL = (1 << 3),
    AppEventId_ANY_EVENT = (AppEventId_NETIFMNGR_POLL |
                            AppEventId_NETIFMNGR_RXPKT |
                            AppEventId_NETIFMNGR_TXPKT |
                            AppEventId_ICSSG_PERIODIC_POLL),
} AppEventId_t;
%}

typedef void* LwipifEnetApp_Handle;

/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */
LwipifEnetApp_Handle LwipifEnetApp_getHandle();
struct netif* LwipifEnetApp_netifOpen(LwipifEnetApp_Handle handle, uint32_t netifIdx, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw);
void LwipifEnetApp_netifClose(LwipifEnetApp_Handle handle, const uint32_t netifIdx);
struct netif * LwipifEnetApp_getNetifFromId(LwipifEnetApp_Handle handle, uint32_t netifIdx);

void LwipifEnetAppCb_getEnetLwipIfInstInfo(Enet_Type enetType, uint32_t instId, LwipifEnetAppIf_GetEnetLwipIfInstInfo *outArgs);

void LwipifEnetApp_getRxChIDs(const Enet_Type enetType, const uint32_t instId, uint32_t* pRxChIdCount, uint32_t rxChIdList[LWIPIF_MAX_RX_CHANNELS_PER_PHERIPHERAL]);
void LwipifEnetApp_getTxChIDs(const Enet_Type enetType, const uint32_t instId, uint32_t* pTxChIdCount, uint32_t txChIdList[LWIPIF_MAX_TX_CHANNELS_PER_PHERIPHERAL]);
void LwipifEnetAppCb_getTxHandleInfo(LwipifEnetAppIf_GetTxHandleInArgs *inArgs,
                                     LwipifEnetAppIf_TxHandleInfo *outArgs);
void LwipifEnetAppCb_getRxHandleInfo(LwipifEnetAppIf_GetRxHandleInArgs *inArgs,
                                     LwipifEnetAppIf_RxHandleInfo *outArgs);
void LwipifEnetAppCb_releaseTxHandle(LwipifEnetAppIf_ReleaseTxHandleInfo *releaseInfo);
void LwipifEnetAppCb_releaseRxHandle(LwipifEnetAppIf_ReleaseRxHandleInfo *releaseInfo);
void LwipifEnetAppCb_pbuf_free_custom(struct pbuf *p);

%}

/*
 *  Functions provided by enet_netif_manager.c to initialize a new netif, create tx & rx tasks, and start a scheduler OS agnostically.
 */
void LwipifEnetApp_startSchedule(LwipifEnetApp_Handle handle, struct netif *netif
%if(instance.RtosVariant == "NoRTOS"){
    ,EventP_Object* p_hEvent
%}
);

struct netif * LwipifEnetApp_getNetifFromName(NetifName_e name);

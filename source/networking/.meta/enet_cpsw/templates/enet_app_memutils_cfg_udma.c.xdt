%%{
    let module = system.modules["/networking/enet_cpsw/enet_cpsw"];
%%}
% let instance = module.$instances[0];
/*
 * Enet DMA memory allocation utility functions.
 */

/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <string.h>
#include <stdint.h>
#include <stdarg.h>

#include <enet.h>
#include "enet_appmemutils.h"
#include "enet_appmemutils_cfg.h"
#include "enet_apputils.h"
#include <enet_cfg.h>
#include <include/core/enet_per.h>
#include <include/core/enet_utils.h>
#include <include/core/enet_dma.h>
#include <include/per/cpsw.h>
#include <priv/per/cpsw_priv.h>
#include <soc/k3/cpsw_soc.h>
#include <src/dma/udma/enet_udma_memcfg.h>

#include "ti_enet_config.h"

#include <drivers/hw_include/cslr_soc.h>
#include <drivers/udma/include/udma_types.h>
#include <drivers/udma/soc/am64x_am243x/udma_soc.h>
#include <networking/enet/hw_include/csl_cpswitch.h>
#include <networking/enet/core/src/dma/udma/enet_udma_priv.h>

#define ENET_MEM_LARGE_POOL_NUM_PKTS        (`Number(instance.LargePoolPktCount)`U)
#define ENET_MEM_MEDIUM_POOL_NUM_PKTS       (`Number(instance.MediumPoolPktCount)`U)
#define ENET_MEM_SMALL_POOL_NUM_PKTS        (`Number(instance.MediumPoolPktCount)`U)
#define ENET_PKTINFOMEM_ONLY_NUM_PKTS        (`Number(instance.PktInfoOnlyCount)`U)


/* ========================================================================== */
/*                         Structure Declarations                             */
/* ========================================================================== */
/* RX flow object memories */
/* Need 1 additional flow for reserved flow */
static EnetUdma_RxFlowObjMem gEnetUdmaRxFlowObjMem[(ENET_SYSCFG_RX_FLOWS_NUM + 1)]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT), section(".bss:ENET_DMA_OBJ_MEM")));

/* Tx channel object memories */
static EnetUdma_TxChObjMem gEnetUdmaTxChObjMem[ENET_SYSCFG_TX_CHANNELS_NUM]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT), section(".bss:ENET_DMA_OBJ_MEM")));

#if (UDMA_SOC_CFG_UDMAP_PRESENT == 1)
/* Ring monitor object memories */
static EnetUdma_RingMonObjMem gEnetUdmaRinMonObjMem[ENET_SYSCFG_RING_MON_NUM]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT), section(".bss:ENET_DMA_OBJ_MEM")));

/* Teardown Cq ring object memories */
static EnetUdma_TdCqRingObjMem gEnetUdmaTdCqRingObjMem[ENET_SYSCFG_TX_CHANNELS_NUM +
                                                       ENET_UDMA_RX_CH_NUM]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT), section(".bss:ENET_DMA_OBJ_MEM")));
#endif

#if defined (ENET_SOC_HOSTPORT_DMA_TYPE_UDMA)
/* Enet UDMA DESC memories */
static EnetMem_DmaDescMemPoolEntry gDmaDescMemArray[((ENET_SYSCFG_TOTAL_NUM_TX_PKT) +  (ENET_SYSCFG_TOTAL_NUM_RX_PKT))]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_DESC_MEMPOOL")));
static EnetMem_DmaDescMem gDmaDescMemInfoArray[((ENET_SYSCFG_TOTAL_NUM_TX_PKT) +  (ENET_SYSCFG_TOTAL_NUM_RX_PKT))]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_DESC_MEMPOOL")));

/* RX & TX RingAcc memories */
static EnetMem_RingMemPoolEntry gRingMemArray[(ENET_MEM_NUM_RINGS_TYPES *
                                    (ENET_SYSCFG_TX_CHANNELS_NUM + ENET_SYSCFG_RX_FLOWS_NUM))]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_RING_MEMPOOL")));

static EnetMem_RingMem gRingMemInfoArray[(ENET_MEM_NUM_RINGS_TYPES *
                                    (ENET_SYSCFG_TX_CHANNELS_NUM + ENET_SYSCFG_RX_FLOWS_NUM))]
__attribute__ ((aligned(UDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_RING_MEMPOOL")));

#endif

% if (instance.PktPoolEnable == true){
% let poolType = "Large";
/* Eth packet info memory Q - `poolType` pool */
static EnetDma_Pkt gAppPktInfoMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

/* Eth packet `poolType` pool memories */
static uint8_t gEthPktMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS][ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_PKT_MEMPOOL")));
static EnetMem_AppPktInfoMem gAppPktInfoContainerMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

% poolType = "Medium";
/* Eth packet info memory Q - `poolType` pool */
static EnetDma_Pkt gAppPktInfoMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

/* Eth packet `poolType` pool memories */
static uint8_t gEthPktMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS][ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_PKT_MEMPOOL")));
static EnetMem_AppPktInfoMem gAppPktInfoContainerMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

% poolType = "Small";
/* Eth packet info memory Q - `poolType` pool */
static EnetDma_Pkt gAppPktInfoMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

/* Eth packet `poolType` pool memories */
static uint8_t gEthPktMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS][ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_PKT_MEMPOOL")));
static EnetMem_AppPktInfoMem gAppPktInfoContainerMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

% }

% if (instance.PktInfoOnlyEnable == true){
 static EnetDma_Pkt gAppPktInfoMemOnly[ENET_PKTINFOMEM_ONLY_NUM_PKTS];
 %}

static const EnetMem_Cfg gEthMemCfg =
{
% if (instance.PktPoolEnable == true){
    .pktBufPool =
    {
% let poolType = "Large";

        [ENET_MEM_POOLIDX_`poolType.toUpperCase()`] =
        {
            .pktSize     = ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE,
            .numPkts     = (ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS),
            .pktInfoMem  = gAppPktInfoMem_`poolType`Pool,
            .pktInfoSize = sizeof(gAppPktInfoMem_`poolType`Pool),
            .pktBufMem   = &gEthPktMem_`poolType`Pool[0][0],
            .pktBufSize  = sizeof(gEthPktMem_`poolType`Pool),
            .pktInfoContainerMem = gAppPktInfoContainerMem_`poolType`Pool,
            .pktInfoContainerSize = sizeof(gAppPktInfoContainerMem_`poolType`Pool),
        },
% poolType = "Medium";

        [ENET_MEM_POOLIDX_`poolType.toUpperCase()`] =
        {
            .pktSize     = ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE,
            .numPkts     = (ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS),
            .pktInfoMem  = gAppPktInfoMem_`poolType`Pool,
            .pktInfoSize = sizeof(gAppPktInfoMem_`poolType`Pool),
            .pktBufMem   = &gEthPktMem_`poolType`Pool[0][0],
            .pktBufSize  = sizeof(gEthPktMem_`poolType`Pool),
            .pktInfoContainerMem = gAppPktInfoContainerMem_`poolType`Pool,
            .pktInfoContainerSize = sizeof(gAppPktInfoContainerMem_`poolType`Pool),
        },
% poolType = "Small";

        [ENET_MEM_POOLIDX_`poolType.toUpperCase()`] =
        {
            .pktSize     = ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE,
            .numPkts     = (ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS),
            .pktInfoMem  = gAppPktInfoMem_`poolType`Pool,
            .pktInfoSize = sizeof(gAppPktInfoMem_`poolType`Pool),
            .pktBufMem   = &gEthPktMem_`poolType`Pool[0][0],
            .pktBufSize  = sizeof(gEthPktMem_`poolType`Pool),
            .pktInfoContainerMem = gAppPktInfoContainerMem_`poolType`Pool,
            .pktInfoContainerSize = sizeof(gAppPktInfoContainerMem_`poolType`Pool),
        },

    },
% } else {
    .pktBufPool =
    {
        [ENET_MEM_POOLIDX_LARGE] =
        {
            .pktSize     = 0,
            .numPkts     = 0,
            .pktInfoMem  = NULL,
            .pktInfoSize = 0,
            .pktBufMem   = NULL,
            .pktBufSize  = 0,
            .pktInfoContainerMem = NULL,
            .pktInfoContainerSize = 0,
        },
        [ENET_MEM_POOLIDX_MEDIUM] =
        {
            .pktSize     = 0,
            .numPkts     = 0,
            .pktInfoMem  = NULL,
            .pktInfoSize = 0,
            .pktBufMem   = NULL,
            .pktBufSize  = 0,
            .pktInfoContainerMem = NULL,
            .pktInfoContainerSize = 0,
        },
        [ENET_MEM_POOLIDX_SMALL] =
        {
            .pktSize     = 0,
            .numPkts     = 0,
            .pktInfoMem  = NULL,
            .pktInfoSize = 0,
            .pktBufMem   = NULL,
            .pktBufSize  = 0,
            .pktInfoContainerMem = NULL,
            .pktInfoContainerSize = 0,
        },
    },
% }
% if (instance.PktInfoOnlyEnable == true){
    .pktInfoMemPool =
    {
        .numPkts     = ENET_PKTINFOMEM_ONLY_NUM_PKTS,
        .pktInfoMem  = gAppPktInfoMemOnly,
        .pktInfoSize = sizeof(gAppPktInfoMemOnly),
    },
% }
#if defined (ENET_SOC_HOSTPORT_DMA_TYPE_UDMA)
    .ringMem =
    {
        .numRings    =  (ENET_MEM_NUM_RINGS_TYPES *
                                    (ENET_SYSCFG_TX_CHANNELS_NUM + ENET_SYSCFG_RX_FLOWS_NUM)),
        .ringMemBase =  gRingMemArray,
        .ringMemSize =  sizeof(gRingMemArray),
        .ringInfoContainerBase = gRingMemInfoArray,
        .ringInfoContainerSize = sizeof(gRingMemInfoArray),
    },
    .dmaDescMem =
    {
        .numDesc     = ((ENET_SYSCFG_TOTAL_NUM_TX_PKT) +  (ENET_SYSCFG_TOTAL_NUM_RX_PKT)),
        .descMemBase = gDmaDescMemArray,
        .descMemSize = sizeof(gDmaDescMemArray),
        .descInfoContainerMemBase = gDmaDescMemInfoArray,
        .descInfoContainerMemSize = sizeof(gDmaDescMemInfoArray),
    },
#endif
};

const EnetMem_Cfg * EnetMem_getCfg(void)
{
    return &gEthMemCfg;
}

static const EnetUdma_MemCfg gEthUdmaCfg =
{
    .rxFlowObjMemCfg =
    {
        /* Need 1 additional flow for reserved flow */
        .numFlows = ENET_ARRAYSIZE(gEnetUdmaRxFlowObjMem),
        .rxFlowObjMemContainerBase = gEnetUdmaRxFlowObjMem,
        .rxFlowObjMemContainerSize = sizeof(gEnetUdmaRxFlowObjMem),
    },
    .txChObjMemCfg =
    {
        .numCh = ENET_ARRAYSIZE(gEnetUdmaTxChObjMem),
        .txChObjContainerBase = gEnetUdmaTxChObjMem,
        .txChObjContainerSize = sizeof(gEnetUdmaTxChObjMem),
    },

#if (UDMA_SOC_CFG_UDMAP_PRESENT == 1)
    .ringMonObjMemCfg =
    {
        .numRings = ENET_ARRAYSIZE(gEnetUdmaRinMonObjMem),
        .ringMonObjMemContainerBase = gEnetUdmaRinMonObjMem,
        .ringMonObjMemContainerSize = sizeof(gEnetUdmaRinMonObjMem),
    },
    .tdCqRingObjMemCfg =
    {
        .numRings = ENET_ARRAYSIZE(gEnetUdmaTdCqRingObjMem),
        .tdCqRingObjMemContainerBase = gEnetUdmaTdCqRingObjMem,
        .tdCqRingObjMemContainerSize = sizeof(gEnetUdmaTdCqRingObjMem),
    },
#endif
};

const EnetUdma_MemCfg * EnetUdmaMem_getCfg(void)
{
    return &gEthUdmaCfg;
}


/* ------------------------------- DMA objects ------------------------------ */



%%{
    let module = system.modules["/networking/enet_cpsw/enet_cpsw"];
%%}
% let instance = module.$instances[0];
/*
 * Enet DMA memory allocation utility functions.
 */

/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <string.h>

#include <enet.h>
#include <include/core/enet_utils.h>

#include <include/core/enet_dma.h>

#include "enet_appmemutils.h"
#include "enet_appmemutils_cfg.h"
#include "enet_apputils.h"

#include "ti_enet_config.h"

#include <drivers/hw_include/cslr_soc.h>
#include <networking/enet/hw_include/csl_cpswitch.h>
#include <networking/enet/core/src/dma/cpdma/enet_cpdma_priv.h>
#include <networking/enet/core/src/dma/cpdma/enet_cdma_memcfg.h>


#define ENET_MEM_LARGE_POOL_NUM_PKTS        (`Number(instance.LargePoolPktCount)`U)
#define ENET_MEM_MEDIUM_POOL_NUM_PKTS       (`Number(instance.MediumPoolPktCount)`U)
#define ENET_MEM_SMALL_POOL_NUM_PKTS        (`Number(instance.MediumPoolPktCount)`U)
#define ENET_PKTINFOMEM_ONLY_NUM_PKTS       (`Number(instance.PktInfoOnlyCount)`U)


/* ========================================================================== */
/*                         Structure Declarations                             */
/* ========================================================================== */
% if (instance.PktPoolEnable == true){
% let poolType = "Large";
/* Eth packet info memory Q - `poolType` pool */
static EnetDma_Pkt gAppPktInfoMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

/* Eth packet `poolType` pool memories */
static uint8_t gEthPktMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS][ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_PKT_MEMPOOL")));
static EnetMem_AppPktInfoMem gAppPktInfoContainerMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

% poolType = "Medium";
/* Eth packet info memory Q - `poolType` pool */
static EnetDma_Pkt gAppPktInfoMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

/* Eth packet `poolType` pool memories */
static uint8_t gEthPktMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS][ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_PKT_MEMPOOL")));
static EnetMem_AppPktInfoMem gAppPktInfoContainerMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

% poolType = "Small";
/* Eth packet info memory Q - `poolType` pool */
static EnetDma_Pkt gAppPktInfoMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

/* Eth packet `poolType` pool memories */
static uint8_t gEthPktMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS][ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_DMA_PKT_MEMPOOL")));
static EnetMem_AppPktInfoMem gAppPktInfoContainerMem_`poolType`Pool[ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS];

% }

% if (instance.PktInfoOnlyEnable == true){
 static EnetDma_Pkt gAppPktInfoMemOnly[ENET_PKTINFOMEM_ONLY_NUM_PKTS];
 %}

static const EnetMem_Cfg gEthMemCfg =
{
% if (instance.PktPoolEnable == true){
    .pktBufPool =
    {
% let poolType = "Large";

        [ENET_MEM_POOLIDX_`poolType.toUpperCase()`] =
        {
            .pktSize     = ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE,
            .numPkts     = (ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS),
            .pktInfoMem  = gAppPktInfoMem_`poolType`Pool,
            .pktInfoSize = sizeof(gAppPktInfoMem_`poolType`Pool),
            .pktBufMem   = &gEthPktMem_`poolType`Pool[0][0],
            .pktBufSize  = sizeof(gEthPktMem_`poolType`Pool),
            .pktInfoContainerMem = gAppPktInfoContainerMem_`poolType`Pool,
            .pktInfoContainerSize = sizeof(gAppPktInfoContainerMem_`poolType`Pool),
        },
% poolType = "Medium";

        [ENET_MEM_POOLIDX_`poolType.toUpperCase()`] =
        {
            .pktSize     = ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE,
            .numPkts     = (ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS),
            .pktInfoMem  = gAppPktInfoMem_`poolType`Pool,
            .pktInfoSize = sizeof(gAppPktInfoMem_`poolType`Pool),
            .pktBufMem   = &gEthPktMem_`poolType`Pool[0][0],
            .pktBufSize  = sizeof(gEthPktMem_`poolType`Pool),
            .pktInfoContainerMem = gAppPktInfoContainerMem_`poolType`Pool,
            .pktInfoContainerSize = sizeof(gAppPktInfoContainerMem_`poolType`Pool),
        },
% poolType = "Small";

        [ENET_MEM_POOLIDX_`poolType.toUpperCase()`] =
        {
            .pktSize     = ENET_MEM_`poolType.toUpperCase()`_POOL_PKT_SIZE,
            .numPkts     = (ENET_MEM_`poolType.toUpperCase()`_POOL_NUM_PKTS),
            .pktInfoMem  = gAppPktInfoMem_`poolType`Pool,
            .pktInfoSize = sizeof(gAppPktInfoMem_`poolType`Pool),
            .pktBufMem   = &gEthPktMem_`poolType`Pool[0][0],
            .pktBufSize  = sizeof(gEthPktMem_`poolType`Pool),
            .pktInfoContainerMem = gAppPktInfoContainerMem_`poolType`Pool,
            .pktInfoContainerSize = sizeof(gAppPktInfoContainerMem_`poolType`Pool),
        },

    },
% } else {
    .pktBufPool =
    {
        [ENET_MEM_POOLIDX_LARGE] =
        {
            .pktSize     = 0,
            .numPkts     = 0,
            .pktInfoMem  = NULL,
            .pktInfoSize = 0,
            .pktBufMem   = NULL,
            .pktBufSize  = 0,
            .pktInfoContainerMem = NULL,
            .pktInfoContainerSize = 0,
        },
        [ENET_MEM_POOLIDX_MEDIUM] =
        {
            .pktSize     = 0,
            .numPkts     = 0,
            .pktInfoMem  = NULL,
            .pktInfoSize = 0,
            .pktBufMem   = NULL,
            .pktBufSize  = 0,
            .pktInfoContainerMem = NULL,
            .pktInfoContainerSize = 0,
        },
        [ENET_MEM_POOLIDX_SMALL] =
        {
            .pktSize     = 0,
            .numPkts     = 0,
            .pktInfoMem  = NULL,
            .pktInfoSize = 0,
            .pktBufMem   = NULL,
            .pktBufSize  = 0,
            .pktInfoContainerMem = NULL,
            .pktInfoContainerSize = 0,
        },
    },
% }
% if (instance.PktInfoOnlyEnable == true){
    .pktInfoMemPool =
    {
        .numPkts     = ENET_PKTINFOMEM_ONLY_NUM_PKTS,
        .pktInfoMem  = gAppPktInfoMemOnly,
        .pktInfoSize = sizeof(gAppPktInfoMemOnly),
    },
% }
};

const EnetMem_Cfg * EnetMem_getCfg(void)
{
    return &gEthMemCfg;
}

/* TODO: can be passed as configuration parameters  */
/* Reserved Memory for CPPI descriptors */
#define CPSW_CPPI_DESC_NUM_DESC                      (`module.getNumCpdmaDesc(instance)`)

static  EnetCpdma_cppiDesc gCpswDescMem[CPSW_CPPI_DESC_NUM_DESC]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT),
                section(".bss:ENET_CPPI_DESC")));

void EnetSoc_getCppiDescInfo(Enet_Type enetType,
                             uint32_t instId,
                             uintptr_t *descStartAddr,
                             uint32_t *size)
{
    *descStartAddr = (uintptr_t)gCpswDescMem;
    *size = sizeof(gCpswDescMem);
}

/* RX flow object memories */
static EnetCpdma_RxChObjMem gCpswDmaRxChObjMem[ENET_SYSCFG_RX_FLOWS_NUM]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT), section(".bss:ENET_CPDMA_OBJ_MEM")));

/* Tx channel object memories */
static EnetCpdma_TxChObjMem gCpswDmaTxChObjMem[ENET_SYSCFG_TX_CHANNELS_NUM]
__attribute__ ((aligned(ENETDMA_CACHELINE_ALIGNMENT), section(".bss:ENET_CPDMA_OBJ_MEM")));

static const EnetCpdma_MemCfg gEthCpdmaCfg =
{
    .rxChObjMemCfg =
    {
        .numRxCh = ENET_ARRAYSIZE(gCpswDmaRxChObjMem),
        .rxChObjMemContainerBase = gCpswDmaRxChObjMem,
        .rxChObjMemContainerSize = sizeof(gCpswDmaRxChObjMem),
    },
    .txChObjMemCfg =
    {
        .numTxCh = ENET_ARRAYSIZE(gCpswDmaTxChObjMem),
        .txChObjMemContainerBase = gCpswDmaTxChObjMem,
        .txChObjMemContainerSize = sizeof(gCpswDmaTxChObjMem),
    },
};

const EnetCpdma_MemCfg * EnetCpdmaMem_getCfg(void)
{
    return &gEthCpdmaCfg;
}

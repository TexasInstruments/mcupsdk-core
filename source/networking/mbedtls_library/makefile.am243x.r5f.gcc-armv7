#
# Auto generated makefile
#

export MCU_PLUS_SDK_PATH?=$(abspath ../../..)
include $(MCU_PLUS_SDK_PATH)/imports.mak

CG_TOOL_ROOT=$(CGT_GCC_ARMV7_PATH)

CC=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc
AR=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc-ar

PROFILE?=release
ConfigName:=$(PROFILE)

LIBNAME:=mbedtls.am243x.r5f.gcc-armv7.$(PROFILE).lib

FILES_common := \
    aesni.c \
    aes.c  \
    arc4.c \
    aria.c  \
    asn1parse.c \
    asn1write.c \
    base64.c \
    bignum.c \
    blowfish.c \
    camellia.c \
    ccm.c \
    certs.c \
    chacha20.c \
    chachapoly.c \
    cipher.c \
    cipher_wrap.c \
    cmac.c \
    ctr_drbg.c \
    debug.c \
    des.c \
    dhm.c \
    ecdh.c \
    ecdsa.c \
    ecjpake.c \
    ecp.c \
    ecp_curves.c \
    entropy.c \
    entropy_poll.c \
    error.c \
    gcm.c \
    havege.c \
    hkdf.c \
    hmac_drbg.c \
    md.c \
    md2.c \
    md4.c \
    md5.c \
    md_wrap.c \
    memory_buffer_alloc.c \
    net_sockets.c \
    nist_kw.c \
    oid.c \
    padlock.c \
    pem.c \
    pk.c \
    pkcs11.c \
    pkcs12.c \
    pkcs5.c \
    pkparse.c \
    pkwrite.c \
    pk_wrap.c \
    platform.c \
    platform_util.c \
    poly1305.c \
    ripemd160.c \
    rsa.c \
    rsa_internal.c \
    sha1.c \
    sha256.c \
    sha512.c \
    ssl_cache.c \
    ssl_ciphersuites.c \
    ssl_cli.c \
    ssl_cookie.c \
    ssl_srv.c \
    ssl_ticket.c \
    ssl_tls.c \
    threading.c \
    timing.c \
    timing_alt.c \
    version.c \
    version_features.c \
    x509.c \
    x509write_crt.c \
    x509write_csr.c \
    x509_create.c \
    x509_crl.c \
    x509_crt.c \
    x509_csr.c \
    xtea.c \

FILES_PATH_common = \
    ${MCU_PLUS_SDK_PATH}/source/networking/mbedtls_library/mbedtls/library \
    ${MCU_PLUS_SDK_PATH}/source/networking/mbedtls_library/mbedtls_ti \
    ${MCU_PLUS_SDK_PATH}/source/kernel/dpl \

INCLUDES_common := \
    -I${CG_TOOL_ROOT}/arm-none-eabi/include \
    -I${MCU_PLUS_SDK_PATH}/source \
    -I${MCU_PLUS_SDK_PATH}/source/networking/mbedtls_library/mbedtls/include \
    -I${MCU_PLUS_SDK_PATH}/source/networking/mbedtls_library/mbedtls_ti \
    -I${MCU_PLUS_SDK_PATH}/source/kernel/dpl \

DEFINES_common := \
    -DSOC_AM243X \
    -DMBEDTLS_CONFIG_FILE=\"alt_config.h\" \

CFLAGS_common := \
    -mcpu=cortex-r5 \
    -mfloat-abi=hard \
    -mfpu=vfpv3-d16 \
    -Wall \
    -Werror \
    -mthumb-interwork \
    -g \
    -Wno-unused-function \
    -Wno-enum-compare \
    -Wno-uninitialized \
    -Wno-address-of-packed-member \
    -Wno-int-to-pointer-cast \
    -Wno-stringop-truncation \
    -fgnu89-inline \
    -Wno-pointer-to-int-cast \
    -Wno-unused-variable \
    -Wno-unused-but-set-variable \
    -fdata-sections \
    -ffunction-sections \

CFLAGS_debug := \
    -D_DEBUG_=1 \

CFLAGS_release := \
    -O2 \

ARFLAGS_common := \
    cr \

FILES := $(FILES_common) $(FILES_$(PROFILE))
ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ifeq ($(CPLUSPLUS_BUILD), yes)
CFLAGS += $(CFLAGS_cpp_common)
endif
DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))

LIBDIR := lib
OBJDIR := obj/am243x/gcc-armv7/$(PROFILE)/r5f/mbedtls/
OBJS := $(FILES:%.c=%.obj)
OBJS += $(ASMFILES:%.S=%.obj)
DEPS := $(FILES:%.c=%.d)

vpath %.obj $(OBJDIR)
vpath %.c $(FILES_PATH)
vpath %.S $(FILES_PATH)

$(OBJDIR)/%.obj %.obj: %.c
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -MT $@ -o $(OBJDIR)/$@ $<

$(OBJDIR)/%.obj %.obj: %.S
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c -x assembler-with-cpp $(CFLAGS) $(INCLUDES) $(DEFINES) -o $(OBJDIR)$@ $<

all: $(LIBDIR)/$(LIBNAME)

$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
	@echo  .
	@echo  Archiving: $(LIBNAME) to $@ ...
	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
	@echo  Archiving: $(LIBNAME) Done !!!
	@echo  .

clean:
	@echo  Cleaning: $(LIBNAME) ...
	$(RMDIR) $(OBJDIR)
	$(RM) $(LIBDIR)/$(LIBNAME)

scrub:
	@echo  Scrubing: $(LIBNAME) ...
	-$(RMDIR) obj/
	-$(RMDIR) lib/

$(OBJS): | $(OBJDIR)

$(LIBDIR) $(OBJDIR):
	$(MKDIR) $@

-include $(addprefix $(OBJDIR)/, $(DEPS))

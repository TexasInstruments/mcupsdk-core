#
# Auto generated makefile
#

export MCU_PLUS_SDK_PATH?=$(abspath ../../..)
include $(MCU_PLUS_SDK_PATH)/imports.mak

CG_TOOL_ROOT=$(CGT_GCC_ARMV7_PATH)

CC=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc
AR=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc-ar

PROFILE?=release
ConfigName:=$(PROFILE)

LIBNAME:=nortos.am64x.r5f.gcc-armv7.$(PROFILE).lib

FILES_common := \
    boot_armv7r.c \
    DebugP_shmLogWriter.c \
    DebugP_uartLogWriter.c \
    DebugP_uartScanf.c \
    DebugP_memTraceLogWriter.c \
    DebugP_log.c \
    DebugP_nortos.c \
    SemaphoreP_nortos.c \
    ClockP_nortos.c \
    ClockP_nortos_r5.c \
    EventP_nortos.c \
    HeapP_nortos.c \
    TimerP.c \
    TaskP_nortos.c \
    HwiP_armv7r_vim.c \
    HwiP_armv7r_handlers_nortos.c \
    MpuP_armv7r.c \
    CacheP_armv7r.c \
    CpuId_armv7r.c \
    HeapP_internal.c \
    printf.c \
    AddrTranslateP.c \
    PmuP_armv7r.c \
    QueueP_nortos.c \

ASMFILES_common := \
    HwiP_armv7r_handlers_nortos_asm.S \
    HwiP_armv7r_vectors_nortos_asm.S \
    HwiP_armv7r_vectors_nortos_sbl_asm.S \
    boot_armv7r_asm.S \
    HwiP_armv7r_asm.S \
    MpuP_armv7r_asm.S \
    CacheP_armv7r_asm.S \
    CpuId_armv7r_asm.S \
    PmuP_armv7r_asm.S \

FILES_PATH_common = \
    dpl/r5 \
    dpl/common \

INCLUDES_common := \
    -I${MCU_PLUS_SDK_PATH}/source \

DEFINES_common := \
    -DSOC_AM64X \
    -DOS_NORTOS \

CFLAGS_common := \
    -mcpu=cortex-r5 \
    -mfloat-abi=hard \
    -mfpu=vfpv3-d16 \
    -marm \
    -Wall \
    -Werror \
    -g \
    -Wno-gnu-variable-sized-type-not-at-end \
    -Wno-unused-function \
    -Wno-int-to-pointer-cast \
    -Wno-pointer-to-int-cast \
    -Wno-unused-but-set-variable \
    -fdata-sections \
    -ffunction-sections \
    -Wno-extra \

CFLAGS_debug := \
    -D_DEBUG_=1 \

CFLAGS_release := \
    -O2 \

ARFLAGS_common := \
    cr \

FILES := $(FILES_common) $(FILES_$(PROFILE))
ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ifeq ($(CPLUSPLUS_BUILD), yes)
CFLAGS += $(CFLAGS_cpp_common)
endif
DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))

LIBDIR := lib
OBJDIR := obj/am64x/gcc-armv7/$(PROFILE)/r5f/nortos/
OBJS := $(FILES:%.c=%.obj)
OBJS += $(ASMFILES:%.S=%.obj)
DEPS := $(FILES:%.c=%.d)

vpath %.obj $(OBJDIR)
vpath %.c $(FILES_PATH)
vpath %.S $(FILES_PATH)

$(OBJDIR)/%.obj %.obj: %.c
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -MT $@ -o $(OBJDIR)/$@ $<

$(OBJDIR)/%.obj %.obj: %.S
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c -x assembler-with-cpp $(CFLAGS) $(INCLUDES) $(DEFINES) -o $(OBJDIR)$@ $<

all: $(LIBDIR)/$(LIBNAME)

$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
	@echo  .
	@echo  Archiving: $(LIBNAME) to $@ ...
	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
	@echo  Archiving: $(LIBNAME) Done !!!
	@echo  .

clean:
	@echo  Cleaning: $(LIBNAME) ...
	$(RMDIR) $(OBJDIR)
	$(RM) $(LIBDIR)/$(LIBNAME)

scrub:
	@echo  Scrubing: $(LIBNAME) ...
	-$(RMDIR) obj/
	-$(RMDIR) lib/

$(OBJS): | $(OBJDIR)

$(LIBDIR) $(OBJDIR):
	$(MKDIR) $@

-include $(addprefix $(OBJDIR)/, $(DEPS))

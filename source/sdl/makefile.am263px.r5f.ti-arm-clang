
export MCU_PLUS_SDK_PATH?=$(abspath ../..)
include $(MCU_PLUS_SDK_PATH)/imports.mak

CG_TOOL_ROOT=$(CGT_TI_ARM_CLANG_PATH)

CC=$(CGT_TI_ARM_CLANG_PATH)/bin/tiarmclang
AR=$(CGT_TI_ARM_CLANG_PATH)/bin/tiarmar

PROFILE?=release
ConfigName:=$(PROFILE)

LIBNAME:=sdl.am263px.r5f.ti-arm-clang.$(PROFILE).lib

FILES_common := \
    sdl_dpl.c \
    sdl_ip_esm.c \
    sdl_esm.c \
    sdl_esm_core.c \
    sdl_esm_priv.c \
    sdl_dcc.c \
    sdl_mcrc.c \
    sdl_ip_mcrc.c \
    sdl_mcrc_soc.c \
    sdl_rti.c \
    sdl_ip_rti.c \
    sdl_soc_rti.c \
    sdl_ecc.c \
    sdl_ip_ecc.c \
    sdl_ecc_r5.c \
    sdl_interrupt.c \
    sdl_interrupt_handlers.c \
    sdl_interrupt_register.c \
    sdl_exception.c \
    sdl_ip_pbist.c \
    sdl_pbist_soc.c \
    sdl_pbist.c \
    sdl_ecc_bus_safety.c \
    sdl_ccm.c \
    sdl_mcu_armss_ccmr5.c \
    sdl_stc_soc.c \
    sdl_tmu_rom_checksum.c \
    sdl_r5f_utils.c \
    sdl_ip_tog.c \
    sdl_tog.c \
    sdl_soc_tog.c \
    sdl_ip_vtm.c \
    sdl_vtm_pvt_sensor.c \
    sdl_vtm.c \
    sdl_soc_vtm.c \

ASMFILES_common := \
    sdl_ecc_utils.S \
    sdl_r5_utils.S \

FILES_PATH_common = \
    dpl \
    esm \
    esm/v2 \
    esm/v2/v2_0 \
    esm/soc \
    esm/soc/am263px \
    dcc/v1 \
    mcrc \
    mcrc/v0 \
    mcrc/v0/soc/am263px \
    rti \
    rti/v0 \
    rti/v0/soc/am263px \
    ecc \
    ecc/soc/am263px \
    ecc/V1 \
    r5 \
    r5/v0 \
    r5/v0/am263px \
    pbist \
    pbist/v0 \
    pbist/v0/soc \
    pbist/v0/soc/am263px \
    ecc_bus_safety \
    ecc_bus_safety/v0 \
    ecc_bus_safety/v0/soc \
    ecc_bus_safety/v0/soc/am263px \
    stc/v0 \
    stc/v0/soc/am263px \
    tmu_rom_checksum \
    stog/v0 \
    stog/v0/soc \
    stog/v0/soc/am263px \
    vtm \
    vtm/v1 \
    vtm/v1/soc/am263px \

INCLUDES_common := \
    -I${CG_TOOL_ROOT}/include/c \
    -I${MCU_PLUS_SDK_PATH}/source \

DEFINES_common := \
    -DSOC_AM263PX \
    -DSUBSYS_R5SS0 \
    -DSUBSYS_MSS \

CFLAGS_common := \
    -mcpu=cortex-r5 \
    -mfloat-abi=hard \
    -mfpu=vfpv3-d16 \
    -mthumb \
    -Wall \
    -Werror \
    -g \
    -Wno-gnu-variable-sized-type-not-at-end \
    -Wno-unused-function \
    -Wno-extra \

CFLAGS_cpp_common := \
    -Wno-c99-designator \
    -Wno-extern-c-compat \
    -Wno-c++11-narrowing \
    -Wno-reorder-init-list \
    -Wno-register \
    -Wno-writable-strings \
    -Wno-enum-compare \
    -Wno-reserved-user-defined-literal \
    -Wno-unused-const-variable \
    -Wno-vla-cxx-extension \
    -x c++ \

CFLAGS_debug := \
    -D_DEBUG_=1 \

CFLAGS_release := \
    -Os \

ARFLAGS_common := \
    rc \

FILES := $(FILES_common) $(FILES_$(PROFILE))
ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ifeq ($(INSTRUMENTATION_MODE), yes)
CFLAGS += -fprofile-instr-generate -fcoverage-mapping
endif
ifeq ($(CPLUSPLUS_BUILD), yes)
CFLAGS += $(CFLAGS_cpp_common)
endif
DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))

LIBDIR := lib
OBJDIR := obj/am263px/ti-arm-clang/$(PROFILE)/r5f/sdl/
OBJS := $(FILES:%.c=%.obj)
OBJS += $(ASMFILES:%.S=%.obj)
DEPS := $(FILES:%.c=%.d)

vpath %.obj $(OBJDIR)
vpath %.c $(FILES_PATH)
vpath %.S $(FILES_PATH)

$(OBJDIR)/%.obj %.obj: %.c
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -o $(OBJDIR)/$@ $<

$(OBJDIR)/%.obj %.obj: %.S
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(ASMFLAGS) -o $(OBJDIR)/$@ $<

all: $(LIBDIR)/$(LIBNAME)

$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
	@echo  .
	@echo  Archiving: $(LIBNAME) to $@ ...
	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
	@echo  Archiving: $(LIBNAME) Done !!!
	@echo  .

clean:
	@echo  Cleaning: $(LIBNAME) ...
	$(RMDIR) $(OBJDIR)
	$(RM) $(LIBDIR)/$(LIBNAME)

scrub:
	@echo  Scrubing: $(LIBNAME) ...
	-$(RMDIR) obj/
	-$(RMDIR) lib/

$(OBJS): | $(OBJDIR)

$(LIBDIR) $(OBJDIR):
	$(MKDIR) $@

-include $(addprefix $(OBJDIR)/, $(DEPS))

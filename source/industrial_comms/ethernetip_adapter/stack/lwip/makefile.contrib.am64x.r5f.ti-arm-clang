#
# Auto generated makefile
#

export MCU_PLUS_SDK_PATH?=$(abspath ../../../../..)
include $(MCU_PLUS_SDK_PATH)/imports.mak

CG_TOOL_ROOT=$(CGT_TI_ARM_CLANG_PATH)

CC=$(CGT_TI_ARM_CLANG_PATH)/bin/tiarmclang
AR=$(CGT_TI_ARM_CLANG_PATH)/bin/tiarmar

PROFILE?=release
ConfigName:=$(PROFILE)

LIBNAME:=ethernetip_adapter_lwip_contrib.am64x.r5f.ti-arm-clang.$(PROFILE).lib

FILES_common := \
    fs_example.c \
    ssi_example.c \
    lwiperf_example.c \
    mqtt_example.c \
    pppos_example.c \
    lwip_prvmib.c \
    snmpv3_dummy.c \
    snmp_example.c \
    httpserver-netconn.c \
    chargen.c \
    udpecho.c \
    tcpecho.c \
    shell.c \
    udpecho_raw.c \
    tcpecho_raw.c \
    netio.c \
    ping.c \
    socket_examples.c \
    rtp.c \

FILES_PATH_common = \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/addons \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/httpd/fs_example \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/httpd/ssi_example \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/lwiperf \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/mdns \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/mqtt \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/ppp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/snmp/snmp_private_mib \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/snmp/snmp_v3 \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/snmp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/sntp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/examples/tftp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/httpserver \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/chargen \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/udpecho \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/tcpecho \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/shell \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/udpecho_raw \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/tcpecho_raw \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/netio \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/ping \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/socket_examples \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib/apps/rtp \

INCLUDES_common := \
    -I${CG_TOOL_ROOT}/include/c \
    -I${MCU_PLUS_SDK_PATH}/source \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/include \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/include \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/freertos/include \
    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/lwipif/inc \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-contrib \
    -I${MCU_PLUS_SDK_PATH}/source/industrial_comms/ethernetip_adapter/stack/lwip/lwip-config/am64x \

DEFINES_common := \
    -DSOC_AM64X \

CFLAGS_common := \
    -mcpu=cortex-r5 \
    -mfloat-abi=hard \
    -mfpu=vfpv3-d16 \
    -mthumb \
    -Wall \
    -Werror \
    -g \
    -Wno-gnu-variable-sized-type-not-at-end \
    -Wno-unused-function \
    -Wno-extra \
    -Wvisibility \
    -mthumb \
    -fno-strict-aliasing \

CFLAGS_release := \
    -Os \
    -Oz \

CFLAGS_cpp_common := \
    -Wno-c99-designator \
    -Wno-extern-c-compat \
    -Wno-c++11-narrowing \
    -Wno-reorder-init-list \
    -Wno-deprecated-register \
    -Wno-writable-strings \
    -Wno-enum-compare \
    -Wno-reserved-user-defined-literal \
    -Wno-unused-const-variable \
    -x c++ \

CFLAGS_debug := \
    -D_DEBUG_=1 \

ARFLAGS_common := \
    rc \

FILES := $(FILES_common) $(FILES_$(PROFILE))
ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ifeq ($(CPLUSPLUS_BUILD), yes)
CFLAGS += $(CFLAGS_cpp_common)
endif
DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))

LIBDIR := lib
OBJDIR := obj/am64x/ti-arm-clang/$(PROFILE)/r5f/ethernetip_adapter_lwip_contrib/
OBJS := $(FILES:%.c=%.obj)
OBJS += $(ASMFILES:%.S=%.obj)
DEPS := $(FILES:%.c=%.d)

vpath %.obj $(OBJDIR)
vpath %.c $(FILES_PATH)
vpath %.S $(FILES_PATH)

$(OBJDIR)/%.obj %.obj: %.c
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -o $(OBJDIR)/$@ $<

$(OBJDIR)/%.obj %.obj: %.S
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(ASMFLAGS) -o $(OBJDIR)/$@ $<

all: $(LIBDIR)/$(LIBNAME)

$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
	@echo  .
	@echo  Archiving: $(LIBNAME) to $@ ...
	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
	@echo  Archiving: $(LIBNAME) Done !!!
	@echo  .

clean:
	@echo  Cleaning: $(LIBNAME) ...
	$(RMDIR) $(OBJDIR)
	$(RM) $(LIBDIR)/$(LIBNAME)

scrub:
	@echo  Scrubing: $(LIBNAME) ...
	-$(RMDIR) obj/
	-$(RMDIR) lib/

$(OBJS): | $(OBJDIR)

$(LIBDIR) $(OBJDIR):
	$(MKDIR) $@

-include $(addprefix $(OBJDIR)/, $(DEPS))

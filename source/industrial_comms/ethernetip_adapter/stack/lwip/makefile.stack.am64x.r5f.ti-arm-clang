#
# Auto generated makefile
#

export MCU_PLUS_SDK_PATH?=$(abspath ../../../../..)
include $(MCU_PLUS_SDK_PATH)/imports.mak

CG_TOOL_ROOT=$(CGT_TI_ARM_CLANG_PATH)

CC=$(CGT_TI_ARM_CLANG_PATH)/bin/tiarmclang
AR=$(CGT_TI_ARM_CLANG_PATH)/bin/tiarmar

PROFILE?=release
ConfigName:=$(PROFILE)

LIBNAME:=ethernetip_adapter_lwip_freertos.am64x.r5f.ti-arm-clang.$(PROFILE).lib

FILES_common := \
    init.c \
    def.c \
    dns.c \
    inet_chksum.c \
    ip.c \
    mem.c \
    memp.c \
    netif.c \
    pbuf.c \
    raw.c \
    stats.c \
    sys.c \
    altcp.c \
    altcp_alloc.c \
    altcp_tcp.c \
    tcp.c \
    tcp_in.c \
    tcp_out.c \
    timeouts.c \
    udp.c \
    autoip.c \
    dhcp.c \
    etharp.c \
    icmp.c \
    igmp.c \
    ip4_frag.c \
    ip4.c \
    ip4_addr.c \
    dhcp6.c \
    ethip6.c \
    icmp6.c \
    inet6.c \
    ip6.c \
    ip6_addr.c \
    ip6_frag.c \
    mld6.c \
    nd6.c \
    api_lib.c \
    api_msg.c \
    err.c \
    if_api.c \
    netbuf.c \
    netdb.c \
    netifapi.c \
    sockets.c \
    tcpip.c \
    ethernet.c \
    bridgeif.c \
    bridgeif_fdb.c \
    slipif.c \
    lowpan6_common.c \
    lowpan6.c \
    lowpan6_ble.c \
    zepif.c \
    auth.c \
    ccp.c \
    chap-md5.c \
    chap_ms.c \
    chap-new.c \
    demand.c \
    eap.c \
    ecp.c \
    eui64.c \
    fsm.c \
    ipcp.c \
    ipv6cp.c \
    lcp.c \
    magic.c \
    mppe.c \
    multilink.c \
    ppp.c \
    pppapi.c \
    pppcrypt.c \
    pppoe.c \
    pppol2tp.c \
    pppos.c \
    upap.c \
    utils.c \
    vj.c \
    arc4.c \
    des.c \
    md4.c \
    md5.c \
    sha1.c \
    snmp_asn1.c \
    snmp_core.c \
    snmp_mib2.c \
    snmp_mib2_icmp.c \
    snmp_mib2_interfaces.c \
    snmp_mib2_ip.c \
    snmp_mib2_snmp.c \
    snmp_mib2_system.c \
    snmp_mib2_tcp.c \
    snmp_mib2_udp.c \
    snmp_snmpv2_framework.c \
    snmp_snmpv2_usm.c \
    snmp_msg.c \
    snmpv3.c \
    snmp_netconn.c \
    snmp_pbuf_stream.c \
    snmp_raw.c \
    snmp_scalar.c \
    snmp_table.c \
    snmp_threadsync.c \
    snmp_traps.c \
    altcp_proxyconnect.c \
    fs.c \
    http_client.c \
    httpd.c \
     \
    lwiperf.c \
    smtp.c \
    sntp.c \
    mdns.c \
    netbiosns.c \
    tftp_server.c \
    mqtt.c \
    altcp_tls_mbedtls.c \
    altcp_tls_mbedtls_mem.c \
    snmpv3_mbedtls.c \
    sys_arch.c \

FILES_PATH_common = \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/smtp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/tftp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/mqtt \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/tftp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/netbiosns \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/mdns \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/altcp_tls \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/http \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/http/makefsdata \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/lwiperf \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/snmp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/sntp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/netif \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/netif/ppp \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/netif/ppp/polarssl \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/core \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/core/ipv6 \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/core/ipv4 \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/api \
    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/freertos/src \

INCLUDES_common := \
    -I${CG_TOOL_ROOT}/include/c \
    -I${MCU_PLUS_SDK_PATH}/source \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/include \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/include \
    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/freertos/include \
    -I${MCU_PLUS_SDK_PATH}/source/industrial_comms/ethernetip_adapter/stack/lwip/lwip-config/am64x \
    -I${MCU_PLUS_SDK_PATH}/source/kernel/freertos/FreeRTOS-Kernel/include \
    -I${MCU_PLUS_SDK_PATH}/source/kernel/freertos/portable/TI_ARM_CLANG/ARM_CR5F \
    -I${MCU_PLUS_SDK_PATH}/source/kernel/freertos/config/am64x/r5f \

DEFINES_common := \
    -DSOC_AM64X \

CFLAGS_common := \
    -mcpu=cortex-r5 \
    -mfloat-abi=hard \
    -mfpu=vfpv3-d16 \
    -mthumb \
    -Wall \
    -Werror \
    -g \
    -Wno-gnu-variable-sized-type-not-at-end \
    -Wno-unused-function \
    -Wno-extra \
    -Wvisibility \
    -mthumb \
    -fno-strict-aliasing \

CFLAGS_release := \
    -Os \
    -Oz \

CFLAGS_cpp_common := \
    -Wno-c99-designator \
    -Wno-extern-c-compat \
    -Wno-c++11-narrowing \
    -Wno-reorder-init-list \
    -Wno-deprecated-register \
    -Wno-writable-strings \
    -Wno-enum-compare \
    -Wno-reserved-user-defined-literal \
    -Wno-unused-const-variable \
    -x c++ \

CFLAGS_debug := \
    -D_DEBUG_=1 \

ARFLAGS_common := \
    rc \

FILES := $(FILES_common) $(FILES_$(PROFILE))
ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
ifeq ($(CPLUSPLUS_BUILD), yes)
CFLAGS += $(CFLAGS_cpp_common)
endif
DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))

LIBDIR := lib
OBJDIR := obj/am64x/ti-arm-clang/$(PROFILE)/r5f/ethernetip_adapter_lwip_freertos/
OBJS := $(FILES:%.c=%.obj)
OBJS += $(ASMFILES:%.S=%.obj)
DEPS := $(FILES:%.c=%.d)

vpath %.obj $(OBJDIR)
vpath %.c $(FILES_PATH)
vpath %.S $(FILES_PATH)

$(OBJDIR)/%.obj %.obj: %.c
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -o $(OBJDIR)/$@ $<

$(OBJDIR)/%.obj %.obj: %.S
	@echo  Compiling: $(LIBNAME): $<
	$(CC) -c $(ASMFLAGS) -o $(OBJDIR)/$@ $<

all: $(LIBDIR)/$(LIBNAME)

$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
	@echo  .
	@echo  Archiving: $(LIBNAME) to $@ ...
	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
	@echo  Archiving: $(LIBNAME) Done !!!
	@echo  .

clean:
	@echo  Cleaning: $(LIBNAME) ...
	$(RMDIR) $(OBJDIR)
	$(RM) $(LIBDIR)/$(LIBNAME)

scrub:
	@echo  Scrubing: $(LIBNAME) ...
	-$(RMDIR) obj/
	-$(RMDIR) lib/

$(OBJS): | $(OBJDIR)

$(LIBDIR) $(OBJDIR):
	$(MKDIR) $@

-include $(addprefix $(OBJDIR)/, $(DEPS))

/*
 *  Copyright (C) 2021-2024 Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Auto generated file
 */
% let common = system.getScript("/common");
#include "ti_drivers_config.h"
#include <drivers/pinmux.h>

static Pinmux_PerCfg_t gPinMuxMainDomainCfg[] = {
    % if(common.getSocName() == "awr294x"){
    /* Unused PAD registers configuration - Start */
    {
        PIN_PAD_AD,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_AE,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_AF,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_AG,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_AR,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_BU,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_BV,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_BW,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CT,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CU,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CV,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CW,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CX,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CY,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    {
        PIN_PAD_CZ,
        ( PIN_FORCE_INPUT_DISABLE | PIN_FORCE_OUTPUT_DISABLE )
    },
    /* Unused PAD registers configuration - End */
    %}
% for(let subTemplate of args) {
    % if (subTemplate.moduleName) {
`system.getTemplate('/drivers/pinmux/pinmux_module_config.c.xdt')( subTemplate.moduleName, "main" )`
    % }
% }
    {PINMUX_END, PINMUX_END}
};

% if(common.isMcuDomainSupported() || common.isWakeupDomainSupported()) {
static Pinmux_PerCfg_t gPinMuxMcuDomainCfg[] = {
% for(let subTemplate of args) {
    % if (subTemplate.moduleName) {
`system.getTemplate('/drivers/pinmux/pinmux_module_config.c.xdt')( subTemplate.moduleName, "mcu" )`
    % }
% }
    {PINMUX_END, PINMUX_END}
};
%}

/*
 * Pinmux
 */

%let flag=0;

void Pinmux_init(void)
{
    Pinmux_config(gPinMuxMainDomainCfg, PINMUX_DOMAIN_ID_MAIN);
    %let MSS_CTRL_ICSSM_PRU0_GPIO_OUT_CTRL_VALUE=0x00000000;
    %let MSS_CTRL_ICSSM_PRU1_GPIO_OUT_CTRL_VALUE=0x00000000;
    %for(let subTemplate of args){
        %let module=system.modules[subTemplate.moduleName];
        % for(let i = 0; i < module.$instances.length; i++) {
            %let instance = module.$instances[i];
            %if(module.getInterfaceNameList && module.getInterfaceNameList(instance)=="ICSSM"){
                %flag=1;
                %let interfaceName = module.getInterfaceNameList(instance);
                % let peripheral = instance[interfaceName];
                % let pinNames = module.getPeripheralPinNames(instance);
                % for (let pinName of pinNames) {
                %     let peripheralPin = peripheral[pinName];
                %     if (peripheralPin && peripheralPin.rx && peripheralPin.$solution.peripheralPinName && peripheralPin.$solution.peripheralPinName.substr(4,4)==="PRU0" && peripheralPin.$solution.peripheralPinName.substr(9,4)==="GPIO") {
                %            MSS_CTRL_ICSSM_PRU0_GPIO_OUT_CTRL_VALUE|=1<<parseInt(peripheralPin.$solution.peripheralPinName.slice(13,15));
                %     }
                %     if (peripheralPin && peripheralPin.rx && peripheralPin.$solution.peripheralPinName && peripheralPin.$solution.peripheralPinName.substr(4,4)==="PRU1" && peripheralPin.$solution.peripheralPinName.substr(9,4)==="GPIO") {
                %            MSS_CTRL_ICSSM_PRU1_GPIO_OUT_CTRL_VALUE|=1<<parseInt(peripheralPin.$solution.peripheralPinName.slice(13,15));
                %     }
                %}
            %}
        %}
    %}

    %if(flag===1){

    /* Set bits for input pins in ICSSM_PRU0_GPIO_OUT_CTRL and ICSSM_PRU1_GPIO_OUT_CTRL registers */
    CSL_REG32_WR(CSL_MSS_CTRL_U_BASE + CSL_MSS_CTRL_ICSSM_PRU0_GPIO_OUT_CTRL, `MSS_CTRL_ICSSM_PRU0_GPIO_OUT_CTRL_VALUE`);
    CSL_REG32_WR(CSL_MSS_CTRL_U_BASE + CSL_MSS_CTRL_ICSSM_PRU1_GPIO_OUT_CTRL, `MSS_CTRL_ICSSM_PRU1_GPIO_OUT_CTRL_VALUE`);
    
    %}
    
    % if(common.isMcuDomainSupported()) {
    Pinmux_config(gPinMuxMcuDomainCfg, PINMUX_DOMAIN_ID_MCU);
    % }
}



%%{
    let module = system.modules['/drivers/ospi/ospi'];
    let emdaCount = 0;
    for(let i = 0; i < module.$instances.length; i++)
    {
        let instance = module.$instances[i];
        if(instance.dmaEnable === true)
        {
            emdaCount += 1;
        }
    }
%%}
/*
 * OSPI
 */

% let dmaRestrictRegions = module.getDmaRestrictedRegions();

/* Regions restricted for DMA. We should use CPU memcpy in these cases */
static OSPI_AddrRegion gOspiDmaRestrictRegions[] =
{
% for(let i = 0; i < dmaRestrictRegions.length; i++) {
    % let region = dmaRestrictRegions[i];
    {
        .regionStartAddr = `region.start`,
        .regionSize      = `region.size`,
    },
% }
    {
        .regionStartAddr = 0xFFFFFFFFU,
        .regionSize      = 0U,
    }
};

/* OSPI attributes */
static OSPI_Attrs gOspiAttrs[CONFIG_OSPI_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let name = config.name;
    {
        .baseAddr             = `config.baseAddr`,
        .dataBaseAddr         = `config.dataBaseAddr`,
        .inputClkFreq         = `config.inputClkFreq`U,
        .intrNum              = `config.intrNum`U,
        .intrEnable           = `config.intrEnable.toString(10).toUpperCase()`,
        .intrPriority         = `config.intrPriority`U,
        .dmaEnable            = `config.dmaEnable.toString(10).toUpperCase()`,
        .phyEnable            = `config.phyEnable.toString(10).toUpperCase()`,
        .dacEnable            = `config.dacEnable.toString(10).toUpperCase()`,
        .chipSelect           = OSPI_`config.chipSelect`,
        .frmFmt               = OSPI_FF_`config.frmFmt`,
        .decChipSelect        = `config.decChipSelect`,
        .baudRateDiv          = `config.baudRateDiv`,
        .dmaRestrictedRegions = gOspiDmaRestrictRegions,
        % if(config.phyEnable == true){
        .phyConfiguration     = {
            .phaseDelayElement    = `config.phaseDetectDelayElement`,
            .phyControlMode = OSPI_FLASH_CFG_PHY_MASTER_CONTROL_REG_`config.phyControlMode.toUpperCase()`,
            .dllLockMode    = OSPI_PHY_DLL_`config.dllLockMode.toUpperCase()`,
            .tuningWindowParams = {
                .txDllLowWindowStart    = `config.txDllLowWindowStart.toString(10)`,
                .txDllLowWindowEnd      = `config.txDllLowWindowEnd.toString(10)`,
                .txDllHighWindowStart   = `config.txDllHighWindowStart.toString(10)`,
                .txDllHighWindowEnd     = `config.txDllHighWindowEnd.toString(10)`,
                .rxLowSearchStart       = `config.rxLowSearchStart.toString(10)`,
                .rxLowSearchEnd         = `config.rxLowSearchEnd.toString(10)`,
                .rxHighSearchStart      = `config.rxHighSearchStart.toString(10)`,
                .rxHighSearchEnd        = `config.rxHighSearchEnd.toString(10)`,
                .txLowSearchStart       = `config.txLowSearchStart.toString(10)`,
                .txLowSearchEnd         = `config.txLowSearchEnd.toString(10)`,
                .txHighSearchStart      = `config.txHighSearchStart.toString(10)`,
                .txHighSearchEnd        = `config.txHighSearchEnd.toString(10)`,
                .txDLLSearchOffset      = `config.txDLLSearchOffset.toString(10)`,
                .rxTxDLLSearchStep      = `config.rxTxDLLSearchStep.toString(10)`,
                .rdDelayMin             = `config.rdDelayMin.toString(10)`,
                .rdDelayMax             = `config.rdDelayMax.toString(10)`,
            }
        }
        % }
    },
% }
};

/* OSPI objects - initialized by the driver */
static OSPI_Object gOspiObjects[CONFIG_OSPI_NUM_INSTANCES];
/* OSPI driver configuration */
OSPI_Config gOspiConfig[CONFIG_OSPI_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    {
        &gOspiAttrs[`instance.$name.toUpperCase()`],
        &gOspiObjects[`instance.$name.toUpperCase()`],
    },
% }
};

uint32_t gOspiConfigNum = CONFIG_OSPI_NUM_INSTANCES;

#include <drivers/ospi/v0/dma/ospi_dma.h>
#include <drivers/ospi/v0/dma/edma/ospi_dma_edma.h>
% if(emdaCount > 0) {
OspiDma_EdmaArgs gOspiEdmaArgs[`module.$instances.length`];

OSPI_DmaConfig gOspiDmaConfig[CONFIG_OSPI_NUM_DMA_INSTANCES] =
{
%for(let i = 0; i < module.$instances.length; i++) {
    {
        .fxns        = &gOspiDmaEdmaFxns,
        .ospiDmaArgs = &(gOspiEdmaArgs[`i`])
    }
%}
};
% } else {
    OspiDma_EdmaArgs gOspiEdmaArgs[] = {0};
    OSPI_DmaConfig gOspiDmaConfig[] = {0};
% }
uint32_t gOspiDmaConfigNum = CONFIG_OSPI_NUM_DMA_INSTANCES;

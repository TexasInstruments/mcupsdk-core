%%{
    let module = system.modules['/drivers/uart/uart'];
    let common = system.getScript("/common");
    let udmaModule = system.modules['/drivers/udma/udma'];
    let uartUdmaInstances = [];
    for(let i=0; i < module.$instances.length; i++) {
        let instance = module.$instances[i];
        if(instance.sdkInfra == "HLD") {
            if(instance.intrEnable == "DMA") {
                uartUdmaInstances.push(module.getInstanceConfig(instance).udmaDriver);
            }
        }
    }
%%}

/*
 * UART
 */

/* UART atrributes */
static UART_Attrs gUartAttrs[CONFIG_UART_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        % let config = module.getInstanceConfig(instance);
        % let name = config.name.replace('USART', 'UART');
        {
            .baseAddr           = `config.baseAddr`,
            .inputClkFreq       = `config.inputClkFreq`U,
        },
    %}
% }
};
/* UART objects - initialized by the driver */
static UART_Object gUartObjects[CONFIG_UART_NUM_INSTANCES];
/* UART driver configuration */
UART_Config gUartConfig[CONFIG_UART_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        {
            &gUartAttrs[`instance.$name.toUpperCase()`],
            &gUartObjects[`instance.$name.toUpperCase()`],
        },
    %}
% }
};

uint32_t gUartConfigNum = CONFIG_UART_NUM_INSTANCES;

#include <drivers/uart/v0/lld/dma/uart_dma.h>
#include <drivers/udma.h>
%if(uartUdmaInstances.length > 0) {
#include <drivers/uart/v0/lld/dma/udma/uart_dma_udma.h>
extern UART_UdmaChConfig gUartUdmaChConfig[];
UART_DmaConfig gUartDmaConfig[] =
{
% for(let i = 0; i < udmaModule.$instances.length; i++) {
    {
        .fxns        = NULL,
        .uartDmaArgs = (void *)&gUartUdmaChConfig[`i`],
    },
%}
};

UART_DmaHandle gUartDmaHandle[CONFIG_UART_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        %if(instance.intrEnable == "DMA") {
                (void *)&gUdmaDrvObj[CONFIG_UDMA0],
        % }
        %else {
            NULL,
        %}
    %}
% }
};
%}
% else {
UART_DmaHandle gUartDmaHandle[] =
{

};
Udma_DrvObject gUdmaDrvObj[] =
{

};
%}

uint32_t gUartDmaConfigNum = CONFIG_UART_NUM_DMA_INSTANCES;


void Drivers_uartInit(void)
{
    UART_init();
}

%%{
    let module = system.modules['/drivers/uart/uart'];
    let common = system.getScript("/common");
    let udmaModule = system.modules['/drivers/udma/udma'];
    let uartUdmaInstances = [];
    for(let i=0; i < module.$instances.length; i++) {
        let instance = module.$instances[i];
        if(instance.sdkInfra == "HLD") {
            if(instance.intrEnable == "DMA") {
                uartUdmaInstances.push(module.getInstanceConfig(instance).udmaDriver);
            }
        }
    }
%%}

/*
 * UART
 */

/* UART atrributes */
static UART_Attrs gUartAttrs[CONFIG_UART_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        % let config = module.getInstanceConfig(instance);
        % let name = config.name.replace('USART', 'UART');
        {
            .baseAddr           = `config.baseAddr`,
            .inputClkFreq       = `config.inputClkFreq`U,
        },
    %}
% }
};
/* UART objects - initialized by the driver */
static UART_Object gUartObjects[CONFIG_UART_NUM_INSTANCES];
/* UART driver configuration */
UART_Config gUartConfig[CONFIG_UART_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        {
            &gUartAttrs[`instance.$name.toUpperCase()`],
            &gUartObjects[`instance.$name.toUpperCase()`],
        },
    %}
% }
};

%for(let i = 0; i < module.$instances.length; i++) {
   % let instance = module.$instances[i];
   % let config = module.getInstanceConfig(instance);
%if((common.getSocName() === "am65x") && ((config.name === "USART0") || (config.name === "USART1") || (config.name === "USART2"))){
 /*
 * Board info
 */
/* This is based on DMSC board config and core */

/** \brief bank interrupt source index base */
#define TISCI_BANK_SRC_IDX_BASE_UART   (0U)


static void Sciclient_uartIrqSet(void);
static void Sciclient_uartIrqRelease(void);

void UART_intr_router_configInit(void)
{
    Sciclient_uartIrqSet();
}

void UART_intr_router_configDeinit(void)
{
    Sciclient_uartIrqRelease();
}

static void Sciclient_uartIrqSet(void)
{
    int32_t                             retVal;
    struct tisci_msg_rm_irq_set_req     rmIrqReq;
    struct tisci_msg_rm_irq_set_resp    rmIrqResp;
%for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if((config.name === "USART0") || (config.name === "USART1") || (config.name === "USART2")){
    rmIrqReq.valid_params           = 0U;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_ID_VALID;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID;
    rmIrqReq.global_event           = 0U;
    rmIrqReq.src_id                 = `config.clockIds`;
    rmIrqReq.src_index              = TISCI_BANK_SRC_IDX_BASE_UART;
    rmIrqReq.dst_id                 = TISCI_DEV_MCU_ARMSS0_CPU0;
    rmIrqReq.dst_host_irq           = `config.intrNum`;
    rmIrqReq.ia_id                  = 0U;
    rmIrqReq.vint                   = 0U;
    rmIrqReq.vint_status_bit_index  = 0U;
    rmIrqReq.secondary_host         = TISCI_MSG_VALUE_RM_UNUSED_SECONDARY_HOST;

    retVal = Sciclient_rmIrqSet(&rmIrqReq, &rmIrqResp, SystemP_WAIT_FOREVER);
    if(0 != retVal)
    {
        DebugP_log("[Error] Sciclient event config failed!!!\r\n");
        DebugP_assert(FALSE);
    }
    % }
    % }
    return;
}

static void Sciclient_uartIrqRelease(void)
{
    int32_t                             retVal;
    struct tisci_msg_rm_irq_release_req rmIrqReq;
%for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if((config.name === "USART0") || (config.name === "USART1") || (config.name === "USART2")){
    rmIrqReq.valid_params           = 0U;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_ID_VALID;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID;
    rmIrqReq.global_event           = 0U;
    rmIrqReq.src_id                 = `config.clockIds`;
    rmIrqReq.src_index              = TISCI_BANK_SRC_IDX_BASE_UART;
    rmIrqReq.dst_id                 = TISCI_DEV_MCU_ARMSS0_CPU0;
    rmIrqReq.dst_host_irq           = `config.intrNum`;
    rmIrqReq.ia_id                  = 0U;
    rmIrqReq.vint                   = 0U;
    rmIrqReq.vint_status_bit_index  = 0U;
    rmIrqReq.secondary_host         = TISCI_MSG_VALUE_RM_UNUSED_SECONDARY_HOST;

    retVal = Sciclient_rmIrqRelease(&rmIrqReq, SystemP_WAIT_FOREVER);
    if(0 != retVal)
    {
        DebugP_log("[Error] Sciclient event reset failed!!!\r\n");
        DebugP_assert(FALSE);
    }
    % }
    % }
    return;
}
% break;
% }
% }

uint32_t gUartConfigNum = CONFIG_UART_NUM_INSTANCES;

#include <drivers/uart/v0/lld/dma/uart_dma.h>
#include <drivers/udma.h>
%if(uartUdmaInstances.length > 0) {
#include <drivers/uart/v0/lld/dma/udma/uart_dma_udma.h>
extern UART_UdmaChConfig gUartUdmaChConfig[];
UART_DmaConfig gUartDmaConfig[] =
{
% for(let i = 0; i < udmaModule.$instances.length; i++) {
    {
        .fxns        = NULL,
        .uartDmaArgs = (void *)&gUartUdmaChConfig[`i`],
    },
%}
};

UART_DmaHandle gUartDmaHandle[CONFIG_UART_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        %if(instance.intrEnable == "DMA") {
                (void *)&gUdmaDrvObj[CONFIG_UDMA0],
        % }
        %else {
            NULL,
        %}
    %}
% }
};
%}
% else {
UART_DmaHandle gUartDmaHandle[] =
{

};
Udma_DrvObject gUdmaDrvObj[] =
{

};
%}

uint32_t gUartDmaConfigNum = CONFIG_UART_NUM_DMA_INSTANCES;


void Drivers_uartInit(void)
{
    UART_init();
}

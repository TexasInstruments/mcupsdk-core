%%{
    let common = system.getScript("/common");
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let driverVer = soc.getDriverVer("uart");
    let module = system.modules['/drivers/uart/uart'];
    let uartEdmaInstances = [];
%%}
/*
 * UART
 */
#include <drivers/uart/v0/lld/uart_lld.h>

UARTLLD_Object gUartObject[CONFIG_UART_NUM_INSTANCES];
UARTLLD_Handle gUartHandle[CONFIG_UART_NUM_INSTANCES];

/* UART Driver handles */
extern UARTLLD_InitObject gUartInitObject[CONFIG_UART_NUM_INSTANCES];


% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.intrEnable == "DMA") {
    %    uartEdmaInstances.push(module.getInstanceConfig(instance).edmaDriver);
    % }
% }

#include <drivers/uart/v0/lld/dma/uart_dma.h>
%if(uartEdmaInstances.length > 0) {
#include <drivers/uart/v0/lld/dma/edma/uart_dma_edma.h>

/* EDMA Driver handles */
extern EDMA_Handle gEdmaHandle[CONFIG_EDMA_NUM_INSTANCES];

% let j = 0;
%  for(let i=0; i < module.$instances.length; i++) {
%      let instance = module.$instances[i];
%      if(instance.intrEnable == "DMA") {

UART_EdmaChConfig gUartDmaChCfg[CONFIG_UART_NUM_DMA_INSTANCES] =
{
    {
        .edmaRxChId = `instance.uartRxConfigXbar.instance`,
        .edmaTxChId = `instance.uartTxConfigXbar.instance`,
    },
};
% j++;
%}
%}
%}

void Drivers_uartOpen(void)
{
    int32_t status = UART_STATUS_SUCCESS;

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    gUartHandle[`instance.$name.toUpperCase()`]             = &gUartObject[`instance.$name.toUpperCase()`];
    gUartHandle[`instance.$name.toUpperCase()`]->state      = UART_STATE_RESET;
    gUartHandle[`instance.$name.toUpperCase()`]->baseAddr   = `config.baseAddr`;
    gUartHandle[`instance.$name.toUpperCase()`]->hUartInit = &gUartInitObject[`instance.$name.toUpperCase()`];

% if(config.intrEnable == "DMA") {
    status = UART_lld_initDma(gUartHandle[`instance.$name.toUpperCase()`]);
    %}
%else{
    status += UART_lld_init(gUartHandle[`instance.$name.toUpperCase()`]);
    %}
% }

    DebugP_assert(status == UART_STATUS_SUCCESS);
    return;
}

void Drivers_uartClose(void)
{
    int32_t status = UART_STATUS_SUCCESS;

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
%if(config.intrEnable == "DMA") {
    status = UART_lld_deInitDma(gUartHandle[`instance.$name.toUpperCase()`]);
    %} else {
    status = UART_lld_deInit(gUartHandle[`instance.$name.toUpperCase()`]);
    %}
% }

    DebugP_assert(status == UART_STATUS_SUCCESS);
    return;
}

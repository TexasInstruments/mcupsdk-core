%%{
    let common = system.getScript("/common");
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let uartUdmaInstances = [];
    let driverVer = soc.getDriverVer("uart");
    let module = system.modules['/drivers/uart/uart'];
    for(let i=0; i < module.$instances.length; i++) {
        let instance = module.$instances[i];
        if(instance.sdkInfra == "HLD") {
            if(instance.intrEnable == "DMA") {
                uartUdmaInstances.push(module.getInstanceConfig(instance).udmaDriver);
            }
        }
    }
%%}

/*
 * UART
 */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(instance.sdkInfra == "HLD") {
        % if(config.readMode == "CALLBACK" && config.readCallbackFxn != "NULL") {
    /* UART Read Callback */
    void `config.readCallbackFxn`(UART_Handle handle, UART_Transaction *transaction);
    % }
    %}
% }
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(instance.sdkInfra == "HLD") {
        % if(config.writeMode == "CALLBACK" && config.writeCallbackFxn != "NULL") {
    /* UART Write Callback */
    void `config.writeCallbackFxn`(UART_Handle handle, UART_Transaction *transaction);
        % }
    %}
% }

/* UART Driver handles */
UART_Handle gUartHandle[CONFIG_UART_NUM_INSTANCES];

#include <drivers/uart/v0/lld/dma/uart_dma.h>
#include <kernel/dpl/ClockP.h>
%if(uartUdmaInstances.length > 0) {
#include <drivers/uart/v0/lld/dma/udma/uart_dma_udma.h>
#include <drivers/uart/v0/lld/dma/soc/uart_dma_soc.h>
#include <drivers/udma.h>

/*
 * Ring parameters
 */
/** \brief Number of ring entries - we can prime this much UART operations */
#define UART_UDMA_TEST_RING_ENTRIES          (1U)
/** \brief Size (in bytes) of each ring entry (Size of pointer - 64-bit) */
#define UART_UDMA_TEST_RING_ENTRY_SIZE       (sizeof(uint64_t))
/** \brief Total ring memory */
#define UART_UDMA_TEST_RING_MEM_SIZE         (UART_UDMA_TEST_RING_ENTRIES * UART_UDMA_TEST_RING_ENTRY_SIZE)
/** \brief UDMA host mode buffer descriptor memory size. */
#define UART_UDMA_TEST_DESC_SIZE             (sizeof(CSL_UdmapCppi5HMPD))


%for(let i = 0; i < uartUdmaInstances.length; i++) {
/* UART UDMA TX Channel Objects */
static Udma_ChObject gUart`i`UdmaTxObj;

/* UART UDMA RX Channel Objects */
static Udma_ChObject gUart`i`UdmaRxObj;

/**< UDMA TX completion queue object */
static Udma_EventObject        gUart`i`UdmaCqTxEventObj;
/**< UDMA RX completion queue object */
static Udma_EventObject        gUart`i`UdmaCqRxEventObj;

/* UART UDMA Channel Ring Mem */
static uint8_t gUart`i`UdmaRxRingMem[UART_UDMA_TEST_RING_MEM_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
% if(common.getSocName() === "am65x"){
static uint8_t gUart`i`UdmaCqRxRingMem[UART_UDMA_TEST_RING_MEM_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
%}
static uint8_t gUart`i`UdmaTxRingMem[UART_UDMA_TEST_RING_MEM_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
% if(common.getSocName() === "am65x"){
static uint8_t gUart`i`UdmaCqTxRingMem[UART_UDMA_TEST_RING_MEM_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
%}

/* UART UDMA Channel HPD Mem */
static uint8_t gUart`i`UdmaTxHpdMem[UART_UDMA_TEST_DESC_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
static uint8_t gUart`i`UdmaRxHpdMem[UART_UDMA_TEST_DESC_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
%}

UART_UdmaChConfig gUartUdmaChConfig[CONFIG_UART_NUM_DMA_INSTANCES] =
{
    %for(let i = 0; i < uartUdmaInstances.length; i++) {
        {
        .drvHandle        = &gUdmaDrvObj[`i`],
        .txChHandle       = &gUart`i`UdmaTxObj,
        .rxChHandle       = &gUart`i`UdmaRxObj,
        .cqTxEvtHandle    = &gUart`i`UdmaCqTxEventObj,
        .cqRxEvtHandle    = &gUart`i`UdmaCqRxEventObj,
        .txHpdMem         = &gUart`i`UdmaTxHpdMem,
        .rxHpdMem         = &gUart`i`UdmaRxHpdMem,
        .hpdMemSize       = UART_UDMA_TEST_DESC_SIZE,
        .txRingMem        = &gUart`i`UdmaTxRingMem,
%if(common.getSocName() === "am65x"){
        .cqTxRingMem      = &gUart`i`UdmaCqTxRingMem,
%}
        .rxRingMem        = &gUart`i`UdmaRxRingMem,
%if(common.getSocName() === "am65x"){
        .cqRxRingMem      = &gUart`i`UdmaCqRxRingMem,
%}
        .ringMemSize      = UART_UDMA_TEST_RING_MEM_SIZE,
        .ringElemCnt      = UART_UDMA_TEST_RING_ENTRIES,
        .isOpen           = FALSE,
%if(common.getSocName() === "am65x"){
        .isCqRingMem      = UDMA_COMP_QUEUE_RING_MEM_ENABLED,
%}else{
        .isCqRingMem      = UDMA_COMP_QUEUE_RING_MEM_DISABLED,
%}
        },
   % }

};
%}

UART_DmaChConfig gUartDmaChConfig[CONFIG_UART_NUM_INSTANCES] =
{
   % let j = 0;
    % for(let i = 0; i < module.$instances.length; i++) {
        % let instance = module.$instances[i];
        % if(instance.sdkInfra == "HLD") {
           %if(instance.intrEnable == "DMA") {
                &gUartUdmaChConfig[`j++`],
            % }
            %else {
                NULL,
            %}
        %}
    % }
};

/* UART Driver Parameters */
UART_Params gUartParams[CONFIG_UART_NUM_INSTANCES] =
{
% let dmaInstanceIndex = 0;
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "HLD") {
        % let config = module.getInstanceConfig(instance);
        {
            .baudRate           = `config.baudRate`,
            .dataLength         = UART_LEN_`config.dataLength`,
            .stopBits           = UART_STOPBITS_`config.stopBits`,
            .parityType         = UART_PARITY_`config.parityType`,
            .readMode           = UART_TRANSFER_MODE_`config.readMode`,
            .readReturnMode     = UART_READ_RETURN_MODE_`config.readReturnMode`,
            .writeMode          = UART_TRANSFER_MODE_`config.writeMode`,
            % if(config.readMode == "CALLBACK" && config.readCallbackFxn != "NULL") {
            .readCallbackFxn    = `config.readCallbackFxn`,
            % } else {
            .readCallbackFxn    = NULL,
            % }
            % if(config.writeMode == "CALLBACK" && config.writeCallbackFxn != "NULL") {
            .writeCallbackFxn   = `config.writeCallbackFxn`,
            % } else {
            .writeCallbackFxn   = NULL,
            % }
            .hwFlowControl      = `config.hwFlowControl.toString(10).toUpperCase()`,
            .hwFlowControlThr   = UART_RXTRIGLVL_`config.hwFlowControlThr`,
            % if(config.intrEnable == "DISABLE") {
            .transferMode       = UART_CONFIG_MODE_POLLED,
            .skipIntrReg        = FALSE,
            % }
            % if(config.intrEnable == "ENABLE") {
            .transferMode       = UART_CONFIG_MODE_INTERRUPT,
            .skipIntrReg         = FALSE,
            % }
            % if(config.intrEnable == "USER_INTR") {
            .transferMode       = UART_CONFIG_MODE_USER_INTR,
            .skipIntrReg         = TRUE,
            % }
            % if(config.intrEnable == "DMA") {
            .transferMode       = UART_CONFIG_MODE_DMA,
            .skipIntrReg         = FALSE,
            % }
            %if(config.intrEnable == "DMA") {
            .uartDmaIndex = `dmaInstanceIndex`,
            %dmaInstanceIndex++;
            %}
            %else {
            .uartDmaIndex = -1,
            %}
            .intrNum            = `config.intrNum`U,
            .intrPriority       = `config.intrPriority`U,
            .operMode           = UART_OPER_MODE_`config.operMode`,
            %if(config.intrEnable == "DMA") {
            .rxTrigLvl          = UART_RXTRIGLVL_1,
            .txTrigLvl          = UART_TXTRIGLVL_1,
            %}
            %else {
            .rxTrigLvl          = UART_RXTRIGLVL_`config.rxTrigLvl`,
            .txTrigLvl          = UART_TXTRIGLVL_`config.txTrigLvl`,
            %}
            %if(config.intrEnable == "DMA") {
            .rxEvtNum           = `config.udmaPdmaChannels[0].rxCh`,
            .txEvtNum           = `config.udmaPdmaChannels[0].txCh`,
            %}
            %else {
            .rxEvtNum           = 0U,
            .txEvtNum           = 0U,
            %}
        },
    %}
% }
};

void Drivers_uartOpen(void)
{
    uint32_t instCnt;
    int32_t  status = SystemP_SUCCESS;

    for(instCnt = 0U; instCnt < CONFIG_UART_NUM_INSTANCES; instCnt++)
    {
        gUartHandle[instCnt] = NULL;   /* Init to NULL so that we can exit gracefully */
    }

    /* Open all instances */
    for(instCnt = 0U; instCnt < CONFIG_UART_NUM_INSTANCES; instCnt++)
    {
        gUartHandle[instCnt] = UART_open(instCnt, &gUartParams[instCnt]);
        if(NULL == gUartHandle[instCnt])
        {
            DebugP_logError("UART open failed for instance %d !!!\r\n", instCnt);
            status = SystemP_FAILURE;
            break;
        }
    }

    if(SystemP_FAILURE == status)
    {
        Drivers_uartClose();   /* Exit gracefully */
    }

    return;
}

void Drivers_uartClose(void)
{
    uint32_t instCnt;

    /* Close all instances that are open */
    for(instCnt = 0U; instCnt < CONFIG_UART_NUM_INSTANCES; instCnt++)
    {
        if(gUartHandle[instCnt] != NULL)
        {
            UART_close(gUartHandle[instCnt]);
            gUartHandle[instCnt] = NULL;
        }
    }

    return;
}

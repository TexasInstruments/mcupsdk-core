%%{
    let common = system.getScript("/common");
    let module = system.modules['/drivers/uart/uart'];
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let uartEdmaInstances = [];
    let driverVer = soc.getDriverVer("uart");
    for(let i=0; i < module.$instances.length; i++) {
        let instance = module.$instances[i];
        let ch_instances = instance.uartChannel;
        if(instance.sdkInfra == "LLD") {
            if(instance.intrEnable == "DMA") {
                uartEdmaInstances.push(module.getInstanceConfig(instance).edmaDriver);
            }
        }
    }
%%}

#include "ti_drivers_open_close.h"
#include <drivers/uart/v0/lld/uart_lld.h>
#include <kernel/dpl/ClockP.h>

/*
 * UART
 */
extern UARTLLD_Object gUartObject[CONFIG_UART_NUM_LLD_INSTANCES];
extern UARTLLD_Handle gUartHandleLld[CONFIG_UART_NUM_LLD_INSTANCES];

uint32_t gUartDmaConfigNumLld = CONFIG_UART_NUM_DMA_LLD_INSTANCES;

/*
 * UART
 */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "LLD") {
    % let config = module.getInstanceConfig(instance);
    % if(config.intrEnable != "DISABLE") {
/* UART Read Callback */
void `config.readCallbackFxn`(void *args);
    % }
% }
%}

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "LLD") {
    % let config = module.getInstanceConfig(instance);
    % if(config.intrEnable != "DISABLE") {
/* UART Write Callback */
void `config.writeCallbackFxn`(void *args);
    % }
% }
%}

%if(uartEdmaInstances.length > 0) {
#include <drivers/edma.h>
#include <drivers/uart/v0/lld/dma/uart_dma.h>
#include <drivers/uart/v0/lld/dma/edma/uart_dma_edma.h>

%  for(let i=0; i < module.$instances.length; i++) {
%      let instance = module.$instances[i];
%      if(instance.sdkInfra == "LLD") {
%      let instNameCamelCase = common.camelSentence(instance.$name);
%      if(instance.intrEnable == "DMA") {
extern UART_EdmaChConfig g`instNameCamelCase`DmaChCfg[`instance.$name.toUpperCase()`];
%}
%}
%}
%}

%if(uartEdmaInstances.length == 0) {
EDMA_Config gEdmaConfigLld[1] =
{
    {
        NULL,
        NULL,
    }
};
%}

/* UART init objects */
UARTLLD_InitObject gUartInitObject[CONFIG_UART_NUM_LLD_INSTANCES] =
{
    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.sdkInfra == "LLD") {
        % let config = module.getInstanceConfig(instance);
        % let name = config.name.replace('USART', 'UART');
        {
        .inputClkFreq       = `config.inputClkFreq`,
        .baudRate           = `config.baudRate`,
        .dataLength         = UART_LEN_`config.dataLength`,
        .stopBits           = UART_STOPBITS_`config.stopBits`,
        .parityType         = UART_PARITY_`config.parityType`,
        .readReturnMode     = UART_READ_RETURN_MODE_`config.readReturnMode`,
        .hwFlowControl      = `config.hwFlowControl.toString(10).toUpperCase()`,
        .hwFlowControlThr   = UART_RXTRIGLVL_`config.hwFlowControlThr`,
        % if(config.intrEnable == "DISABLE") {
        .transferMode       = UART_CONFIG_MODE_POLLED,
        % }
        % if(config.intrEnable == "ENABLE") {
        .transferMode       = UART_CONFIG_MODE_INTERRUPT,
        % }
        % if(config.intrEnable == "USER_INTR") {
        .transferMode       = UART_CONFIG_MODE_USER_INTR,
        % }
        % if(config.intrEnable == "DMA") {
        .transferMode       = UART_CONFIG_MODE_DMA,
        %}
        .intrNum            = `config.intrNum`U,
        .intrPriority       = `config.intrPriority`U,
        .operMode           = UART_OPER_MODE_`config.operMode`,
        %if(config.intrEnable == "DMA") {
        .rxTrigLvl          = UART_RXTRIGLVL_1,
        .txTrigLvl          = UART_TXTRIGLVL_1,
        .uartDmaHandle      = (UART_DmaHandle) &gEdmaConfig[0],
        .dmaChCfg           = (UART_DmaChConfig) &gUartDmaChCfg,
        %}
        %else {
        .rxTrigLvl          = UART_RXTRIGLVL_`config.rxTrigLvl`,
        .txTrigLvl          = UART_TXTRIGLVL_`config.txTrigLvl`,
        %}
        .clockP_get         = ClockP_getTicks,
        .clockP_usecToTick  = ClockP_usecToTicks,
        % if(config.intrEnable != "DISABLE") {
        .writeCompleteCallbackFxn = `config.writeCallbackFxn`,
        .readCompleteCallbackFxn  = `config.readCallbackFxn`,
        % }
        %else {
        .writeCompleteCallbackFxn = NULL,
        .readCompleteCallbackFxn  = NULL,
        % }
        },
    %}
% }
};

void Drivers_resolverOpen()
{
% let module = system.modules['/drivers/resolver/resolver'];
% let common   = system.getScript("/common");
% let nameOfModule = "resolver";
% let nameOfPeripheral = module.peripheralName;
%if (module != null)
%{
    % for(let i = 0; i < module.$instances.length; i++) {
	    % let instance = module.$instances[i];
		% let baseName = instance.$name + "_BASE_ADDR";
    /* setting up the Params */
    RDC_configParams params;
    RDC_paramsInit(&params);

    params.Input_signalMode = `instance.resolverSignalMode`;
    params.Input_socWidth = `instance.AdcSocWidth`;
    params.Input_AdcBurstCount = `instance.AdcBurstCount`;
    params.Input_resolverSequencerMode = `instance.resolverSequencerMode`;

    params.ExcFrq_freqSel = `instance.resolverExcitationFrequencySelect`;
    params.ExcFrq_phase = `instance.resolverExcitationFrequencyPhase`;
    params.ExcFrq_amplitude = `instance.resolverExcitationFrequencyAmplitude_adv`;
    params.ExcFrq_enableSyncIn = `instance.SyncInEnable`;
    params.ExcFrq_socDelay = `instance.SocDelay_adv`;

    %for(let core = 0; core <= 1; core++)
        %{
    params.core`core`.BpfDc_bpfEnable = `instance["Core"+core+"bandPassFilterEnable"]`;
    params.core`core`.BpfDc_offsetCorrectionEnable = `instance["Core"+core+"DcOffsetCorrectionEnable"]`;
    params.core`core`.BpfDc_DcOffCal1 = `instance["Core"+core+"DcOffsetCalCoef1_adv"]`;
    params.core`core`.BpfDc_DcOffCal2 = `instance["Core"+core+"DcOffsetCalCoef2_adv"]`;
    params.core`core`.BpfDc_manualSin = `instance["Core"+core+"sinDcOffset"]`;
    params.core`core`.BpfDc_manualCos = `instance["Core"+core+"cosDcOffset"]`;

    params.core`core`.IdealSample_overrideValue = `instance["Core"+core+"IdealSampleOverrideValue_adv"]`;
    params.core`core`.IdealSample_absThresholdValue = `instance["Core"+core+"IdealSampleDetectionThreshold_adv"]`;
    params.core`core`.IdealSample_sampleAdjustCount = `instance["Core"+core+"IdealSampleBpfAdjust_adv"]`;
    params.core`core`.IdealSample_mode = `instance["Core"+core+"IdealSampleMode_adv"]`;
    params.core`core`.IdealSample_bottomSampleEnable = `instance["Core"+core+"IdealSampleBottomSampling_adv"]`;

    params.core`core`.Pg_estimationEnable = `instance["Core"+core+"PgEstimationEnable_adv"]`;
    params.core`core`.Pg_EstimationLimit = `instance["Core"+core+"PgEstimationTrainLimit_adv"]`;

    params.core`core`.Pg_CorrectionEnable = `instance["Core"+core+"PgCorrectionEnable_adv"]`;
    params.core`core`.Pg_autoCorrectionEnable = `instance["Core"+core+"PgAutoPhaseGainCorrection_adv"]`;
    params.core`core`.Pg_sinGainBypassValue = `instance["Core"+core+"PgSinGainBypassValue_adv"]`;
    params.core`core`.Pg_cosGainBypassValue = `instance["Core"+core+"PgCosGainBypassValue_adv"]`;
    params.core`core`.Pg_cosPhaseBypassValue = `instance["Core"+core+"PgCosPhaseBypassValue_adv"]`;

    ((params.core`core`).track2Constants).kvelfilt = `instance["Core"+core+"track2kvelfilt_adv"]`;
%%{
let IntOptions  = [
    "RDC_INTERRUPT_SOURCE_LOWAMPLITUDE_ERR",
    "RDC_INTERRUPT_SOURCE_HIGHAMPLITUDE_COS_FAULT_ERR",
    "RDC_INTERRUPT_SOURCE_HIGHAMPLITUDE_SIN_FAULT_ERR",
    "RDC_INTERRUPT_SOURCE_SINSQCOSSQ_LO_ERR",
    "RDC_INTERRUPT_SOURCE_SINSQCOSSQ_HI_ERR",
    "RDC_INTERRUPT_SOURCE_COS_MULTI_ZC_ERROR_ERR",
    "RDC_INTERRUPT_SOURCE_SIN_MULTI_ZC_ERROR_ERR",
    "RDC_INTERRUPT_SOURCE_COS_NEG_ZC_PEAK_MISMATCH_ERR",
    "RDC_INTERRUPT_SOURCE_COS_POS_ZC_PEAK_MISMATCH_ERR",
    "RDC_INTERRUPT_SOURCE_SIN_NEG_ZC_PEAK_MISMATCH_ERR",
    "RDC_INTERRUPT_SOURCE_SIN_POS_ZC_PEAK_MISMATCH_ERR",
    "RDC_INTERRUPT_SOURCE_EXCFREQDRIFT_SIN_LO_ERR",
    "RDC_INTERRUPT_SOURCE_EXCFREQDRIFT_COS_LO_ERR",
    "RDC_INTERRUPT_SOURCE_EXCFREQDRIFT_HI_ERR",
    "RDC_INTERRUPT_SOURCE_PHASEDRIFT_COS_LO_ERR",
    "RDC_INTERRUPT_SOURCE_PHASEDRIFT_COS_HI_ERR",
    "RDC_INTERRUPT_SOURCE_GAINDRIFT_SIN_LO_ERR",
    "RDC_INTERRUPT_SOURCE_GAINDRIFT_SIN_HI_ERR",
    "RDC_INTERRUPT_SOURCE_GAINDRIFT_COS_LO_ERR",
    "RDC_INTERRUPT_SOURCE_GAINDRIFT_COS_HI_ERR",
    "RDC_INTERRUPT_SOURCE_OFFSETDRIFT_SIN_LO_ERR",
    "RDC_INTERRUPT_SOURCE_OFFSETDRIFT_SIN_HI_ERR",
    "RDC_INTERRUPT_SOURCE_OFFSETDRIFT_COS_LO_ERR",
    "RDC_INTERRUPT_SOURCE_OFFSETDRIFT_COS_HI_ERR",
    "RDC_INTERRUPT_SOURCE_TRACK_LOCK_ERR",
    ]

    let currentInt = ""
    let enableIntCount = 0
    let IntsToEnableOR = "("
    for (let IntToEnable in instance["ResolverCore"+core+"InterruptConfig"])
    {
        currentInt = instance["ResolverCore"+core+"InterruptConfig"][enableIntCount]
        if (enableIntCount == 0)
        {
            IntsToEnableOR += currentInt
        }
        else
        {
            IntsToEnableOR += " | " + currentInt
        }
        let disableIndex = IntOptions.indexOf(currentInt)
        if(disableIndex>-1){
            IntOptions.splice(disableIndex,1)
        }
        enableIntCount++
    }
    IntsToEnableOR += ")"
    let IntsToDisableOR = "("
    let disableIntCount = 0
    for(let IntToDisable in IntOptions){
        currentInt = IntOptions[disableIntCount]
        if (disableIntCount == 0)
        {
            IntsToDisableOR += currentInt
        }
        else
        {
            IntsToDisableOR += " | " + currentInt
        }
        disableIntCount++
    }
    IntsToDisableOR += ")"
%%}
    %if(enableIntCount > 0)
    %{
    params.Int_core`core`Interrupts = `IntsToEnableOR`;
    %}
    %else
    %{
    params.Int_core`core`Interrupts = 0;
    %}

        %}
    params.Int_seqEnable = `instance.SequencerInterrupt`;

    RDC_init(`baseName`, &params);
    %}
%}
}

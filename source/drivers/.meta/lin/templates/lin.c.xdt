%%{
    let module = system.modules['/drivers/lin/lin'];
%%}
% var nameOfPeripheral = module.peripheralName;

/******************************************************************************
 * LIN Configurations
 *****************************************************************************/
%if (module != null)
%{
	% for(var i = 0; i < module.$instances.length; i++) {
	    % var instance = module.$instances[i];

    LIN_initModule(`instance.$name`_BASE_ADDR);
     % if (instance.useDefault == false){
    /*
     * Enter Software Reset State
     */
    LIN_enterSoftwareReset(`instance.$name`_BASE_ADDR);
    LIN_disableSCIMode(`instance.$name`_BASE_ADDR);
    LIN_setLINMode(`instance.$name`_BASE_ADDR, `instance.linMode`);
    LIN_setCommMode(`instance.$name`_BASE_ADDR, `instance.linCommMode`);
    LIN_setDebugSuspendMode(`instance.$name`_BASE_ADDR, `instance.linDebugMode`);
    LIN_setChecksumType(`instance.$name`_BASE_ADDR, `instance.linChecksum`);
    LIN_setMessageFiltering(`instance.$name`_BASE_ADDR, `instance.linMsgFilter`);
	% if (instance.enableParityCheck)
	% {
    LIN_enableParity(`instance.$name`_BASE_ADDR);
	%} else {
	LIN_disableParity(`instance.$name`_BASE_ADDR);
	%}
    %}
    % if (instance.enableLoopback){
    /*
     * Enable LIN test mode
     */
    % if (instance.loopbackMode == "LIN_TEST_INTERNAL")
    % {
    /*
     * Enable Internal Loopback mode
     */
    LIN_enableIntLoopback(`instance.$name`_BASE_ADDR);
    %} else {
    /*
     * Enable External Loopback mode
     */
	LIN_enableExtLoopback(`instance.$name`_BASE_ADDR, `instance.loopbackType`, `instance.analogLoopbackPath`);
    %}
    %} else {
    LIN_disableIntLoopback(`instance.$name`_BASE_ADDR);
    LIN_disableExtLoopback(`instance.$name`_BASE_ADDR);
    %}

    % if (instance.useDefault == false){
    /*
     * Finally exit SW reset and enter LIN ready state
     */
    LIN_exitSoftwareReset(`instance.$name`_BASE_ADDR);
    %}

      % if (instance.enableInterrupt){
    /*
     * Enable LIN Interrupts
     */
        % let x = String(instance.interruptFlags).split(",").join("|");
        % if (!x) { x = "0";}
    LIN_enableInterrupt(`instance.$name`_BASE_ADDR, `x`);
            % for (var int_index in instance.interruptLine)
               %{
    /*
     * Set the interrupt priority line
     */
               % if (instance.interruptLine[int_index] == "LIN_INTERRUPT_LINE0")
               %{
               % let y = String(instance.interruptPriorityLine0).split(",").join("|");
        	   % if (!y) { y = "LIN_INT_ALL";}
    LIN_setInterruptLevel0(`instance.$name`_BASE_ADDR, `y`);
               %}
               %else if (instance.interruptLine[int_index] == "LIN_INTERRUPT_LINE1")
               %{
               % let y = String(instance.interruptPriorityLine1).split(",").join("|");
        	   % if (!y) { y = "0";}
    LIN_setInterruptLevel1(`instance.$name`_BASE_ADDR, `y`);
               %}
    LIN_enableGlobalInterrupt(`instance.$name`_BASE_ADDR, `instance.interruptLine[int_index]`);
    LIN_clearGlobalInterruptStatus(`instance.$name`_BASE_ADDR, `instance.interruptLine[int_index]`);
               %}
        %}
        %else {
    LIN_disableInterrupt(`instance.$name`_BASE_ADDR, LIN_INT_ALL);
        %}
    %}
%}
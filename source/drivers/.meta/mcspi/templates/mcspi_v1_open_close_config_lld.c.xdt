%%{
    let common = system.getScript("/common");
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let driverVer = soc.getDriverVer("mcspi");
    let module = system.modules['/drivers/mcspi/mcspi'];
    let mcspiEdmaInstances = [];
    let module_ch = system.modules[`/drivers/mcspi/${driverVer}/mcspi_${driverVer}_channel`];
%%}
/*
 * MCSPI
 */
#include <drivers/mcspi/v0/lld/mcspi_lld.h>

/* MCSPI Driver handles */
MCSPILLD_Object gMcspiObject[CONFIG_MCSPI_NUM_INSTANCES];
MCSPILLD_Handle gMcspiHandle[CONFIG_MCSPI_NUM_INSTANCES];

extern MCSPILLD_InitObject gMcspiInitObject[];

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let instNameCamelCase = common.camelSentence(instance.$name);
extern MCSPI_ChConfig g`instNameCamelCase`ChCfg[];
%}

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.intrEnable == "DMA") {
    %    mcspiEdmaInstances.push(module.getInstanceConfig(instance).edmaDriver);
    % }
% }
/* MCSPI Driver handles */

%if(mcspiEdmaInstances.length > 0) {
#include <drivers/mcspi/v0/lld/dma/mcspi_dma.h>
#include <drivers/mcspi/v0/lld/dma/edma/mcspi_dma_edma.h>

/* EDMA Driver handles */
extern EDMA_Handle gEdmaHandle[];

%  for(let i=0; i < module.$instances.length; i++) {
%      let instance = module.$instances[i];
%      let ch_instances = instance.mcspiChannel;
%      let config = module.getInstanceConfig(instance);
%      let instNameCamelCase = common.camelSentence(instance.$name);
%      if(instance.intrEnable == "DMA") {
MCSPI_EdmaChConfig g`instNameCamelCase`DmaChCfg[`instance.$name.toUpperCase()`_NUM_CH] =
{
    % for(let ch = 0; ch < ch_instances.length; ch++) {
    % let ch_instance = ch_instances[ch];
    % let ch_config = module_ch.getInstanceConfig(ch_instance);
    {
        .edmaRxChId = `ch_instance.mcspiRxConfigXbar.instance`,
        .edmaTxChId = `ch_instance.mcspiTxConfigXbar.instance`,
    },
    % }
};
%}
%}
%}

void Drivers_mcspiOpen(void)
{
    int32_t status = MCSPI_STATUS_SUCCESS;

    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let instNameCamelCase = common.camelSentence(instance.$name);
    gMcspiHandle[`instance.$name.toUpperCase()`]             = &gMcspiObject[`instance.$name.toUpperCase()`];
    gMcspiHandle[`instance.$name.toUpperCase()`]->state      = MCSPI_STATE_RESET;
    gMcspiHandle[`instance.$name.toUpperCase()`]->baseAddr   = `config.baseAddr`;
    gMcspiHandle[`instance.$name.toUpperCase()`]->hMcspiInit = &gMcspiInitObject[`instance.$name.toUpperCase()`];

    % if(config.intrEnable == "DMA") {
    status = MCSPI_lld_initDma(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %}
    % else {
    status = MCSPI_lld_init(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %}
    DebugP_assert(status == MCSPI_STATUS_SUCCESS);

    %}

    return;
}

void Drivers_mcspiClose(void)
{
    int32_t status = MCSPI_STATUS_SUCCESS;

    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.intrEnable == "DMA") {
    status = MCSPI_lld_deInitDma(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %} else {
    status = MCSPI_lld_deInit(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %}
    DebugP_assert(status == MCSPI_STATUS_SUCCESS);

    %}

    return;
}


%%{
    let common = system.getScript("/common");
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let module = system.modules['/drivers/mcspi/mcspi'];
    let mcspiEdmaInstances = [];
    let driverVer = soc.getDriverVer("mcspi");
    let module_ch = system.modules[`/drivers/mcspi/${driverVer}/mcspi_${driverVer}_channel`];
    for(let i=0; i < module.$instances.length; i++) {
        let instance = module.$instances[i];
        let ch_instances = instance.mcspiChannel;
        if(instance.intrEnable == "DMA") {
            mcspiEdmaInstances.push(module.getInstanceConfig(instance).edmaDriver);
        }
    }
%%}

#include "ti_drivers_open_close.h"
#include <drivers/mcspi/v0/lld/mcspi_lld.h>
#include <kernel/dpl/ClockP.h>

/*
 * MCSPI
 */
extern MCSPILLD_Object gMcspiObject[CONFIG_MCSPI_NUM_INSTANCES];
extern MCSPILLD_Handle gMcspiHandle[CONFIG_MCSPI_NUM_INSTANCES];

%  for(let i = 0; i < module.$instances.length; i++) {
%    let instance = module.$instances[i];
uint32_t gMcspiNumCh[`instance.$name.toUpperCase()`_NUM_CH] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    `instance.$name.toUpperCase()`_NUM_CH,
%}
};
%}

uint32_t gMcspiDmaConfigNum = CONFIG_MCSPI_NUM_DMA_INSTANCES;

% let instance = module.$instances[0];
% let config = module.getInstanceConfig(instance);
%if(config.intrEnable != "POLLED") {
/* MCSPI Transfer Callback Function */
void `config.transferCallbackFxn`(void *args, uint32_t transferStatus);
/* MCSPI Error Callback Function */
void `config.errorCallbackFxn`(void *args);
%}

/* MCSPI Driver Channel Configurations */
% let channelEnable;
% for(let i = 0; i < module.$instances.length; i++) {
    % channelEnable = ["FALSE","FALSE","FALSE","FALSE"];
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let instNameCamelCase = common.camelSentence(instance.$name);
MCSPI_ChConfig g`instNameCamelCase`ChCfg[`instance.$name.toUpperCase()`_NUM_CH] =
{
    % let ch_instances = instance.mcspiChannel;
    % for(let ch = 0; ch < ch_instances.length; ch++) {
        % let ch_instance = ch_instances[ch];
        % let ch_config = module_ch.getInstanceConfig(ch_instance);
        % if(config.mode == "PERIPHERAL") {
        %   ch_config.cs = 0;
        % }
        % channelEnable[ch_config.cs] = "TRUE";
    {
        .chNum              = MCSPI_CHANNEL_`ch_config.cs`,
        .frameFormat        = MCSPI_FF_`ch_config.frameFormat`,
        .bitRate            = `ch_config.bitRate`,
        .csPolarity         = MCSPI_CS_POL_`ch_config.csPolarity`,
        .trMode             = MCSPI_TR_MODE_`config.trMode`,
        .inputSelect        = MCSPI_IS_D`config.inputSelect`,
        .dpe0               = MCSPI_DPE_`config.dpe0`,
        .dpe1               = MCSPI_DPE_`config.dpe1`,
        .slvCsSelect        = MCSPI_SLV_CS_SELECT_`ch_config.slvCsSelect`,
        .startBitEnable     = `ch_config.startBitEnable.toString(10).toUpperCase()`,
        .startBitPolarity   = MCSPI_SB_POL_`ch_config.startBitPolarity`,
        .turboEnable        = `ch_config.turboEnable.toString(10).toUpperCase()`,
        .csIdleTime         = MCSPI_TCS0_`ch_config.csIdleTime`_CLK,
        .defaultTxData      = 0x`ch_config.defaultTxData.toString(16).toUpperCase()`U,
        .txFifoTrigLvl      = `config.txFifoTrigLevel`U,
        .rxFifoTrigLvl      = `config.rxFifoTrigLevel`U,
    },
    % }
};
%}

uint32_t gMcspiConfigNum = CONFIG_MCSPI_NUM_INSTANCES;

%if(mcspiEdmaInstances.length > 0) {
#include <drivers/edma.h>
#include <drivers/mcspi/v0/lld/dma/mcspi_dma.h>
#include <drivers/mcspi/v0/lld/dma/edma/mcspi_dma_edma.h>

%  for(let i=0; i < module.$instances.length; i++) {
%      let instance = module.$instances[i];
%      let ch_instances = instance.mcspiChannel;
%      let config = module.getInstanceConfig(instance);
%      let instNameCamelCase = common.camelSentence(instance.$name);
%      if(instance.intrEnable == "DMA") {
extern MCSPI_EdmaChConfig g`instNameCamelCase`DmaChCfg[`instance.$name.toUpperCase()`_NUM_CH];
%}
%}
%}

%if(mcspiEdmaInstances.length = 0) {
EDMA_Config gEdmaConfig[1] =
{
    {
        NULL,
        NULL,
    }
};
%}
/* MCSPI init objects */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let instNameCamelCase = common.camelSentence(instance.$name);

MCSPILLD_InitObject g`instNameCamelCase`InitObject[`instance.$name.toUpperCase()`_NUM_CH] =
{
    % let ch_instances = instance.mcspiChannel;
    % for(let ch = 0; ch < ch_instances.length; ch++) {
        % let ch_instance = ch_instances[ch];
        % let ch_config = module_ch.getInstanceConfig(ch_instance);
        % let chMode = "SINGLE";
        % let msMode = "CONTROLLER";
        % if(config.mode == "CONTROLLER") {
        %   chMode = "CONTROLLER";
        % }
        % if(config.mode == "PERIPHERAL") {
        %   chMode = "PERIPHERAL";
        % }
    {
        .inputClkFreq                = `config.inputClkFreq`,
        .intrNum                     = `config.intrNum`,
        .operMode                    = MCSPI_OPER_MODE_`config.intrEnable`,
        .intrPriority                = `config.intrPriority`U,
        .chMode                      = MCSPI_CH_MODE_`chMode`,
        .pinMode                     = MCSPI_PINMODE_`config.pinMode`PIN,
        .initDelay                   = MCSPI_INITDLY_`config.initDelay`,
        .multiWordAccess             = FALSE,
        .msMode                      = MCSPI_MS_MODE_`msMode`,
        .chEnabled                   = {`channelEnable[0]`, `channelEnable[1]`, `channelEnable[2]`, `channelEnable[3]`},
        .chObj[`ch_config.cs`].chCfg = &g`instNameCamelCase`ChCfg[`ch`],
        % if(instance.intrEnable == "DMA") {
        .mcspiDmaHandle                  = (MCSPI_DmaHandle ) &gEdmaConfig[0],
        .chObj[`ch_config.cs`].dmaChCfg  = (MCSPI_DmaChConfig)(&g`instNameCamelCase`DmaChCfg),
        .chObj[`ch_config.cs`].dmaChConfigNum = `ch`,
        %}
        % else {
        .mcspiDmaHandle                    = NULL,
        .chObj[`ch_config.cs`].dmaChCfg    = NULL,
        %}
        .clockP_get                  = ClockP_getTicks,
    % if(config.intrEnable != "POLLED") {
        .transferCallbackFxn         = `config.transferCallbackFxn`,
        .errorCallbackFxn            = `config.errorCallbackFxn`,
    % }
    %else {
        .transferCallbackFxn         = NULL,
        .errorCallbackFxn            = NULL,
    %}
    },
    %}
};
%}
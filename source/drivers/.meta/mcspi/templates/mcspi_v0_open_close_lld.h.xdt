%%{
    let common = system.getScript("/common");
    let module = system.modules['/drivers/mcspi/mcspi'];
%%}

#include <drivers/mcspi/v0/lld/dma/udma/mcspi_dma_udma.h>
#include <drivers/udma.h>

/*
 * MCSPI
 */
/* MCSPI Channel Macros */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let ch_instances = instance.mcspiChannel;
#define `instance.$name.toUpperCase()`_NUM_CH (`ch_instances.length`U)
% }

extern uint32_t gMcspiNumCh[];
extern MCSPILLD_Object     gMcspiObject[];
extern MCSPILLD_Handle     gMcspiHandle[];
extern MCSPI_ChConfig     *gConfigMcspiChCfg[];
extern MCSPILLD_InitObject gMcspiInitObject[];

/* MCSPI Driver Channel Configurations */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let instNameCamelCase = common.camelSentence(instance.$name);
extern MCSPI_ChConfig     g`instNameCamelCase`ChCfg[];
%      if(instance.intrEnable == "DMA") {
extern MCSPI_UdmaChConfig g`instNameCamelCase`DmaChCfg[];
% }
% }

/* MCSPI Driver open/close - can be used by application when Driver_open() and
 * Driver_close() is not used directly and app wants to control the various driver
 * open/close sequences */
void Drivers_mcspiOpen(void);
void Drivers_mcspiClose(void);

%%{
    let common = system.getScript("/common");
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let driverVer = soc.getDriverVer("mcspi");
    let module = system.modules['/drivers/mcspi/mcspi'];
    let mcspiUdmaInstances = [];
    let module_ch = system.modules[`/drivers/mcspi/${driverVer}/mcspi_${driverVer}_channel`];
%%}
/*
 * MCSPI
 */
#include <drivers/mcspi/v0/lld/mcspi_lld.h>

/* MCSPI Driver handles */
MCSPILLD_Object gMcspiObject[CONFIG_MCSPI_NUM_INSTANCES];
MCSPILLD_Handle gMcspiHandle[CONFIG_MCSPI_NUM_INSTANCES];

extern MCSPILLD_InitObject gMcspiInitObject[];

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let instNameCamelCase = common.camelSentence(instance.$name);
extern MCSPI_ChConfig g`instNameCamelCase`ChCfg[];
%}

% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % if(instance.intrEnable == "DMA") {
    %    mcspiUdmaInstances.push(module.getInstanceConfig(instance).udmaDriver);
    % }
%}

%if(mcspiUdmaInstances.length > 0) {
#include <drivers/mcspi/v0/lld/dma/udma/mcspi_dma_udma.h>
#include <drivers/udma.h>

/*
 * Ring parameters
 */
/** \brief Number of ring entries - we can prime this much ADC operations */
#define MCSPI_UDMA_TEST_RING_ENTRIES          (1U)
/** \brief Size (in bytes) of each ring entry (Size of pointer - 64-bit) */
#define MCSPI_UDMA_TEST_RING_ENTRY_SIZE       (sizeof(uint64_t))
/** \brief Total ring memory */
#define MCSPI_UDMA_TEST_RING_MEM_SIZE         (MCSPI_UDMA_TEST_RING_ENTRIES * MCSPI_UDMA_TEST_RING_ENTRY_SIZE)
/** \brief UDMA host mode buffer descriptor memory size. */
#define MCSPI_UDMA_TEST_DESC_SIZE             (sizeof(CSL_UdmapCppi5HMPD))

%  for(let i=0; i < module.$instances.length; i++) {
%      let instance = module.$instances[i];
%      let ch_instances = instance.mcspiChannel;
%      let config = module.getInstanceConfig(instance);
%      let instNameCamelCase = common.camelSentence(instance.$name);
%      if(instance.intrEnable == "DMA") {

/* MCSPI Driver DMA Channel Configurations */
% for(let ch = 0; ch < ch_instances.length; ch++) {
/* MCSPI UDMA TX Channel Objects */
static Udma_ChObject gMcspi`i`UdmaTxChObj`ch`;

/* MCSPI UDMA RX Channel Objects */
static Udma_ChObject gMcspi`i`UdmaRxChObj`ch`;

/**< UDMA TX completion queue object */
static Udma_EventObject        gMcspi`i`UdmaCqTxEventObjCh`ch`;
/**< UDMA RX completion queue object */
static Udma_EventObject        gMcspi`i`UdmaCqRxEventObjCh`ch`;

/* MCSPI UDMA Channel Ring Mem */
static uint8_t gMcspi`i`UdmaRxRingMemCh`ch`[MCSPI_UDMA_TEST_RING_MEM_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
static uint8_t gMcspi`i`UdmaTxRingMemCh`ch`[MCSPI_UDMA_TEST_RING_MEM_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));

/* MCSPI UDMA Channel HPD Mem */
static uint8_t gMcspi`i`UdmaTxHpdMemCh`ch`[MCSPI_UDMA_TEST_DESC_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
static uint8_t gMcspi`i`UdmaRxHpdMemCh`ch`[MCSPI_UDMA_TEST_DESC_SIZE] __attribute__((aligned(UDMA_CACHELINE_ALIGNMENT)));
%}

MCSPI_UdmaChConfig g`instNameCamelCase`DmaChCfg[`instance.$name.toUpperCase()`_NUM_CH] =
{
    % for(let ch = 0; ch < ch_instances.length; ch++) {
    % let ch_instance = ch_instances[ch];
    % let ch_config = module_ch.getInstanceConfig(ch_instance);
    {
        .txChHandle       = &gMcspi`i`UdmaTxChObj`ch`,
        .rxChHandle       = &gMcspi`i`UdmaRxChObj`ch`,
        .cqTxEvtHandle    = &gMcspi`i`UdmaCqTxEventObjCh`ch`,
        .cqRxEvtHandle    = &gMcspi`i`UdmaCqRxEventObjCh`ch`,
        .txHpdMem         = &gMcspi`i`UdmaTxHpdMemCh`ch`,
        .rxHpdMem         = &gMcspi`i`UdmaRxHpdMemCh`ch`,
        .hpdMemSize       = MCSPI_UDMA_TEST_DESC_SIZE,
        .txRingMem        = &gMcspi`i`UdmaTxRingMemCh`ch`,
        .rxRingMem        = &gMcspi`i`UdmaRxRingMemCh`ch`,
        .ringMemSize      = MCSPI_UDMA_TEST_RING_MEM_SIZE,
        .ringElemCnt      = MCSPI_UDMA_TEST_RING_ENTRIES,
        .rxEvtNum         = `config.udmaPdmaChannels[ch_config.cs].rxCh`,
        .txEvtNum         = `config.udmaPdmaChannels[ch_config.cs].txCh`,
        .isOpen           = FALSE,
    },
%}
};
%}
%}
%}

void Drivers_mcspiOpen(void)
{
    int32_t status = MCSPI_STATUS_SUCCESS;

    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let instNameCamelCase = common.camelSentence(instance.$name);
    gMcspiHandle[`instance.$name.toUpperCase()`]             = &gMcspiObject[`instance.$name.toUpperCase()`];
    gMcspiHandle[`instance.$name.toUpperCase()`]->state      = MCSPI_STATE_RESET;
    gMcspiHandle[`instance.$name.toUpperCase()`]->baseAddr   = `config.baseAddr`;
    gMcspiHandle[`instance.$name.toUpperCase()`]->hMcspiInit = &gMcspiInitObject[`instance.$name.toUpperCase()`];

    % if(config.intrEnable == "DMA") {
    status = MCSPI_lld_initDma(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %}
    % else {
    status = MCSPI_lld_init(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %}
    DebugP_assert(status == MCSPI_STATUS_SUCCESS);

    %}
    return;
}

void Drivers_mcspiClose(void)
{
    int32_t status = MCSPI_STATUS_SUCCESS;

    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.intrEnable == "DMA") {
    status = MCSPI_lld_deInitDma(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %} else {
    status = MCSPI_lld_deInit(gMcspiHandle[`instance.$name.toUpperCase()`]);
    %}
    DebugP_assert(status == MCSPI_STATUS_SUCCESS);

    %}

    return;
}

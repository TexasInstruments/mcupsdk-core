%%{
    let module = system.modules['/drivers/ipc/ipc'];
    let instance = module.$static;
    let selfCpuName = module.getSelfIpcCoreName();
    let enabledCpus = module.getEnabledCpus(instance);
    let allEnabledCpus = module.getAllEnabledCpus(instance);
    let enabledRPMessageCpus = module.getEnabledRPMessageCpus(instance);
    let allEnabledRPMessageCpus = module.getAllEnabledRPMessageCpus(instance);
    let implementationVersion = module.getImplementationVersion();
    let firewallGranularity = module.getFirewallGranularity();
    let sharedMemAddress = module.getSharedMemAddress();
%%}
% if ( enabledCpus.length > 0 || instance.enableLinuxIpc === true || instance.enableMailboxIpc === true) {
/*
 * IPC Notify
 */
#include <drivers/ipc_notify.h>
#include <drivers/ipc_notify/`implementationVersion`/ipc_notify_`implementationVersion`.h>

/* this function is called within IpcNotify_init, this function returns core specific IPC config */
void IpcNotify_getConfig(IpcNotify_InterruptConfig **interruptConfig, uint32_t *interruptConfigNum)
{
    /* extern globals that are specific to this core */
    extern IpcNotify_InterruptConfig gIpcNotifyInterruptConfig_`selfCpuName`[];
    extern uint32_t gIpcNotifyInterruptConfigNum_`selfCpuName`;

    *interruptConfig = &gIpcNotifyInterruptConfig_`selfCpuName`[0];
    *interruptConfigNum = gIpcNotifyInterruptConfigNum_`selfCpuName`;
}

% }
% if ( enabledRPMessageCpus.length > 0 || instance.enableLinuxIpc === true ) {
/*
 * IPC RP Message
 */
#include <drivers/ipc_rpmsg.h>

    % if ( enabledRPMessageCpus.length > 0) {
/* Number of CPUs that are enabled for IPC RPMessage */
% let rpmsgNumCores = allEnabledRPMessageCpus.length;
#define IPC_RPMESSAGE_NUM_CORES           (`rpmsgNumCores`U)
/* Number of VRINGs for the numner of CPUs that are enabled for IPC */
% let rpmsgNumVrings = (rpmsgNumCores) * (rpmsgNumCores - 1);
#define IPC_RPMESSAGE_NUM_VRINGS          (IPC_RPMESSAGE_NUM_CORES*(IPC_RPMESSAGE_NUM_CORES-1))
/* Number of a buffers in a VRING, i.e depth of VRING queue */
% let rpmsgNumBuf = instance.vringNumBuf;
#define IPC_RPMESSAGE_NUM_VRING_BUF       (`rpmsgNumBuf`U)
/* Max size of a buffer in a VRING */
% let rpmsgVringMsgSize = instance.vringMsgSize;
#define IPC_RPMESSAGE_MAX_VRING_BUF_SIZE  (`rpmsgVringMsgSize`U)
/* Size of each VRING is :
 *     Number of buffers x ( size of each buffer + space for data structures of one buffer (32B) )
 */
 % let rpmsgVringSize = (rpmsgNumBuf * (rpmsgVringMsgSize + 32)) + 32;
#define IPC_RPMESSAGE_VRING_SIZE          (RPMESSAGE_VRING_SIZE(IPC_RPMESSAGE_NUM_VRING_BUF, IPC_RPMESSAGE_MAX_VRING_BUF_SIZE))
/* Total memory size required for RPMSG VRINGS */
#define IPC_RPMESSAGE_MEMORY_SIZE          (IPC_RPMESSAGE_VRING_SIZE * IPC_RPMESSAGE_NUM_VRINGS)

% if(!instance.enableSafeIpc) {
/* Total Shared memory size used for IPC */
#define IPC_SHARED_MEM_SIZE               (IPC_RPMESSAGE_MEMORY_SIZE)
% } else {
% let ipcTotalSize = 0, firewallSize = 0;
% ipcTotalSize = rpmsgVringSize * (allEnabledRPMessageCpus.length - 1);
% firewallSize = firewallGranularity * Math.trunc(ipcTotalSize / firewallGranularity);
% if((ipcTotalSize < firewallGranularity) || (ipcTotalSize % firewallGranularity != 0)) {
    % firewallSize += firewallGranularity;
% }
/* Total Alignment padding required for IPC memory */
#define IPC_FIREWALL_ALIGN_SIZE           (`firewallSize - ipcTotalSize`U * IPC_RPMESSAGE_NUM_CORES)
/* Total Shared memory size used for IPC */
#define IPC_SHARED_MEM_SIZE               (IPC_RPMESSAGE_MEMORY_SIZE + IPC_FIREWALL_ALIGN_SIZE)
% }

/* VRING base address, all VRINGs are put in the below region.
 *
 * IMPORTANT: Make sure of below,
 * - The section defined below should be placed at the exact same location in memory for all the CPUs
 * - The memory should be marked as non-cached for all the CPUs
 * - The section should be marked as NOLOAD in all the CPUs linker command file
 */
uint8_t gIpcSharedMem[IPC_SHARED_MEM_SIZE] __attribute__((aligned(128), section(".bss.ipc_vring_mem")));

/*
 * Driver assume this memory is init to zero in bootloader as it's ECC protected and
 * needs to be intialized only once and to ensure that only one core has done the
 * mailbox ram initialization before ipc_init. If SBL is not used then Gel does the initialization.
 */
% if(!instance.enableSafeIpc) {
    % let counter = 1, coreString ="", vringCount = 0;
    % for(let coreName1 of allEnabledCpus) {
        % for(let coreName2 of allEnabledCpus) {
            % if(coreName1 != coreName2) {
                % coreString = coreName1.toUpperCase()+"_"+coreName2.toUpperCase();
                % if((allEnabledRPMessageCpus.indexOf(coreName1) > -1) && (allEnabledRPMessageCpus.indexOf(coreName2) > -1)) {
#define IPC_RPMSG_VRING_`coreString`          (uintptr_t)(&gIpcSharedMem[(IPC_SHARED_MEM_SIZE) - (IPC_RPMESSAGE_VRING_SIZE*`vringCount+1`U)])
                    % vringCount++;
                % }
                % counter++;
            % }
        % }
    % }
% } else {
    % let counter = 1, coreString ="", offset = 0, vringCount = 0;
    % let ipcTotalSize = 0, firewallSize = 0;
    % let sharedMemEndAddress = (sharedMemAddress + instance.sharedMemUsed - 1);
    % let endAddress = sharedMemEndAddress;
    % let startAddress = 0;
    % for(let coreName1 of allEnabledCpus) {
/* `coreName1.toUpperCase()` Firewall End Address =  0x`endAddress.toString(16).toUpperCase()` */
        % for(let coreName2 of allEnabledCpus) {
            % if(coreName1 != coreName2) {
                % coreString = coreName1.toUpperCase()+"_"+coreName2.toUpperCase();
                % if((allEnabledRPMessageCpus.indexOf(coreName1) > -1) && (allEnabledRPMessageCpus.indexOf(coreName2) > -1)) {
#define IPC_RPMSG_VRING_`coreString`          (uintptr_t)(&gIpcSharedMem[(IPC_SHARED_MEM_SIZE) - (IPC_RPMESSAGE_VRING_SIZE*`vringCount+1`U) - (`offset`U)])
                    % vringCount++;
                % }
                % counter++;
            % }
        % }
        % ipcTotalSize = rpmsgVringSize * (allEnabledRPMessageCpus.length - 1);
        % firewallSize = firewallGranularity * Math.trunc(ipcTotalSize / firewallGranularity);
        % if((ipcTotalSize < firewallGranularity) || (ipcTotalSize % firewallGranularity != 0)) {
            % firewallSize += firewallGranularity;
        % }
        % offset += firewallSize - ipcTotalSize;
        % startAddress = sharedMemEndAddress - (rpmsgVringSize * vringCount) - offset + 1;
/* `coreName1.toUpperCase()` Firewall Start Address = 0x`startAddress.toString(16).toUpperCase()` */
        % endAddress = startAddress - 1;
    % }
% }
    % }
    % if (instance.enableLinuxIpc === true ) {

/* Buffer used for trace, address and size of this buffer is put in the resource table so that Linux can read it */
extern char gDebugMemLog[];

const RPMessage_ResourceTable gRPMessage_linuxResourceTable __attribute__ ((section (".resource_table"), aligned (4096))) =
{
    {
        1U,         /* we're the first version that implements this */
        2U,         /* number of entries, MUST be 2 */
        { 0U, 0U, } /* reserved, must be zero */
    },
    /* offsets to the entries */
    {
        offsetof(RPMessage_ResourceTable, vdev),
        offsetof(RPMessage_ResourceTable, trace),
    },
    /* vdev entry */
    {
        RPMESSAGE_RSC_TYPE_VDEV, RPMESSAGE_RSC_VIRTIO_ID_RPMSG,
        0U, 1U, 0U, 0U, 0U, 2U, { 0U, 0U },
    },
    /* the two vrings */
    { RPMESSAGE_RSC_VRING_ADDR_ANY, 4096U, 256U, 1U, 0U },
    { RPMESSAGE_RSC_VRING_ADDR_ANY, 4096U, 256U, 2U, 0U },
    {
        (RPMESSAGE_RSC_TRACE_INTS_VER0 | RPMESSAGE_RSC_TYPE_TRACE),
        (uint32_t)gDebugMemLog, DebugP_MEM_LOG_SIZE,
        0, "trace:`selfCpuName`",
    },
};

    % }
% }


void Drivers_sdfmOpen()
{
% let module = system.modules['/drivers/sdfm/sdfm'];
% let common   = system.getScript("/common");
% let nameOfPeripheral = module.peripheralName;
% let device_peripheral = system.getScript(`/drivers/sdfm/soc/sdfm_${common.getSocName()}.syscfg.js`);
%let sd_definition = system.getScript("/drivers/sdfm/v0/sdfm_math.syscfg.js");
% let flag_cevt_1 = false;
% let flag_cevt_2 = false;
%if (module != null)
%{
	% for(let i = 0; i < module.$instances.length; i++) {
	    % let instance = module.$instances[i];
        % let baseName = instance.$name + "_BASE_ADDR";
        %  if(instance["Use_FilterChannel_1"] || instance["Use_FilterChannel_2"] || instance["Use_FilterChannel_3"] || instance["Use_FilterChannel_4"])
        %{
        //
        // Set modulator clock mode
        //
            %	generateCode("SDFM_setupModulatorClock","Chx_Mode", "useInstance", instance, baseName);
        //
	    // Set Input Synchronizer
	    //
		    %	generateCode("SDFM_enableSynchronizer","SDFM_CLOCK_SYNCHRONIZER | SDFM_DATA_SYNCHRONIZER", "", instance, baseName);
        //
	    // Selects clock source for SDFM channels
	    //
		%	generateCode("SDFM_selectClockSource","Chx_SDCLKSEL", "useInstance", instance, baseName);
		%

        %/////////////////////
		%// Comparator Filter
		%/////////////////////
        		%   if(instance["Ch1_ComparatorEnable"] || instance["Ch2_ComparatorEnable"] || instance["Ch3_ComparatorEnable"] || instance["Ch4_ComparatorEnable"])
		%   {
	//
	// Configure comparator filter settings
	//
	    %
		%	}
		%
		%	for(let channel = 1; channel <= 4; channel++)
		%	{
		%	if(instance["Ch" + channel.toString() + "_ComparatorEnable"] && instance["Use_FilterChannel_" + channel.toString()])
		%   {
		%		let filter_HTLZ = (instance["Ch" + channel.toString() + "_HLTZ_Enable"]) ? "SDFM_HTLZ_ENABLE" : "SDFM_HTLZ_DISABLE";
		%
		%		let comparatorSettings = ["Chx_FilterType", "Chx_COSR", "Chx_HLT1", "Chx_LLT1", "Chx_HLT2", "Chx_LLT2", "filter_HTLZ" , "Chx_HLTZ"];
		%		comparatorSettings = generateArguments(comparatorSettings, channel, instance);
		%
	//
	// FILTER`channel` Comparator filter settings
	//
    SDFM_configEnhancedComparator(`baseName`, (`device_peripheral.SDFM_FilterNumber[channel-1].name` | `instance[comparatorSettings[0]]` | SDFM_SET_OSR(`instance[comparatorSettings[1]]`)), SDFM_THRESHOLD(`instance[comparatorSettings[2]]`,`instance[comparatorSettings[3]]`), SDFM_THRESHOLD(`instance[comparatorSettings[4]]`,`instance[comparatorSettings[5]]`), (`filter_HTLZ` | `instance[comparatorSettings[7]]`));
		%
	//
	// CEVT1 settings
	//
    SDFM_selectCompEventSource(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name` , SDFM_COMP_EVENT_1 , `instance["Ch" + channel.toString() + "_CEVT1_SourceSelect"]`);
		%
		%   if(instance["Ch" + channel.toString() + "_Use_CEVT1_Digital_Filter"])
		%   {
            %if(!flag_cevt_1){
    SDFM_CompEventFilterConfig CEVT1;
        %        flag_cevt_1 = true;
        %    }
	//
	// CEVT1 Digital Filter settings
	//
	CEVT1.clkPrescale  = `instance["Ch" + channel.toString() + "_SamplePrescale_CEVT1"]`;
	CEVT1.threshold    = `instance["Ch" + channel.toString() + "_Threshold_CEVT1"]`;
	CEVT1.sampleWindow = `instance["Ch" + channel.toString() + "_SampleWindow_CEVT1"]`;
	SDFM_configCompEventHighFilter(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, &CEVT1);
	SDFM_initCompEventHighFilter(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`);
		%	} //if(instance["Ch" + channel.toString() + "_Use_CEVT1_Digital_Filter"])
		%
	//
	// CEVT2 settings
	//
	SDFM_selectCompEventSource(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name` , SDFM_COMP_EVENT_2 , `instance["Ch" + channel.toString() + "_CEVT2_SourceSelect"]`);
		%
		%   if(instance["Ch" + channel.toString() + "_Use_CEVT2_Digital_Filter"])
		%   {
             %if(!flag_cevt_2){
    SDFM_CompEventFilterConfig CEVT2;
            %    flag_cevt_2 = true;
            %}
	//
	// CEVT2 Digital Filter settings
	//
	CEVT2.clkPrescale  = `instance["Ch" + channel.toString() + "_SamplePrescale_CEVT2"]`;
	CEVT2.threshold    = `instance["Ch" + channel.toString() + "_Threshold_CEVT2"]`;
	CEVT2.sampleWindow = `instance["Ch" + channel.toString() + "_SampleWindow_CEVT2"]`;
	SDFM_configCompEventLowFilter(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, &CEVT2);
	SDFM_initCompEventLowFilter(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`);
		%	} //if(instance["Ch" + channel.toString() + "_Use_CEVT2_Digital_Filter"])
		%   } //if(instance["Ch" + channel.toString() + "_ComparatorEnable"] && instance["Use_FilterChannel_" + channel.toString()])
		%   } //for(let channel = 1; channel <= 4; channel++)
		%
		%//////////////////
		%// Data Filter
		%//////////////////
		%   if(instance["Ch1_DataFilterEnable"] || instance["Ch2_DataFilterEnable"] || instance["Ch3_DataFilterEnable"] || instance["Ch4_DataFilterEnable"])
		%   {
	//
	// Configure data filter settings
	//
		%	}
		%	for(let channel = 1; channel <= 4; channel++)
		%	{
		%	   if(instance["Ch" + channel.toString() + "_DataFilterEnable"] && instance["Use_FilterChannel_" + channel.toString()])
		%	   {
		%	   let Datafilter_status  = (instance["Ch" + channel.toString() + "_DataFilterEnable"]) ? "SDFM_FILTER_ENABLE" : "SDFM_FILTER_DISABLE";
		%	   let shiftValue		  = sd_definition.getShiftvalue(instance["Ch" + channel.toString() + "_FilterType_D"], instance["Ch" + channel.toString() + "_DOSR"], 1 , instance["Ch" + channel.toString() + "_DataFilter_Representation"]);
		%	   let DataFilterSettings   = ["Chx_FilterType_D", "Chx_DOSR", "Datafilter_status", "Chx_DataFilter_Representation", "shiftValue", "Chx_SDFFIL"];
		%
		%      DataFilterSettings = generateArguments(DataFilterSettings, channel, instance);
		%
		%  	  if(instance["Ch" + channel.toString() + "_FIFO_Enable"])
		%  	  {
	SDFM_configDataFilterFIFO(`baseName`, (`device_peripheral.SDFM_FilterNumber[channel-1].name` | `instance[DataFilterSettings[0]]` | SDFM_SET_OSR(`instance[DataFilterSettings[1]]`)), (`Datafilter_status` | `instance[DataFilterSettings[3]]` | SDFM_SHIFT_VALUE(`shiftValue`) | SDFM_SET_FIFO_LEVEL(`instance[DataFilterSettings[5]]`)));
		%     }
		%	  else
		%	  {
	SDFM_configDataFilter(`baseName`, (`device_peripheral.SDFM_FilterNumber[channel-1].name` | `instance[DataFilterSettings[0]]` | SDFM_SET_OSR(`instance[DataFilterSettings[1]]`)), (`Datafilter_status` | `instance[DataFilterSettings[3]]` | SDFM_SHIFT_VALUE(`shiftValue`)));
		%	  }
		%	  }
		%	}//for(let channel = 1; channel <= 4; channel++)
		%
		%   if(instance["Ch1_DataFilterEnable"] || instance["Ch2_DataFilterEnable"] || instance["Ch3_DataFilterEnable"] || instance["Ch4_DataFilterEnable"])
		%   {
	//
	// Main Filter Enable
	//
    SDFM_enableMainFilter(`baseName`);
		%	}
		%
		%//////////////////
		%// SDSYNC
		%//////////////////
		%   if(instance["Ch1_SDSYNC_Enable"] || instance["Ch2_SDSYNC_Enable"] || instance["Ch3_SDSYNC_Enable"] || instance["Ch4_SDSYNC_Enable"])
		%   {
	//
	// Configure SDSYNC (Filter reset from PWM)
	//
		%   }
		%	for(let channel = 1; channel <= 4; channel++)
		%	{
		%     let WTFLG_AUTOCLR_EN = (instance["Ch" + channel.toString() + "_WTSCLREN"])? "SDFM_AUTO_CLEAR_WAIT_FOR_SYNC" : "SDFM_MANUAL_CLEAR_WAIT_FOR_SYNC";
		%     let FIFO_CLREN   = (instance["Ch" + channel.toString() + "_FFSYNCCLREN"])? "SDFM_FIFO_CLEARED_ON_SYNC"  : "SDFM_FIFO_NOT_CLEARED_ON_SYNC";
		%
		%	  if(instance["Ch" + channel.toString() + "_SDSYNC_Enable"])
		%     {
	//
	// FILTER`channel` SDSYNC settings
	//
    SDFM_setPWMSyncSource(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, `instance["Ch" + channel.toString() + "_SDSYNC_source"]`);
	SDFM_enableWaitForSync(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`);
	    %    if(instance["Ch" + channel.toString() + "_WTSCLREN"])
	    %    {
	SDFM_setWaitForSyncClearMode(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_MANUAL_CLEAR_WAIT_FOR_SYNC);
	    %    }
		%    if(instance["Ch" + channel.toString() + "_FFSYNCCLREN"])
		%    {
    SDFM_setFIFOClearOnSyncMode(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_FIFO_CLEARED_ON_SYNC);
	    %    }
		%	 } //if(instance["Ch" + channel.toString() + "_SDSYNC_Enable"])
		%   } //for(let channel = 1; channel <= 4; channel++)

        		% if(instance["useInterrupts"])
		% {
	//
	// Configure SDFM interrupt source
	//
		%	for(var channel = 1; channel <= 4; channel++)
		%   {
		%	   if(instance["Use_FilterChannel_" + channel.toString()])
		%      {
	//
	// FILTER`channel` interrupt settings
	//
		%         //MFIE
		%         if(instance.MFIE.includes("SDFM_FILTER_"+channel))
		%	      {
	SDFM_enableInterrupt(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_MODULATOR_FAILURE_INTERRUPT);
		%	      }
		%
		%
		%         //CEVT1
		%   	  if(instance.CEVT1.includes("SDFM_FILTER_"+channel))
		%         {
	SDFM_enableInterrupt(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_HIGH_LEVEL_THRESHOLD_INTERRUPT);
		%         }
		%         //CEVT2
		%   	  if(instance.CEVT2.includes("SDFM_FILTER_"+channel))
		%         {
	SDFM_enableInterrupt(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_LOW_LEVEL_THRESHOLD_INTERRUPT);
		%         }
		%	    //FIFO condition
		%       if(instance["Ch" + channel.toString() + "_FIFO_Enable"])
		%       {
		%         //FIFO Overflow
		%   	  if(instance.SDFFOVF.includes("SDFM_FILTER_"+channel))
		%         {
	SDFM_enableInterrupt(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_FIFO_OVERFLOW_INTERRUPT);
		%         }
		%         //FIFO Data ready
		%   	  if(instance.SDFFINT.includes("SDFM_FILTER_"+channel))
		%         {
	SDFM_enableInterrupt(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_FIFO_INTERRUPT);
	SDFM_setDataReadyInterruptSource(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_DATA_READY_SOURCE_FIFO);
		%         }
		%       }
		%       else
		%       {
		%         //non-FIFO Data ready
		%   	  if(instance.AE.includes("SDFM_FILTER_"+channel))
		%         {
	SDFM_enableInterrupt(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_DATA_FILTER_ACKNOWLEDGE_INTERRUPT);
	SDFM_setDataReadyInterruptSource(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, SDFM_DATA_READY_SOURCE_DIRECT);
	    %         }
	    %       }
        % } //if(instance["Use_FilterChannel_" + channel.toString()])
		% } //for(var channel = 1; channel <= 4; channel++)
		% //var delaytime = Math.round((1000/instance.SDCLK_freq)*256*4);
		%
		%
		% var delaytime = Math.round(Math.max(instance.Ch1_Latency_DF, instance.Ch2_Latency_DF, instance.Ch3_Latency_DF, instance.Ch4_Latency_DF) + (10/instance["Ch1_SD_modulatorFrequency"]))
		%
	ClockP_usleep(`delaytime`U);
	//
	// Main Interrupt Enable
	//
	SDFM_enableMainInterrupt(`baseName`);
        %
        %} //if(instance["useInterrupts"])
	    %} // //if(instance["Use_FilterChannel_1"] || instance["Use_FilterChannel_2"] || instance["Use_FilterChannel_3"] || instance["Use_FilterChannel_4"])
		%}//for(let i = 0; i < module.$instances.length; i++)
        %}//if (module != null)

}
%
%
%function generateCode(functionName, argument, useinst, instance, baseName)
%{
%	for(let channel = 1; channel <= 4; channel++)
%	{
%	  if(instance["Use_FilterChannel_" + channel.toString()])
%	  {
%	  	if(useinst == "useInstance")
%	  	{
%		   let newStr = argument.replace('x', channel);
	`functionName`(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, `instance[newStr]`);
%	  	}
%	  	else
%	  	{
	`functionName`(`baseName`, `device_peripheral.SDFM_FilterNumber[channel-1].name`, `argument`);
%	  	}
%	  }
%   }
%}
%function generateArguments(argument, channel, instance)
%{
%	  if(instance["Use_FilterChannel_" + channel.toString()])
%	  {
%		var actualArgument = [];
%		for(var i=0; i<argument.length ; i++)
%		{
%			actualArgument = actualArgument.concat(argument[i].replace('x', channel));
%		}
%	  }
% return(actualArgument);
%}
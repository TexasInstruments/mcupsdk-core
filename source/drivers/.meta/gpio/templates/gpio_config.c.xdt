%%{
    let common = system.getScript("/common");
    let module = system.modules['/drivers/gpio/gpio'];
    let soc = system.getScript(`/drivers/gpio/soc/gpio_${common.getSocName()}`);
%%}
/*
 * GPIO
 */

/* ----------- GPIO Direction, Trigger, Interrupt initialization ----------- */

void GPIO_init()
{
     % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(!config.pinIndex.includes("INVALID")){
    uint32_t    baseAddr;
    % break;
    % }
    % }

%   for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if (!config.baseAddr.includes("undefined") && !config.pinIndex.includes("INVALID")){
    /* Instance `i` */
    /* Get address after translation translate */
    baseAddr = (uint32_t) AddrTranslateP_getLocalAddr(`instance.$name.toUpperCase()`_BASE_ADDR);
    %if(instance.pinDir == "OUTPUT"){
        %if(instance.defaultValue == "1"){
    GPIO_pinWriteHigh(baseAddr, `instance.$name.toUpperCase()`_PIN);
        %}
        %else{
    GPIO_pinWriteLow(baseAddr, `instance.$name.toUpperCase()`_PIN);
        %}
    %}

    GPIO_setDirMode(baseAddr, `instance.$name.toUpperCase()`_PIN, `instance.$name.toUpperCase()`_DIR);
        % if(config.trigType != "NONE"){
    GPIO_setTrigType(baseAddr, `instance.$name.toUpperCase()`_PIN, `instance.$name.toUpperCase()`_TRIG_TYPE);
        % }
        % if(config.enableIntr){
    GPIO_bankIntrEnable(baseAddr, GPIO_GET_BANK_INDEX(`instance.$name.toUpperCase()`_PIN));
        % }
    % }
  %}
}

%for(let i = 0; i < module.$instances.length; i++) {
   % let instance = module.$instances[i];
   % let config = module.getInstanceConfig(instance);
%if(config.enableIntr && common.isSciClientSupported()){
 /*
 * Board info
 */
/* This is based on DMSC board config and core */
%if(config.routerId === 'MCU_M4FSS0_CORE0_NVIC_MCU_MCU') {
/* On M4F, interrupt number as specified in TRM is input to the NVIC but from M4 point of view there are 16 internal interrupts
 * and then the NVIC input interrupts start, hence we need to add +16 to the value specified by TRM */
#define BOARD_BUTTON_GPIO_INTR_NUM      (CSLR_`config.routerId`_GPIOMUX_INTROUTER0_OUTP_`config.intrOut` + 16u)
%} else if(common.getSocName() === "am65x"){
#define BOARD_BUTTON_GPIO_INTR_NUM      (CSL_`config.routerId`_GPIOMUX_INTR0_OUTP_`config.intrOut`)
% } else {
#define BOARD_BUTTON_GPIO_INTR_NUM      (CSLR_`config.routerId`_GPIOMUX_INTROUTER0_OUTP_`config.intrOut`)
%}

#define BOARD_BUTTON_GPIO_SWITCH_NUM    (5)

/** \brief bank interrupt source index base */
#define TISCI_BANK_SRC_IDX_BASE_WKUP_GPIO0  (128U)
#define TISCI_BANK_SRC_IDX_BASE_GPIO0       (90U)
#define TISCI_BANK_SRC_IDX_BASE_GPIO1       (90U)
#define TISCI_BANK_SRC_IDX_BASE_MCU_GPIO0   (30U)


static void Sciclient_gpioIrqSet(void);
static void Sciclient_gpioIrqRelease(void);


void Board_gpioInit(void)
{
    Sciclient_gpioIrqSet();
}

void Board_gpioDeinit(void)
{
    Sciclient_gpioIrqRelease();
}

uint32_t Board_getGpioButtonIntrNum(void)
{
    return (BOARD_BUTTON_GPIO_INTR_NUM);
}

uint32_t Board_getGpioButtonSwitchNum(void)
{
    return (BOARD_BUTTON_GPIO_SWITCH_NUM);
}

static void Sciclient_gpioIrqSet(void)
{
    int32_t                             retVal;
    struct tisci_msg_rm_irq_set_req     rmIrqReq;
    struct tisci_msg_rm_irq_set_resp    rmIrqResp;
%for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.enableIntr){
    rmIrqReq.valid_params           = 0U;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_ID_VALID;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID;
    rmIrqReq.global_event           = 0U;
    % if (config.moduleIndex !== undefined){
    rmIrqReq.src_id                 = TISCI_DEV_`config.moduleIndex`;
    % if ( config.pinIndex !== "INVALID" ){
    rmIrqReq.src_index              = TISCI_BANK_SRC_IDX_BASE_`config.moduleIndex` + GPIO_GET_BANK_INDEX(`config.pinIndex`);
    %}
    %}
    rmIrqReq.dst_id                 = TISCI_DEV_`config.coreId`;
    % if(common.getSocName() === "am65x"){
    rmIrqReq.dst_host_irq           = CSL_`config.routerId`_GPIOMUX_INTR0_OUTP_`config.intrOut`;
    % } else {
    rmIrqReq.dst_host_irq           = CSLR_`config.routerId`_GPIOMUX_INTROUTER0_OUTP_`config.intrOut`;
    % }
    rmIrqReq.ia_id                  = 0U;
    rmIrqReq.vint                   = 0U;
    rmIrqReq.vint_status_bit_index  = 0U;
    rmIrqReq.secondary_host         = TISCI_MSG_VALUE_RM_UNUSED_SECONDARY_HOST;

    retVal = Sciclient_rmIrqSet(&rmIrqReq, &rmIrqResp, SystemP_WAIT_FOREVER);
    if(0 != retVal)
    {
        DebugP_log("[Error] Sciclient event config failed!!!\r\n");
        DebugP_assert(FALSE);
    }
    % }
    % }
    return;
}

static void Sciclient_gpioIrqRelease(void)
{
    int32_t                             retVal;
    struct tisci_msg_rm_irq_release_req rmIrqReq;
%for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.enableIntr){
    rmIrqReq.valid_params           = 0U;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_ID_VALID;
    rmIrqReq.valid_params          |= TISCI_MSG_VALUE_RM_DST_HOST_IRQ_VALID;
    rmIrqReq.global_event           = 0U;
     % if (config.moduleIndex !== undefined){
    rmIrqReq.src_id                 = TISCI_DEV_`config.moduleIndex`;
    % if ( config.pinIndex !== "INVALID" ){
    rmIrqReq.src_index              = TISCI_BANK_SRC_IDX_BASE_`config.moduleIndex` + GPIO_GET_BANK_INDEX(`config.pinIndex`);
    %}
    %}
    rmIrqReq.dst_id                 = TISCI_DEV_`config.coreId`;
    % if(common.getSocName() === "am65x"){
    rmIrqReq.dst_host_irq           = CSL_`config.routerId`_GPIOMUX_INTR0_OUTP_`config.intrOut`;
    % } else {
    rmIrqReq.dst_host_irq           = CSLR_`config.routerId`_GPIOMUX_INTROUTER0_OUTP_`config.intrOut`;
    % }
    rmIrqReq.ia_id                  = 0U;
    rmIrqReq.vint                   = 0U;
    rmIrqReq.vint_status_bit_index  = 0U;
    rmIrqReq.secondary_host         = TISCI_MSG_VALUE_RM_UNUSED_SECONDARY_HOST;

    retVal = Sciclient_rmIrqRelease(&rmIrqReq, SystemP_WAIT_FOREVER);
    if(0 != retVal)
    {
        DebugP_log("[Error] Sciclient event reset failed!!!\r\n");
        DebugP_assert(FALSE);
    }
    % }
    % }
    return;
}
% break;
% }
% }

/* ----------- GPIO Interrupt de-initialization ----------- */
void GPIO_deinit()
{
    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.enableIntr && !config.pinIndex.includes("INVALID")){
    uint32_t    baseAddr;
    % break;
    % }
    % }

    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if (!config.baseAddr.includes("undefined") && !config.pinIndex.includes("INVALID")){
    % if(config.enableIntr){
    /* Unregister interrupt Instance `i`*/
    baseAddr = (uint32_t) AddrTranslateP_getLocalAddr(`instance.$name.toUpperCase()`_BASE_ADDR);
    GPIO_bankIntrDisable(baseAddr, GPIO_GET_BANK_INDEX(`instance.$name.toUpperCase()`_PIN));
    GPIO_setTrigType(baseAddr, `instance.$name.toUpperCase()`_PIN, GPIO_TRIG_TYPE_NONE);
    GPIO_clearIntrStatus(baseAddr, `instance.$name.toUpperCase()`_PIN);
    % }
    %}
    % }
}

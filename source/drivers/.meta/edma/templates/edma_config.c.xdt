%%{
    let common = system.getScript("/common");
    let module = system.modules['/drivers/edma/edma'];
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let driverVer = soc.getDriverVer("edma");
    let module_rm = system.modules[`/drivers/edma/${driverVer}/edma_${driverVer}_rm`];
%%}
/*
 * EDMA
 */
/* EDMA atrributes */
static EDMA_Attrs gEdmaAttrs[CONFIG_EDMA_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let ownDmaChMask = [0,0,0,0];
    % let ownQdmaMask = 0;
    % let ownTccMask = [0,0,0,0];
    % let ownParamMask = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    % let reservedDmaChMask = [0,0,0,0];
    % let rm_instances;
    % let config = module.getInstanceConfig(instance);
    {
        % if (instance.enableOwnDmaChannelConfig == true) {
        % rm_instances = instance.edmaRmDmaCh;
        % for(let rm = 0; rm < rm_instances.length; rm++) {
            % let rm_instance = rm_instances[rm];
            % if(rm_instance.resourceType == "ownDmaCh") {
                % let curStartPos = rm_instance.startIndex;
                % let index    = Math.trunc(curStartPos / 16);
                % let curEndPos = 0;
                % if (16 * index + 15 <= rm_instance.endIndex) {
                    % curEndPos = 16 * index + 15;
                % }
                % else {
                    % curEndPos = rm_instance.endIndex;
                % }
                % do {
                    % let startMask = ((1<<(curStartPos % 16)) - 1);
                    % let endMask   = ((1<<((curEndPos   % 16) + 1)) - 1);
                    % ownDmaChMask[index] =  ownDmaChMask[index] | ((endMask) & (~startMask));
                    % curStartPos = curEndPos + 1;
                    % curEndPos += 16;
                    % index++;
                    % if (curEndPos > rm_instance.endIndex) {
                        % curEndPos = rm_instance.endIndex;
                    % }
                % } while (curStartPos <= rm_instance.endIndex);
            % }
        % }
        % }
        % if (instance.enableOwnTccConfig == true) {
        % rm_instances = instance.edmaRmTcc;
        % for(let rm = 0; rm < rm_instances.length; rm++) {
            % let rm_instance = rm_instances[rm];
            % if(rm_instance.resourceType == "ownTcc") {
                % let curStartPos = rm_instance.startIndex;
                % let index    = Math.trunc(curStartPos / 16);
                % let curEndPos = 0;
                % if (16 * index + 15 <= rm_instance.endIndex) {
                    % curEndPos = 16 * index + 15;
                % }
                % else {
                    % curEndPos = rm_instance.endIndex;
                % }
                % do {
                    % let startMask = ((1<<(curStartPos % 16)) - 1);
                    % let endMask   = ((1<<((curEndPos   % 16) + 1)) - 1);
                    % ownTccMask[index] =  ownTccMask[index] | ((endMask) & (~startMask));
                    % curStartPos = curEndPos + 1;
                    % curEndPos += 16;
                    % index++;
                    % if (curEndPos > rm_instance.endIndex) {
                        % curEndPos = rm_instance.endIndex;
                    % }
                % } while (curStartPos <= rm_instance.endIndex);
            % }
        % }
        % }
        % if (instance.enableOwnParamConfig == true) {
        % rm_instances = instance.edmaRmParam;
        % for(let rm = 0; rm < rm_instances.length; rm++) {
            % let rm_instance = rm_instances[rm];
            % if(rm_instance.resourceType == "ownParam") {
                % let curStartPos = rm_instance.startIndex;
                % let index    = Math.trunc(curStartPos / 16);
                % let curEndPos = 0;
                % if (16 * index + 15 <= rm_instance.endIndex) {
                    % curEndPos = 16 * index + 15;
                % }
                % else {
                    % curEndPos = rm_instance.endIndex;
                % }
                % do {
                    % let startMask = ((1<<(curStartPos % 16)) - 1);
                    % let endMask   = ((1<<((curEndPos   % 16) + 1)) - 1);
                    % ownParamMask[index] =  ownParamMask[index] | ((endMask) & (~startMask));
                    % curStartPos = curEndPos + 1;
                    % curEndPos += 16;
                    % index++;
                    % if (curEndPos > rm_instance.endIndex) {
                        % curEndPos = rm_instance.endIndex;
                    % }
                % } while (curStartPos <= rm_instance.endIndex);
            % }
        % }
        % }
        % if (instance.enableReservedChannelConfig == true) {
        % rm_instances = instance.edmaRmReservedDmaCh;
        % for(let rm = 0; rm < rm_instances.length; rm++) {
            % let rm_instance = rm_instances[rm];
            % if(rm_instance.resourceType == "reservedDmaCh") {
                % let curStartPos = rm_instance.startIndex;
                % let index    = Math.trunc(curStartPos / 16);
                % let curEndPos = 0;
                % if (16 * index + 15 <= rm_instance.endIndex) {
                    % curEndPos = 16 * index + 15;
                % }
                % else {
                    % curEndPos = rm_instance.endIndex;
                % }
                % do {
                    % let startMask = ((1<<(curStartPos % 16)) - 1);
                    % let endMask   = ((1<<((curEndPos   % 16) + 1)) - 1);
                    % reservedDmaChMask[index] =  reservedDmaChMask[index] | ((endMask) & (~startMask));
                    % curStartPos = curEndPos + 1;
                    % curEndPos += 16;
                    % index++;
                    % if (curEndPos > rm_instance.endIndex) {
                        % curEndPos = rm_instance.endIndex;
                    % }
                % } while (curStartPos <= rm_instance.endIndex);
            % }
        % }
        % }

        % if (instance.enableOwnQdmaChannelConfig == true) {
        % rm_instances = instance.edmaRmQdmaCh;
        % for(let rm = 0; rm < rm_instances.length; rm++) {
            % let rm_instance = rm_instances[rm];
            % if(rm_instance.resourceType == "ownQdmaCh") {
                % let curStartPos = rm_instance.startIndex;
                % let curEndPos = rm_instance.endIndex;
                    % let startMask = ((1<<(curStartPos % 16)) - 1);
                    % let endMask   = ((1<<((curEndPos   % 16) + 1)) - 1);
                    % ownQdmaMask =  ownQdmaMask | ((endMask) & (~startMask));
            % }
        % }
        % }
        .baseAddr           = `config.baseAddr`,
        .compIntrNumber     = `config.compIntrNumber`,
        .intrPriority       = `instance.intrPriority`U,
        .intrAggEnableAddr  = `config.intrAggEnableAddr`,
        .intrAggEnableMask  = 0x1FF & (~(2U << `instance.regionId`)),
        .intrAggStatusAddr  = `config.intrAggStatusAddr`,
        .intrAggClearMask   = (2U << `instance.regionId`),
        .initPrms           =
        {
            .regionId     = `instance.regionId`,
            .queNum       = `instance.queNum`,
            .initParamSet = `instance.initParamSet`,
            .ownResource    =
            {
                .qdmaCh      = 0x`ownQdmaMask.toString(16).toUpperCase().padStart(2,"0")`U,
                % for(let j = 0; j < config.maxDmaChannels / 32; j++) {
                .dmaCh[`j`]    = 0x`ownDmaChMask[2*j+1].toString(16).toUpperCase().padStart(4,"0")``ownDmaChMask[2*j].toString(16).toUpperCase().padStart(4,"0")`U,
                % }
                % for(let j = 0; j < config.maxTcc / 32; j++) {
                .tcc[`j`]      = 0x`ownTccMask[2*j+1].toString(16).toUpperCase().padStart(4,"0")``ownTccMask[2*j].toString(16).toUpperCase().padStart(4,"0")`U,
                % }
                % for(let j = 0; j < config.maxPaRAM / 32; j++) {
                .paramSet[`j`] = 0x`ownParamMask[2*j+1].toString(16).toUpperCase().padStart(4,"0")``ownParamMask[2*j].toString(16).toUpperCase().padStart(4,"0")`U,
                % }
            },
            % for(let j = 0; j < config.maxDmaChannels / 32; j++) {
            .reservedDmaCh[`j`]    = 0x`reservedDmaChMask[2*j+1].toString(16).toUpperCase().padStart(4,"0")``reservedDmaChMask[2*j].toString(16).toUpperCase().padStart(4,"0")`U,
            % }
        },
    },
% }
};

/* EDMA objects - initialized by the driver */
static EDMA_Object gEdmaObjects[CONFIG_EDMA_NUM_INSTANCES];
/* EDMA driver configuration */
EDMA_Config gEdmaConfig[CONFIG_EDMA_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    {
        &gEdmaAttrs[`instance.$name.toUpperCase()`],
        &gEdmaObjects[`instance.$name.toUpperCase()`],
    },
% }
};

uint32_t gEdmaConfigNum = CONFIG_EDMA_NUM_INSTANCES;

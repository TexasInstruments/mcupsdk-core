%%{
    let common = system.getScript("/common");
    let soc = system.getScript(`/drivers/soc/drivers_${common.getSocName()}`);
    let driverVer = soc.getDriverVer("mibspi");
    let module = system.modules['/drivers/mibspi/mibspi'];
    let module_ch = system.modules[`/drivers/mibspi/${driverVer}/mibspi_${driverVer}_channel`];
%%}

/*
 * MIBSPI
 */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.transferMode == "CALLBACK" && config.transferCallbackFxn != "NULL") {
/* MIBSPI Transfer Callback */
void `config.transferCallbackFxn`(MIBSPI_Handle handle, MIBSPI_Transaction *transaction);
    % }
% }

/* MIBSPI Driver handles */
MIBSPI_Handle gMibspiHandle[CONFIG_MIBSPI_NUM_INSTANCES];
/* MIBSPI Driver Open Parameters */
MIBSPI_OpenParams gMibspiOpenParams[CONFIG_MIBSPI_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let transferTimeout = config.transferTimeout;
    % if(transferTimeout == 0xFFFFFFFF) {
    %   transferTimeout = "SystemP_WAIT_FOREVER";
    % }
    % let ch_instances = instance.mibspiChannel;
    {
        .mode                        = MIBSPI_`config.mode`,
        .transferMode                = MIBSPI_MODE_`config.transferMode`,
        .transferTimeout             = `transferTimeout`,
        .transferCallbackFxn         = `config.transferCallbackFxn`,
        .iCountSupport               = `config.iCountSupport.toString(10).toUpperCase()`,
        .dataSize                    = `config.dataSize`U,
        .frameFormat                 = MIBSPI_`config.frameFormat`,
        % if(config.mode == "CONTROLLER") {
        .u.controllerParams.bitRate      = `config.bitRate`,
        .u.controllerParams.t2cDelay     = 0x`config.t2cDelay.toString(16).toUpperCase()`U,
        .u.controllerParams.c2tDelay     = 0x`config.c2tDelay.toString(16).toUpperCase()`U,
        .u.controllerParams.wDelay       = 0x`config.wDelay.toString(16).toUpperCase()`U,
        .u.controllerParams.numPeripherals    = `ch_instances.length`,
        .u.controllerParams.peripheralProf    =
        {
            
            % for(let ch = 0; ch < ch_instances.length; ch++) {
                % let ch_instance = ch_instances[ch];
                % let ch_config = module_ch.getInstanceConfig(ch_instance);
            [`ch`] =    
            {
                .chipSelect         = `ch_config.peripheralCS`,
                .dmaReqLine         = `ch_config.dmaReqLine`,
            % if(ch_instances.length == `1`) {        
                .ramBufLen          = (uint8_t)MIBSPI_RAM_MAX_ELEM, 
            %}else if(ch_instances.length == `2`) {
                .ramBufLen          = (uint8_t)MIBSPI_RAM_MAX_ELEM/2, 
            %}else if(ch_instances.length == `3`) {
                %if(ch == `0`){ 
                .ramBufLen          = (uint8_t)MIBSPI_RAM_MAX_ELEM/2,
                %}else {
                .ramBufLen          = (uint8_t)MIBSPI_RAM_MAX_ELEM/4,
                %}
            %}
            },
        % }
        },
        %}
       % else
       %{
         % let ch_instance = ch_instances[0];
         % let ch_config = module_ch.getInstanceConfig(ch_instance);
        .u.peripheralParams.chipSelect    = `ch_config.peripheralCS`U,    
        .u.peripheralParams.dmaReqLine    = `ch_config.dmaReqLine`U,
       %}
        .pinMode                    = MIBSPI_PINMODE_`config.pinMode`,
        .shiftFormat                = MIBSPI_`config.shiftFormat`,
        .dmaEnable                  = `config.dmaEnable.toString(10).toUpperCase()`,
        %if(config.dmaEnable == true) {
        .edmaInst                   = `instance.edmaConfig.$name`,
        %}
        %else {
        .edmaInst                   = -1,
        %}
        .eccEnable                  = `config.eccEnable.toString(10).toUpperCase()`,
        .csHold                     = `config.csHold.toString(10).toUpperCase()`,
        .txDummyValue               = 0x`config.txDummyValue.toString(16).toUpperCase()`U,
        .compatibilityMode          = `config.compatibilityMode.toString(10).toUpperCase()`,
    },
   %}
};

void Drivers_mibspiOpen(void)
{
    uint32_t instCnt;
    int32_t  status = SystemP_SUCCESS;

    for(instCnt = 0U; instCnt < CONFIG_MIBSPI_NUM_INSTANCES; instCnt++)
    {
        gMibspiHandle[instCnt] = NULL;   /* Init to NULL so that we can exit gracefully */
    }
    
    /* Open all instances */
    for(instCnt = 0U; instCnt < CONFIG_MIBSPI_NUM_INSTANCES; instCnt++)
    {
        gMibspiHandle[instCnt] = MIBSPI_open(instCnt, &gMibspiOpenParams[instCnt]);
        if(NULL == gMibspiHandle[instCnt])
        {
            DebugP_logError("MIBSPI open failed for instance %d !!!\r\n", instCnt);
            status = SystemP_FAILURE;
            break;
        }
    }

    if(SystemP_FAILURE == status)
    {
        Drivers_mibspiClose();   /* Exit gracefully */
    }

    return;
}

void Drivers_mibspiClose(void)
{
    uint32_t instCnt;

    /* Close all instances that are open */
    for(instCnt = 0U; instCnt < CONFIG_MIBSPI_NUM_INSTANCES; instCnt++)
    {
        if(gMibspiHandle[instCnt] != NULL)
        {
            MIBSPI_close(gMibspiHandle[instCnt]);
            gMibspiHandle[instCnt] = NULL;
        }
    }

    return;
}

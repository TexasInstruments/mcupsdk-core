%let module = system.modules['/drivers/adc/adc_sc'];
%let common   = system.getScript("/common");
% var nameOfPeripheral = module.peripheralName;
%
%let tileModule = system.modules['/drivers/adc/v2/adcsafetycheckertile'];
%let aggrModule = system.modules['/drivers/adc/v2/adcsafetycheckeraggr'];
%
%let device_peripheral = system.getScript(`/drivers/adc/soc/adc_${common.getSocName()}.syscfg.js`);
void Drivers_adcSCOpen()
{
%if (aggrModule != null)
%{
    % for(var i = 0; i < aggrModule.$instances.length; i++) {
        % var aggrInstance = aggrModule.$instances[i];
    Drivers_adcSC_aggr`i`_init();
    % }
% }
%if (tileModule != null)
%{
    % for(var i = 0; i < tileModule.$instances.length; i++) {
        % var tileInstance = tileModule.$instances[i];
    Drivers_adcSC_tile`i`_init();
    % }
%}
}

%if (tileModule != null)
%{

    % for(let i = 0; i < tileModule.$instances.length; i++) {
    % let tileInstance = tileModule.$instances[i]
    % var tileBase = tileInstance.$name + "_BASE_ADDR";
    % let config = tileModule.getInstanceConfig(tileInstance)

void Drivers_adcSC_tile`i`_init(){
        % for(var rptrIndex in device_peripheral.ADC_SafetyCheckInst){
                    % var currentRPTR = device_peripheral.ADC_SafetyCheckInst[rptrIndex].name
                    % var rptrNumber = (currentRPTR).replace(/[^0-9]/g,'');
                    % let adcBaseInst = tileInstance["safetycheck"+rptrNumber+"ADC"].replace("_","");
                    % let adcBase = tileInstance["safetycheck"+rptrNumber+"ADCBase"];
                    % if (adcBase === ""){
                        % adcBase = "CSL_CONTROLSS_"+adcBaseInst+"_U_BASE"
                    %}

    //
    // Configures the safety checker result for a selected SOC.
    // ADC Base : `adcBaseInst` Base
    // socNumber : `tileInstance["safetycheck"+rptrNumber+"ResultSelect"].replace("ADC_RESULT","ADC_SOC_NUMBER")`
    // scInput : `tileInstance["safetycheck"+rptrNumber+"inputSource"]`
    ADC_configSOCSafetyCheckerInput(`adcBase`,`tileInstance["safetycheck"+rptrNumber+"ResultSelect"].replace("ADC_RESULT","ADC_SOC_NUMBER")`,`tileInstance["safetycheck"+rptrNumber+"inputSource"]`);
    //
    // Configures the safety checker module.
    // scBase : `tileBase`
    // SafetyCheckerInstant: `rptrNumber`
    // ADCInstant : `tileInstance["safetycheck"+rptrNumber+"ADC"]`
    // adcResultInst : `tileInstance["safetycheck"+rptrNumber+"ResultSelect"]`
    ADC_configureSafetyChecker(`tileBase`, ADC_SAFETY_CHECK`rptrNumber`,`tileInstance["safetycheck"+rptrNumber+"ADC"]`,`tileInstance["safetycheck"+rptrNumber+"ResultSelect"]`);
        %}
    //
	// Configures the tolerance allowed between safety check results.
	// 		scBase 							: `tileBase`
	// 		tolerance   					: `tileInstance["safetyCheckTolerance"]`
	ADC_setSafetyCheckerTolerance(`tileBase`,`tileInstance["safetyCheckTolerance"]`);
		% if(tileInstance.enableSafetychecker){
	//
	// Enables the ADC result safety checker module.
	//
	ADC_enableSafetyChecker(`tileBase`);
		% }
		% else{
	//
	// Disables the ADC result safety checker module.
	//
	ADC_disableSafetyChecker(`tileBase`);
		% }
}
    %}
%}

%if(aggrModule != null){
%	for(var i = 0; i < aggrModule.$instances.length; i++) {
    % let aggrInstance = aggrModule.$instances[i]
    % var aggrBase = aggrInstance.$name + "_BASE_ADDR";
    % let config = aggrModule.getInstanceConfig(aggrInstance)

void Drivers_adcSC_aggr`i`_init(){
		% for (var sftychkr in device_peripheral.ADC_Checker) {
			% for (var chkrslt in device_peripheral.ADC_SafetyCheckResult){
				% var currentchkrslt= device_peripheral.ADC_Checker[sftychkr].name.replace("ADC_","");
				% var currentsftychkr = device_peripheral.ADC_SafetyCheckResult[chkrslt].name.replace("ADC_SAFETY_CHECK_","");
				% var chkrNumber = currentchkrslt.replace(/[^0-9]/g,'');
				% var chkrResult = device_peripheral.ADC_SafetyCheckResult[chkrslt].name;
				% if (aggrInstance.enableInterrupt) {
					% if((aggrInstance.eventInterruptSource).includes(currentchkrslt + currentsftychkr)){
	//
	// Enable Safety Checker `chkrNumber` `currentsftychkr` interrupt
	//
	ADC_enableSafetyCheckInt(`aggrBase`, ADC_SAFETY_CHECKER`chkrNumber`, `chkrResult`);
					% }
				% }
			% }
		% }


		% for(var evntIndex in device_peripheral.ADC_SafetyCheckEvent){
			% var currentEvnt = device_peripheral.ADC_SafetyCheckEvent[evntIndex].name
			% var evntNumber  = (currentEvnt).replace(/[^0-9]/g,'')
			% if((aggrInstance.enableEvent).includes(currentEvnt)){
				% for (var sftychkr in device_peripheral.ADC_Checker) {
					% for (var chkrslt in device_peripheral.ADC_SafetyCheckResult){
					% var currentchkrslt= device_peripheral.ADC_Checker[sftychkr].name.replace("ADC_","");
					% var currentsftychkr = device_peripheral.ADC_SafetyCheckResult[chkrslt].name.replace("ADC_SAFETY_CHECK_","");
					% var chkrNumber = currentchkrslt.replace(/[^0-9]/g,'');
					% var chkrResult = device_peripheral.ADC_SafetyCheckResult[chkrslt].name;
						% if((aggrInstance["chkEvent" + evntNumber + "Source"]).includes(currentchkrslt + currentsftychkr)){
	//
	// Enable Safety Checker `chkrNumber` `currentsftychkr` event `evntNumber`
	//
	ADC_enableSafetyCheckEvt(`aggrBase`, ADC_SAFETY_CHECKER`chkrNumber`, ADC_SAFETY_CHECK_EVENT`evntNumber`, `chkrResult`);
						% }
					% }
				% }
			% }
		% }

}
%	}
%}

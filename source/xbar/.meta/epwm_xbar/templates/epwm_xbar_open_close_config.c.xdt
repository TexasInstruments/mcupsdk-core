void Drivers_epwmXbarOpen()
{
    %%{
        let common = system.getScript("/common");
        let soc = system.getScript(`/xbar/epwm_xbar/soc/epwm_xbar_${common.getSocName()}`);
        let socName = common.getSocName();
        let module = system.modules['/xbar/epwm_xbar/epwm_xbar'];
    %%}
    % let base = "CSL_CONTROLSS_PWMXBAR_U_BASE";
/* EPWM XBAR */
    % let mask = 0;
    % for(let i = 0; i < module.$instances.length; i++) {
        % let instance = module.$instances[i];
        % let config = module.getInstanceConfig(instance);
        % if(config.invertOutput) {
            % mask = mask | (1 << config.name.substr(10));
        % }
        % let grp0mask = "(";
        % let grp1mask = "(";
        % let grp2mask = "(";
        % let grp3mask = "(";
        % let grp4mask = {};
        % let grp5mask = "(";
        % let grp6mask = "(";
        % let grp7mask = "(";
        % let grp8mask = "(";
        % let grp9mask = "(";
        % for(let i=0; i<config.xbarOutput.length; i++) {
            % let group = soc.getOptionList("INTERNAL").find(o => o.name == config.xbarOutput[i]).group;
            % let path = soc.getOptionList("INTERNAL").find(o => o.name == config.xbarOutput[i]).path;
            % if (path.search("<-") != -1) {
                % grp4mask[config.name] = 0;
            % }
            % else if(group == 0) {
                % grp0mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 1) {
                % grp1mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 2) {
                % grp2mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 3) {
                % grp3mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 5) {
                % grp5mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 6) {
                % grp6mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 7) {
                % grp7mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 8) {
                % grp8mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
            % else if(group == 9) {
                % grp9mask += (" EPWM_XBAR_" + config.xbarOutput[i] + " |");
            % }
        % }
        % if(grp0mask.length > 1) {
            % grp0mask = grp0mask.slice(0, -1);
            % grp0mask += ")";
        % }
        % else {
            % grp0mask = 0;
        % }
        % if(grp1mask.length > 1) {
            % grp1mask = grp1mask.slice(0, -1);
            % grp1mask += ")";
        % }
        % else {
            % grp1mask = 0;
        % }
        % if(grp2mask.length > 1) {
            % grp2mask = grp2mask.slice(0, -1);
            % grp2mask += ")";
        % }
        % else {
            % grp2mask = 0;
        % }
        % if(grp3mask.length > 1) {
            % grp3mask = grp3mask.slice(0, -1);
            % grp3mask += ")";
        % }
        % else {
            % grp3mask = 0;
        % }
        % if(grp4mask[config.name] == 0) {
            % grp4mask = "(" + config.name + ")";
        % }
        % else {
            % grp4mask = 0;
        % }
        % if(grp5mask.length > 1) {
            % grp5mask = grp5mask.slice(0, -1);
            % grp5mask += ")";
        % }
        % else {
            % grp5mask = 0;
        % }
        % if(grp6mask.length > 1) {
            % grp6mask = grp6mask.slice(0, -1);
            % grp6mask += ")";
        % }
        % else {
            % grp6mask = 0;
        % }
        % if(grp7mask.length > 1) {
            % grp7mask = grp7mask.slice(0, -1);
            % grp7mask += ")";
        % }
        % else {
            % grp7mask = 0;
        % }
        % if(grp8mask.length > 1) {
            % grp8mask = grp8mask.slice(0, -1);
            % grp8mask += ")";
        % }
        % else {
            % grp8mask = 0;
        % }
        % if (grp9mask.length > 1) {
            % grp9mask = grp9mask.slice(0, -1);
            % grp9mask += ")";
        % }
        % else {
            % grp9mask = 0;
        % }
        % if ( socName === "am263px") {
    SOC_xbarSelectPWMXBarInputSource_ext(`base`, `config.name.substr(10)`, `grp0mask`, `grp1mask`, `grp2mask`, `grp3mask`, `grp4mask`, `grp5mask`, `grp6mask`, `grp7mask`, `grp8mask`, `grp9mask`);
        % }
        % else {
    SOC_xbarSelectPWMXBarInputSource(`base`, `config.name.substr(10)`, `grp0mask`, `grp1mask`, `grp2mask`, `grp3mask`, `grp4mask`, `grp5mask`, `grp6mask`, `grp7mask`, `grp8mask`);
        % }
    % }
    SOC_xbarInvertPWMXBarOutputSignalBeforeLatch(`base`, `mask`);
}
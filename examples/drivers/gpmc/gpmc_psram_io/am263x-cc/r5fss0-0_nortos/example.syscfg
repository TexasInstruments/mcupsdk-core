/**
 * These arguments were used when this file was generated. They will be automatically applied on subsequent loads
 * via the GUI or CLI. Run CLI with '--help' for additional information on how to override these arguments.
 * @cliArgs --device "AM263x_beta" --package "ZCZ" --part "AM263x" --context "r5fss0-0" --product "MCU_PLUS_SDK@07.03.01"
 * @versions {"tool":"1.18.0+3266"}
 */

/**
 * Import the modules used in this configuration.
 */
const psram           = scripting.addModule("/board/psram/psram", {}, false);
const psram1          = psram.addInstance();
const gpio            = scripting.addModule("/drivers/gpio/gpio", {}, false);
const gpio1           = gpio.addInstance();
const debug_log       = scripting.addModule("/kernel/dpl/debug_log");
const mpu_armv7       = scripting.addModule("/kernel/dpl/mpu_armv7", {}, false);
const mpu_armv71      = mpu_armv7.addInstance();
const mpu_armv72      = mpu_armv7.addInstance();
const mpu_armv73      = mpu_armv7.addInstance();
const mpu_armv74      = mpu_armv7.addInstance();
const mpu_armv75      = mpu_armv7.addInstance();
const mpu_armv76      = mpu_armv7.addInstance();
const mpu_armv77      = mpu_armv7.addInstance();
const mpu_armv78      = mpu_armv7.addInstance();
const default_linker  = scripting.addModule("/memory_configurator/default_linker", {}, false);
const default_linker1 = default_linker.addInstance();
const general         = scripting.addModule("/memory_configurator/general", {}, false);
const general1        = general.addInstance();
const region          = scripting.addModule("/memory_configurator/region", {}, false);
const region1         = region.addInstance();
const section         = scripting.addModule("/memory_configurator/section", {}, false);
const section1        = section.addInstance();
const section2        = section.addInstance();
const section3        = section.addInstance();
const section4        = section.addInstance();
const section5        = section.addInstance();
const section6        = section.addInstance();
const section7        = section.addInstance();
const section8        = section.addInstance();
const section9        = section.addInstance();
const section10       = section.addInstance();
const section11       = section.addInstance();
const section12       = section.addInstance();

/**
 * Write custom configuration values to the imported modules.
 */
psram1.$name                                 = "CONFIG_PSRAM0";
psram1.psramDriverIoExpander.$name           = "CONFIG_I2C0";
psram1.psramDriverIoExpander.I2C.$assign     = "I2C2";
psram1.psramDriverIoExpander.I2C.SDA.pu_pd   = "pd";
psram1.psramDriver.$name                     = "CONFIG_GPMC0";
psram1.psramDriver.clockRateDiv              = 4;
psram1.psramDriver.GPMC.$assign              = "GPMC";
psram1.psramDriver.GPMC.GPMC_OEn_REn.pu_pd   = "pu";
psram1.psramDriver.GPMC.GPMC_OEn_REn.$assign = "PR0_PRU1_GPIO5";
psram1.psramDriver.GPMC.GPMC_ADVn_ALE.pu_pd  = "pu";
psram1.psramDriver.GPMC.GPMC_WEn.$assign     = "PR0_PRU1_GPIO8";
psram1.psramDriver.GPMC.GPMC_BE0n_CLE.pu_pd  = "pu";
psram1.psramDriver.GPMC.GPMC_A0.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A1.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A2.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A3.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A4.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A5.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A6.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A7.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A8.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A9.pu_pd        = "pu";
psram1.psramDriver.GPMC.GPMC_A10.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A11.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A12.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A13.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A14.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A15.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A16.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A17.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A18.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A19.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A20.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_A21.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_BE1n.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_CSn0.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_CSn0.$assign    = "PR0_PRU1_GPIO14";
psram1.psramDriver.GPMC.GPMC_AD0.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD1.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD2.pu_pd       = "pd";
psram1.psramDriver.GPMC.GPMC_AD3.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD4.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD5.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD6.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD6.$assign     = "UART1_RXD";
psram1.psramDriver.GPMC.GPMC_AD7.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD7.$assign     = "UART1_TXD";
psram1.psramDriver.GPMC.GPMC_AD8.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD9.pu_pd       = "pu";
psram1.psramDriver.GPMC.GPMC_AD10.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_AD11.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_AD12.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_AD13.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_AD14.pu_pd      = "pu";
psram1.psramDriver.GPMC.GPMC_AD15.pu_pd      = "pu";

gpio1.$name = "CONFIG_GPIO0";

debug_log.enableUartLog            = true;
debug_log.uartLog.$name            = "CONFIG_UART_CONSOLE";
debug_log.uartLog.UART.$assign     = "UART0";
debug_log.uartLog.UART.RXD.$assign = "UART0_RXD";
debug_log.uartLog.UART.TXD.$assign = "UART0_TXD";
debug_log.uartLog.child.$name      = "drivers_uart_v2_uart_v2_template0";

mpu_armv71.$name             = "CONFIG_MPU_REGION0";
mpu_armv71.size              = 31;
mpu_armv71.attributes        = "Device";
mpu_armv71.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv71.allowExecute      = false;

mpu_armv72.$name             = "CONFIG_MPU_REGION1";
mpu_armv72.size              = 15;
mpu_armv72.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv73.$name             = "CONFIG_MPU_REGION2";
mpu_armv73.baseAddr          = 0x41010000;
mpu_armv73.size              = 15;
mpu_armv73.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv74.$name             = "CONFIG_MPU_REGION3";
mpu_armv74.baseAddr          = 0x70000000;
mpu_armv74.size              = 21;
mpu_armv74.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv75.$name             = "CONFIG_MPU_REGION4";
mpu_armv75.baseAddr          = 0x60000000;
mpu_armv75.size              = 28;
mpu_armv75.accessPermissions = "Supervisor RD, User RD";

mpu_armv76.$name       = "CONFIG_MPU_REGION5";
mpu_armv76.baseAddr    = 0x80000000;
mpu_armv76.size        = 31;
mpu_armv76.tex         = 0;
mpu_armv76.isCacheable = false;

mpu_armv77.$name       = "CONFIG_MPU_REGION6";
mpu_armv77.baseAddr    = 0x52200000;
mpu_armv77.size        = 15;
mpu_armv77.attributes  = "CUSTOM";
mpu_armv77.tex         = 0;
mpu_armv77.isCacheable = false;

mpu_armv78.$name        = "CONFIG_MPU_REGIONpsram";
mpu_armv78.baseAddr     = 0x68000000;
mpu_armv78.size         = 27;
mpu_armv78.attributes   = "Device";
mpu_armv78.allowExecute = false;

default_linker1.$name = "memory_configurator_default_linker0";

general1.$name        = "CONFIG_GENERAL0";
general1.linker.$name = "TIARMCLANG0";

region1.$name                                = "MEMORY_REGION_CONFIGURATION0";
region1.memory_region.create(11);
region1.memory_region[0].type                = "TCMA";
region1.memory_region[0].$name               = "R5F_VECS";
region1.memory_region[0].size                = 0x40;
region1.memory_region[0].auto                = false;
region1.memory_region[1].type                = "TCMA";
region1.memory_region[1].$name               = "R5F_TCMA";
region1.memory_region[1].size                = 0x7FC0;
region1.memory_region[2].type                = "TCMB";
region1.memory_region[2].size                = 0x8000;
region1.memory_region[2].$name               = "R5F_TCMB";
region1.memory_region[3].$name               = "SBL";
region1.memory_region[3].auto                = false;
region1.memory_region[3].size                = 0x40000;
region1.memory_region[4].$name               = "OCRAM";
region1.memory_region[4].auto                = false;
region1.memory_region[4].manualStartAddress  = 0x70040000;
region1.memory_region[4].size                = 0x40000;
region1.memory_region[5].type                = "FLASH";
region1.memory_region[5].auto                = false;
region1.memory_region[5].size                = 0x80000;
region1.memory_region[5].$name               = "FLASH";
region1.memory_region[6].$name               = "USER_SHM_MEM";
region1.memory_region[6].auto                = false;
region1.memory_region[6].manualStartAddress  = 0x701D0000;
region1.memory_region[6].size                = 0x4000;
region1.memory_region[6].isShared            = true;
region1.memory_region[6].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[7].$name               = "LOG_SHM_MEM";
region1.memory_region[7].auto                = false;
region1.memory_region[7].manualStartAddress  = 0x701D4000;
region1.memory_region[7].size                = 0x4000;
region1.memory_region[7].isShared            = true;
region1.memory_region[7].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[8].type                = "CUSTOM";
region1.memory_region[8].$name               = "RTOS_NORTOS_IPC_SHM_MEM";
region1.memory_region[8].auto                = false;
region1.memory_region[8].manualStartAddress  = 0x72000000;
region1.memory_region[8].size                = 0x3E80;
region1.memory_region[8].isShared            = true;
region1.memory_region[8].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[9].type                = "CUSTOM";
region1.memory_region[9].$name               = "MAILBOX_HSM";
region1.memory_region[9].auto                = false;
region1.memory_region[9].manualStartAddress  = 0x44000000;
region1.memory_region[9].size                = 0x3CE;
region1.memory_region[9].isShared            = true;
region1.memory_region[9].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[10].type               = "CUSTOM";
region1.memory_region[10].$name              = "MAILBOX_R5F";
region1.memory_region[10].auto               = false;
region1.memory_region[10].manualStartAddress = 0x44000400;
region1.memory_region[10].size               = 0x3CE;
region1.memory_region[10].isShared           = true;
region1.memory_region[10].shared_cores       = ["r5fss0-1","r5fss1-0","r5fss1-1"];

section1.load_memory                  = "R5F_VECS";
section1.group                        = false;
section1.$name                        = "Vector Table";
section1.output_section.create(1);
section1.output_section[0].$name      = ".vectors";
section1.output_section[0].palignment = true;

section2.load_memory                  = "OCRAM";
section2.$name                        = "Text Segments";
section2.output_section.create(5);
section2.output_section[0].$name      = ".text.hwi";
section2.output_section[0].palignment = true;
section2.output_section[1].$name      = ".text.cache";
section2.output_section[1].palignment = true;
section2.output_section[2].$name      = ".text.mpu";
section2.output_section[2].palignment = true;
section2.output_section[3].$name      = ".text.boot";
section2.output_section[3].palignment = true;
section2.output_section[4].$name      = ".text:abort";
section2.output_section[4].palignment = true;

section3.load_memory                  = "OCRAM";
section3.$name                        = "Code and Read-Only Data";
section3.output_section.create(2);
section3.output_section[0].$name      = ".text";
section3.output_section[0].palignment = true;
section3.output_section[1].$name      = ".rodata";
section3.output_section[1].palignment = true;

section4.load_memory                  = "OCRAM";
section4.$name                        = "Data Segment";
section4.output_section.create(1);
section4.output_section[0].$name      = ".data";
section4.output_section[0].palignment = true;

section5.load_memory                             = "OCRAM";
section5.$name                                   = "Memory Segments";
section5.output_section.create(3);
section5.output_section[0].$name                 = ".bss";
section5.output_section[0].output_sections_start = "__BSS_START";
section5.output_section[0].output_sections_end   = "__BSS_END";
section5.output_section[0].palignment            = true;
section5.output_section[1].$name                 = ".sysmem";
section5.output_section[1].palignment            = true;
section5.output_section[2].$name                 = ".stack";
section5.output_section[2].palignment            = true;

section6.load_memory                              = "OCRAM";
section6.$name                                    = "Stack Segments";
section6.output_section.create(5);
section6.output_section[0].$name                  = ".irqstack";
section6.output_section[0].output_sections_start  = "__IRQ_STACK_START";
section6.output_section[0].output_sections_end    = "__IRQ_STACK_END";
section6.output_section[0].input_section.create(1);
section6.output_section[0].input_section[0].$name = ". = . + __IRQ_STACK_SIZE;";
section6.output_section[1].$name                  = ".fiqstack";
section6.output_section[1].output_sections_start  = "__FIQ_STACK_START";
section6.output_section[1].output_sections_end    = "__FIQ_STACK_END";
section6.output_section[1].input_section.create(1);
section6.output_section[1].input_section[0].$name = ". = . + __FIQ_STACK_SIZE;";
section6.output_section[2].$name                  = ".svcstack";
section6.output_section[2].output_sections_start  = "__SVC_STACK_START";
section6.output_section[2].output_sections_end    = "__SVC_STACK_END";
section6.output_section[2].input_section.create(1);
section6.output_section[2].input_section[0].$name = ". = . + __SVC_STACK_SIZE;";
section6.output_section[3].$name                  = ".abortstack";
section6.output_section[3].output_sections_start  = "__ABORT_STACK_START";
section6.output_section[3].output_sections_end    = "__ABORT_STACK_END";
section6.output_section[3].input_section.create(1);
section6.output_section[3].input_section[0].$name = ". = . + __ABORT_STACK_SIZE;";
section6.output_section[4].$name                  = ".undefinedstack";
section6.output_section[4].output_sections_start  = "__UNDEFINED_STACK_START";
section6.output_section[4].output_sections_end    = "__UNDEFINED_STACK_END";
section6.output_section[4].input_section.create(1);
section6.output_section[4].input_section[0].$name = ". = . + __UNDEFINED_STACK_SIZE;";

section7.load_memory                  = "OCRAM";
section7.$name                        = "Initialization and Exception Handling";
section7.output_section.create(3);
section7.output_section[0].$name      = ".ARM.exidx";
section7.output_section[0].palignment = true;
section7.output_section[1].$name      = ".init_array";
section7.output_section[1].palignment = true;
section7.output_section[2].$name      = ".fini_array";
section7.output_section[2].palignment = true;

section8.load_memory                 = "USER_SHM_MEM";
section8.type                        = "NOLOAD";
section8.$name                       = "User Shared Memory";
section8.group                       = false;
section8.output_section.create(1);
section8.output_section[0].$name     = ".bss.user_shared_mem";
section8.output_section[0].alignment = 0;

section9.load_memory                 = "LOG_SHM_MEM";
section9.$name                       = "Log Shared Memory";
section9.group                       = false;
section9.type                        = "NOLOAD";
section9.output_section.create(1);
section9.output_section[0].$name     = ".bss.log_shared_mem";
section9.output_section[0].alignment = 0;

section10.load_memory                 = "RTOS_NORTOS_IPC_SHM_MEM";
section10.type                        = "NOLOAD";
section10.$name                       = "IPC Shared Memory";
section10.group                       = false;
section10.output_section.create(1);
section10.output_section[0].$name     = ".bss.ipc_vring_mem";
section10.output_section[0].alignment = 0;

section11.load_memory                 = "MAILBOX_HSM";
section11.type                        = "NOLOAD";
section11.$name                       = "SIPC HSM Queue Memory";
section11.group                       = false;
section11.output_section.create(1);
section11.output_section[0].$name     = ".bss.sipc_hsm_queue_mem";
section11.output_section[0].alignment = 0;

section12.load_memory                 = "MAILBOX_R5F";
section12.$name                       = "SIPC R5F Queue Memory";
section12.group                       = false;
section12.type                        = "NOLOAD";
section12.output_section.create(1);
section12.output_section[0].$name     = ".bss.sipc_r5f_queue_mem";
section12.output_section[0].alignment = 0;

/**
 * Pinmux solution for unlocked pins/peripherals. This ensures that minor changes to the automatic solver in a future
 * version of the tool will not impact the pinmux you originally saw.  These lines can be completely deleted in order to
 * re-solve from scratch.
 */
psram1.psramDriverIoExpander.I2C.SCL.$suggestSolution  = "UART0_RTSn";
psram1.psramDriverIoExpander.I2C.SDA.$suggestSolution  = "UART0_CTSn";
psram1.psramDriver.GPMC.GPMC_ADVn_ALE.$suggestSolution = "SDFM0_CLK2";
psram1.psramDriver.GPMC.GPMC_BE0n_CLE.$suggestSolution = "PR0_PRU1_GPIO9";
psram1.psramDriver.GPMC.GPMC_A0.$suggestSolution       = "PR0_PRU0_GPIO4";
psram1.psramDriver.GPMC.GPMC_A1.$suggestSolution       = "PR0_PRU0_GPIO0";
psram1.psramDriver.GPMC.GPMC_A2.$suggestSolution       = "PR0_PRU0_GPIO1";
psram1.psramDriver.GPMC.GPMC_A3.$suggestSolution       = "PR0_PRU0_GPIO2";
psram1.psramDriver.GPMC.GPMC_A4.$suggestSolution       = "PR0_PRU0_GPIO3";
psram1.psramDriver.GPMC.GPMC_A5.$suggestSolution       = "PR0_PRU0_GPIO16";
psram1.psramDriver.GPMC.GPMC_A6.$suggestSolution       = "PR0_PRU0_GPIO15";
psram1.psramDriver.GPMC.GPMC_A7.$suggestSolution       = "PR0_PRU0_GPIO11";
psram1.psramDriver.GPMC.GPMC_A8.$suggestSolution       = "PR0_PRU0_GPIO12";
psram1.psramDriver.GPMC.GPMC_A9.$suggestSolution       = "PR0_PRU0_GPIO13";
psram1.psramDriver.GPMC.GPMC_A10.$suggestSolution      = "PR0_PRU0_GPIO14";
psram1.psramDriver.GPMC.GPMC_A11.$suggestSolution      = "PR0_PRU1_GPIO6";
psram1.psramDriver.GPMC.GPMC_A12.$suggestSolution      = "PR0_PRU1_GPIO4";
psram1.psramDriver.GPMC.GPMC_A13.$suggestSolution      = "PR0_PRU1_GPIO0";
psram1.psramDriver.GPMC.GPMC_A14.$suggestSolution      = "PR0_PRU1_GPIO1";
psram1.psramDriver.GPMC.GPMC_A15.$suggestSolution      = "PR0_PRU1_GPIO2";
psram1.psramDriver.GPMC.GPMC_A16.$suggestSolution      = "PR0_PRU1_GPIO3";
psram1.psramDriver.GPMC.GPMC_A17.$suggestSolution      = "PR0_PRU1_GPIO16";
psram1.psramDriver.GPMC.GPMC_A18.$suggestSolution      = "PR0_PRU1_GPIO15";
psram1.psramDriver.GPMC.GPMC_A19.$suggestSolution      = "PR0_PRU1_GPIO11";
psram1.psramDriver.GPMC.GPMC_A20.$suggestSolution      = "PR0_PRU1_GPIO12";
psram1.psramDriver.GPMC.GPMC_A21.$suggestSolution      = "PR0_PRU1_GPIO13";
psram1.psramDriver.GPMC.GPMC_BE1n.$suggestSolution     = "PR0_PRU1_GPIO10";
psram1.psramDriver.GPMC.GPMC_AD0.$suggestSolution      = "EPWM13_A";
psram1.psramDriver.GPMC.GPMC_AD1.$suggestSolution      = "EPWM13_B";
psram1.psramDriver.GPMC.GPMC_AD2.$suggestSolution      = "EPWM14_A";
psram1.psramDriver.GPMC.GPMC_AD3.$suggestSolution      = "EPWM14_B";
psram1.psramDriver.GPMC.GPMC_AD4.$suggestSolution      = "EPWM15_A";
psram1.psramDriver.GPMC.GPMC_AD5.$suggestSolution      = "EPWM15_B";
psram1.psramDriver.GPMC.GPMC_AD8.$suggestSolution      = "MMC_CLK";
psram1.psramDriver.GPMC.GPMC_AD9.$suggestSolution      = "MMC_CMD";
psram1.psramDriver.GPMC.GPMC_AD10.$suggestSolution     = "MMC_DAT0";
psram1.psramDriver.GPMC.GPMC_AD11.$suggestSolution     = "MMC_DAT1";
psram1.psramDriver.GPMC.GPMC_AD12.$suggestSolution     = "MMC_DAT2";
psram1.psramDriver.GPMC.GPMC_AD13.$suggestSolution     = "MMC_DAT3";
psram1.psramDriver.GPMC.GPMC_AD14.$suggestSolution     = "MMC_SDWP";
psram1.psramDriver.GPMC.GPMC_AD15.$suggestSolution     = "MMC_SDCD";
psram1.psramDriver.GPMC.GPMC_WAIT0.$suggestSolution    = "PR0_PRU0_GPIO10";
gpio1.GPIO.$suggestSolution                            = "GPIO0";
gpio1.GPIO.gpioPin.$suggestSolution                    = "QSPI_CSn0";

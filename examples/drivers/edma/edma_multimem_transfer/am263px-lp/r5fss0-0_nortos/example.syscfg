/**
 * These arguments were used when this file was generated. They will be automatically applied on subsequent loads
 * via the GUI or CLI. Run CLI with '--help' for additional information on how to override these arguments.
 * @cliArgs --device "AM263Px" --package "ZCZ_S" --part "AM263P2" --context "r5fss0-0" --product "MCU_PLUS_SDK@07.03.01"
 * @versions {"tool":"1.15.0+2826"}
 */

/**
 * Import the modules used in this configuration.
 */
const general    = scripting.addModule("/memory_configurator/general", {}, false);
const general1   = general.addInstance();
const region     = scripting.addModule("/memory_configurator/region", {}, false);
const region1    = region.addInstance();
const section    = scripting.addModule("/memory_configurator/section", {}, false);
const section1   = section.addInstance();
const section2   = section.addInstance();
const section3   = section.addInstance();
const section4   = section.addInstance();
const section5   = section.addInstance();
const section6   = section.addInstance();
const section7   = section.addInstance();
const section8   = section.addInstance();
const section9   = section.addInstance();
const section10  = section.addInstance();
const section11  = section.addInstance();
const section12  = section.addInstance();
const epwm         = scripting.addModule("/drivers/epwm/epwm", {}, false);
const epwm1        = epwm.addInstance();
const epwm2        = epwm.addInstance();
const epwm3        = epwm.addInstance();
const epwm4        = epwm.addInstance();
const epwm5        = epwm.addInstance();
const epwm6        = epwm.addInstance();
const epwm7        = epwm.addInstance();
const debug_log    = scripting.addModule("/kernel/dpl/debug_log");
const mpu_armv7    = scripting.addModule("/kernel/dpl/mpu_armv7", {}, false);
const mpu_armv71   = mpu_armv7.addInstance();
const mpu_armv72   = mpu_armv7.addInstance();
const mpu_armv73   = mpu_armv7.addInstance();
const mpu_armv74   = mpu_armv7.addInstance();
const epwm_xbar    = scripting.addModule("/xbar/epwm_xbar/epwm_xbar", {}, false);
const epwm_xbar1   = epwm_xbar.addInstance();
const icl_xbar     = scripting.addModule("/xbar/icl_xbar/icl_xbar", {}, false);
const icl_xbar1    = icl_xbar.addInstance();
const input_xbar   = scripting.addModule("/xbar/input_xbar/input_xbar", {}, false);
const input_xbar1  = input_xbar.addInstance();
const input_xbar2  = input_xbar.addInstance();
const int_xbar     = scripting.addModule("/xbar/int_xbar/int_xbar", {}, false);
const int_xbar1    = int_xbar.addInstance();
const int_xbar2    = int_xbar.addInstance();
const int_xbar3    = int_xbar.addInstance();
const output_xbar  = scripting.addModule("/xbar/output_xbar/output_xbar", {}, false);
const output_xbar1 = output_xbar.addInstance();
const output_xbar2 = output_xbar.addInstance();

/**
 * Write custom configuration values to the imported modules.
 */
general1.$name        = "CONFIG_GENERAL0";
general1.linker.$name = "TIARMCLANG0";

region1.$name                                = "MEMORY_REGION_CONFIGURATION";
region1.memory_region.create(12);
region1.memory_region[0].type                = "TCMA";
region1.memory_region[0].$name               = "R5F_VECS";
region1.memory_region[0].auto                = false;
region1.memory_region[0].size                = 0x40;

region1.memory_region[1].type                = "TCMA";
region1.memory_region[1].$name               = "R5F_TCMA";
region1.memory_region[1].size                = 0x7FC0;

region1.memory_region[2].type                = "TCMB";
region1.memory_region[2].$name               = "R5F_TCMB";
region1.memory_region[2].size                = 0x8000;

region1.memory_region[3].$name               = "SBL";
region1.memory_region[3].size                = 0x40000;

region1.memory_region[4].$name               = "OCRAM";
region1.memory_region[4].auto                = false;
region1.memory_region[4].manualStartAddress  = 0x70040000;
region1.memory_region[4].size                = 0x40000;

region1.memory_region[5].type                = "FLASH";
region1.memory_region[5].auto                = false;
region1.memory_region[5].manualStartAddress  = 0x60100000;
region1.memory_region[5].size                = 0x80000;
region1.memory_region[5].$name               = "FLASH";

region1.memory_region[6].$name               = "USER_SHM_MEM";
region1.memory_region[6].auto                = false;
region1.memory_region[6].manualStartAddress  = 0x701D0000;
region1.memory_region[6].size                = 0x4000;
region1.memory_region[6].isShared            = true;
region1.memory_region[6].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];

region1.memory_region[7].$name               = "LOG_SHM_MEM";
region1.memory_region[7].size                = 0x4000;
region1.memory_region[7].isShared            = true;
region1.memory_region[7].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];

region1.memory_region[8].type                = "CUSTOM";
region1.memory_region[8].$name               = "RTOS_NORTOS_IPC_SHM_MEM";
region1.memory_region[8].auto                = false;
region1.memory_region[8].manualStartAddress  = 0x72000000;
region1.memory_region[8].size                = 0x3E80;
region1.memory_region[8].isShared            = true;
region1.memory_region[8].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];

region1.memory_region[9].type                = "CUSTOM";
region1.memory_region[9].$name               = "MAILBOX_HSM";
region1.memory_region[9].auto                = false;
region1.memory_region[9].manualStartAddress  = 0x44000000;
region1.memory_region[9].size                = 0x3CE;
region1.memory_region[9].isShared            = true;
region1.memory_region[9].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];

region1.memory_region[10].type               = "CUSTOM";
region1.memory_region[10].$name              = "MAILBOX_R5F";
region1.memory_region[10].auto               = false;
region1.memory_region[10].manualStartAddress = 0x44000400;
region1.memory_region[10].size               = 0x3CE;
region1.memory_region[10].isShared           = true;
region1.memory_region[10].shared_cores       = ["r5fss0-1","r5fss1-0","r5fss1-1"];

region1.memory_region[11].type               = "CUSTOM";
region1.memory_region[11].$name              = "MSS_CTRL";
region1.memory_region[11].auto               = false;
region1.memory_region[11].manualStartAddress = 0x50D00000;
region1.memory_region[11].size               = 0x4000;
region1.memory_region[11].isShared           = true;
region1.memory_region[11].shared_cores       = ["r5fss0-1","r5fss1-0","r5fss1-1"];

section1.load_memory             = ["R5F_VECS"];
section1.group                   = false;
section1.$name                   = "Vector Table";
section1.output_section.create(1);
section1.output_section[0].$name = ".vectors";

section2.load_memory             = ["OCRAM"];
section2.$name                   = "Text Segments";
section2.output_section.create(5);
section2.output_section[0].$name = ".text.hwi";
section2.output_section[1].$name = ".text.cache";
section2.output_section[2].$name = ".text.mpu";
section2.output_section[3].$name = ".text.boot";
section2.output_section[4].$name = ".text:abort";

section3.load_memory             = ["OCRAM"];
section3.$name                   = "Code and Read-Only Data";
section3.output_section.create(2);
section3.output_section[0].$name = ".text";
section3.output_section[1].$name = ".rodata";

section4.load_memory             = ["OCRAM"];
section4.$name                   = "Data Segment";
section4.output_section.create(1);
section4.output_section[0].$name = ".data";

section5.load_memory                             = ["OCRAM"];
section5.$name                                   = "Memory Segments";
section5.output_section.create(3);
section5.output_section[0].$name                 = ".bss";
section5.output_section[0].output_sections_start = "__BSS_START";
section5.output_section[0].output_sections_end   = "__BSS_END";
section5.output_section[1].$name                 = ".sysmem";
section5.output_section[2].$name                 = ".stack";

section6.load_memory                              = ["OCRAM"];
section6.$name                                    = "Stack Segments";
section6.output_section.create(5);
section6.output_section[0].$name                  = ".irqstack";
section6.output_section[0].output_sections_start  = "__IRQ_STACK_START";
section6.output_section[0].output_sections_end    = "__IRQ_STACK_END";
section6.output_section[0].input_section.create(1);
section6.output_section[0].input_section[0].$name = ". = . + __IRQ_STACK_SIZE";
section6.output_section[1].$name                  = ".fiqstack";
section6.output_section[1].output_sections_start  = "__FIQ_STACK_START";
section6.output_section[1].output_sections_end    = "__FIQ_STACK_END";
section6.output_section[1].input_section.create(1);
section6.output_section[1].input_section[0].$name = ". = . + __FIQ_STACK_SIZE";
section6.output_section[2].$name                  = ".svcstack";
section6.output_section[2].output_sections_start  = "__SVC_STACK_START";
section6.output_section[2].output_sections_end    = "__SVC_STACK_END";
section6.output_section[2].input_section.create(1);
section6.output_section[2].input_section[0].$name = ". = . + __SVC_STACK_SIZE";
section6.output_section[3].$name                  = ".abortstack";
section6.output_section[3].output_sections_start  = "__ABORT_STACK_START";
section6.output_section[3].output_sections_end    = "__ABORT_STACK_END";
section6.output_section[3].input_section.create(1);
section6.output_section[3].input_section[0].$name = ". = . + __ABORT_STACK_SIZE";
section6.output_section[4].$name                  = ".undefinedstack";
section6.output_section[4].output_sections_start  = "__UNDEFINED_STACK_START";
section6.output_section[4].output_sections_end    = "__UNDEFINED_STACK_END";
section6.output_section[4].input_section.create(1);
section6.output_section[4].input_section[0].$name = ". = . + __UNDEFINED_STACK_SIZE";

section7.load_memory             = ["OCRAM"];
section7.$name                   = "Initialization and Exception Handling";
section7.output_section.create(3);
section7.output_section[0].$name = ".ARM.exidx";
section7.output_section[1].$name = ".init_array";
section7.output_section[2].$name = ".fini_array";

section8.load_memory             = ["USER_SHM_MEM"];
section8.type                    = "NOLOAD";
section8.$name                   = "User Shared Memory";
section8.group                   = false;
section8.output_section.create(1);
section8.output_section[0].$name = ".bss.user_shared_mem";

section9.load_memory             = ["LOG_SHM_MEM"];
section9.$name                   = "Log Shared Memory";
section9.group                   = false;
section9.output_section.create(1);
section9.output_section[0].$name = ".bss.log_shared_mem";

section10.load_memory             = ["RTOS_NORTOS_IPC_SHM_MEM"];
section10.type                    = "NOLOAD";
section10.$name                   = "IPC Shared Memory";
section10.group                   = false;
section10.output_section.create(1);
section10.output_section[0].$name = ".bss.ipc_vring_mem";

section11.load_memory             = ["MAILBOX_HSM"];
section11.type                    = "NOLOAD";
section11.$name                   = "SIPC HSM Queue Memory";
section11.group                   = false;
section11.output_section.create(1);
section11.output_section[0].$name = ".bss.sipc_hsm_queue_mem";

section12.load_memory             = ["MAILBOX_R5F"];
section12.$name                   = "SIPC R5F Queue Memory";
section12.group                   = false;
section12.output_section.create(1);
section12.output_section[0].$name = ".bss.sipc_r5f_queue_mem";
epwm1.epwmTimebase_counterMode                       = "EPWM_COUNTER_MODE_UP";
epwm1.epwmTimebase_period                            = 24000;
epwm1.epwmCounterCompare_cmpA                        = 10000;
epwm1.epwmCounterCompare_cmpB                        = 22000;
epwm1.epwmEventTrigger_enableInterrupt               = true;
epwm1.$name                                          = "TripH_source";
epwm1.epwmEventTrigger_interruptEventCountInitEnable = true;
epwm1.epwmEventTrigger_interruptEventCount           = "5";
epwm1.epwmICL_useICLB                                = true;
epwm1.epwmICLB_LUTDEC_3                              = "1";
epwm1.epwmICLB_LUTDEC_4                              = "1";
epwm1.epwmICLB_LUTDEC_5                              = "1";
epwm1.epwmICLB_LUTDEC_6                              = "1";
epwm1.epwmICLB_LUTDEC_7                              = "1";
epwm1.epwmICLB_LUTDEC_2                              = "1";
epwm1.EPWM.$assign                                   = "EPWM0";

epwm2.$name                                          = "TripL_source";
epwm2.epwmTimebase_counterMode                       = "EPWM_COUNTER_MODE_UP";
epwm2.epwmTimebase_period                            = 24000;
epwm2.epwmCounterCompare_cmpA                        = 2000;
epwm2.epwmCounterCompare_cmpB                        = 3000;
epwm2.epwmEventTrigger_enableInterrupt               = true;
epwm2.epwmEventTrigger_interruptEventCountInitEnable = true;
epwm2.epwmEventTrigger_interruptEventCount           = "10";
epwm2.EPWM.$assign                                   = "EPWM1";
epwm2.EPWM.B.$used                                   = false;

epwm3.$name                                                    = "CONFIG_EPWM2";
epwm3.epwmDE_enableMode                                        = true;
epwm3.epwmTimebase_phaseEnable                                 = true;
epwm3.epwmTimebase_period                                      = 24000;
epwm3.epwmTimebase_counterMode                                 = "EPWM_COUNTER_MODE_UP";
epwm3.epwmDE_TripSelA                                          = "EPWM_DE_TRIPH";
epwm3.epwmDE_TripL                                             = "EPWM_DE_TRIP_SRC_INPUTXBAR_OUT1";
epwm3.epwmCounterCompare_cmpA                                  = 1500;
epwm3.epwmCounterCompare_cmpB                                  = 8000;
epwm3.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPA = "EPWM_AQ_OUTPUT_HIGH";
epwm3.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_LOW";
epwm3.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_HIGH";
epwm3.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_PERIOD  = "EPWM_AQ_OUTPUT_LOW";
epwm3.epwmTimebase_syncInPulseSource                           = "EPWM_SYNC_IN_PULSE_SRC_SYNCOUT_EPWM4";
epwm3.EPWM.$assign                                             = "EPWM2";

epwm4.$name                                                    = "CONFIG_EPWM3";
epwm4.epwmTimebase_period                                      = 24000;
epwm4.epwmTimebase_counterMode                                 = "EPWM_COUNTER_MODE_UP";
epwm4.epwmDE_enableMode                                        = true;
epwm4.epwmDE_TripL                                             = "EPWM_DE_TRIP_SRC_INPUTXBAR_OUT1";
epwm4.epwmDE_selectMode                                        = "EPWM_DIODE_EMULATION_OST";
epwm4.epwmDE_TripSelA                                          = "EPWM_DE_TRIPH";
epwm4.epwmTimebase_phaseEnable                                 = true;
epwm4.epwmCounterCompare_cmpA                                  = 1500;
epwm4.epwmCounterCompare_cmpB                                  = 8000;
epwm4.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPA = "EPWM_AQ_OUTPUT_HIGH";
epwm4.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_LOW";
epwm4.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_HIGH";
epwm4.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_PERIOD  = "EPWM_AQ_OUTPUT_LOW";
epwm4.epwmTimebase_syncInPulseSource                           = "EPWM_SYNC_IN_PULSE_SRC_SYNCOUT_EPWM4";
epwm4.EPWM.$assign                                             = "EPWM3";

epwm5.epwmTimebase_counterMode                                 = "EPWM_COUNTER_MODE_UP";
epwm5.epwmTimebase_phaseEnable                                 = true;
epwm5.epwmCounterCompare_cmpA                                  = 1500;
epwm5.epwmCounterCompare_cmpB                                  = 8000;
epwm5.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPA = "EPWM_AQ_OUTPUT_HIGH";
epwm5.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_LOW";
epwm5.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_HIGH";
epwm5.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_PERIOD  = "EPWM_AQ_OUTPUT_LOW";
epwm5.epwmTimebase_period                                      = 24000;
epwm5.epwmTimebase_syncOutPulseMode                            = ["EPWM_SYNC_OUT_PULSE_ON_CNTR_ZERO"];
epwm5.$name                                                    = "EPWM_before_DEL";
epwm5.epwmDigitalCompare_EPWM_TZ_DC_OUTPUT_A1                  = "EPWM_TZ_EVENT_DCXH_HIGH";
epwm5.epwmEventTrigger_enableInterrupt                         = true;
epwm5.EPWM.$assign                                             = "EPWM9";

epwm6.$name                                                    = "CONFIG_EPWM5";
epwm6.epwmTimebase_period                                      = 24000;
epwm6.epwmTimebase_counterMode                                 = "EPWM_COUNTER_MODE_UP";
epwm6.epwmCounterCompare_cmpA                                  = 1500;
epwm6.epwmCounterCompare_cmpB                                  = 8000;
epwm6.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPA = "EPWM_AQ_OUTPUT_HIGH";
epwm6.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_LOW";
epwm6.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_HIGH";
epwm6.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_PERIOD  = "EPWM_AQ_OUTPUT_LOW";
epwm6.epwmDE_enableMode                                        = true;
epwm6.epwmDE_TripL                                             = "EPWM_DE_TRIP_SRC_INPUTXBAR_OUT1";
epwm6.epwmDE_TripSelA                                          = "EPWM_DE_TRIPH";
epwm6.epwmTimebase_syncInPulseSource                           = "EPWM_SYNC_IN_PULSE_SRC_SYNCOUT_EPWM4";
epwm6.epwmTimebase_phaseEnable                                 = true;
epwm6.epwmDE_reEntryDelay                                      = 8;
epwm6.EPWM.$assign                                             = "EPWM11";

epwm7.$name                                                    = "CONFIG_EPWM6";
epwm7.epwmTimebase_period                                      = 24000;
epwm7.epwmTimebase_counterMode                                 = "EPWM_COUNTER_MODE_UP";
epwm7.epwmCounterCompare_cmpA                                  = 1500;
epwm7.epwmCounterCompare_cmpB                                  = 8000;
epwm7.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPA = "EPWM_AQ_OUTPUT_HIGH";
epwm7.epwmActionQualifier_EPWM_AQ_OUTPUT_A_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_LOW";
epwm7.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_UP_CMPB = "EPWM_AQ_OUTPUT_HIGH";
epwm7.epwmActionQualifier_EPWM_AQ_OUTPUT_B_ON_TIMEBASE_PERIOD  = "EPWM_AQ_OUTPUT_LOW";
epwm7.epwmDE_enableMode                                        = true;
epwm7.epwmDE_TripL                                             = "EPWM_DE_TRIP_SRC_INPUTXBAR_OUT1";
epwm7.epwmDE_TripSelA                                          = "EPWM_DE_TRIPH";
epwm7.epwmDE_IncrementStep                                     = 20;
epwm7.epwmTimebase_phaseEnable                                 = true;
epwm7.epwmTimebase_syncInPulseSource                           = "EPWM_SYNC_IN_PULSE_SRC_SYNCOUT_EPWM4";
epwm7.epwmDE_TripMonitorMode                                   = true;
epwm7.epwmDigitalCompare_EPWM_TZ_DC_OUTPUT_A1                  = "EPWM_TZ_EVENT_DCXH_HIGH";
epwm7.epwmTripZone_tzInterruptSource                           = ["EPWM_TZ_INTERRUPT_DCAEVT1"];
epwm7.epwmTripZone_EPWM_TZ_ACTION_EVENT_TZA                    = "EPWM_TZ_ACTION_DISABLE";
epwm7.epwmTripZone_EPWM_TZ_ACTION_EVENT_TZB                    = "EPWM_TZ_ACTION_DISABLE";
epwm7.epwmTripZone_EPWM_TZ_ACTION_EVENT_DCAEVT1                = "EPWM_TZ_ACTION_DISABLE";
epwm7.epwmTripZone_EPWM_TZ_ACTION_EVENT_DCAEVT2                = "EPWM_TZ_ACTION_DISABLE";
epwm7.epwmTripZone_EPWM_TZ_ACTION_EVENT_DCBEVT1                = "EPWM_TZ_ACTION_DISABLE";
epwm7.epwmTripZone_EPWM_TZ_ACTION_EVENT_DCBEVT2                = "EPWM_TZ_ACTION_DISABLE";
epwm7.epwmDE_selectMode                                        = "EPWM_DIODE_EMULATION_OST";
epwm7.epwmDE_Threshold                                         = 200;
epwm7.EPWM.$assign                                             = "EPWM12";

debug_log.enableUartLog            = true;
debug_log.uartLog.$name            = "CONFIG_UART0";
debug_log.uartLog.UART.RXD.$assign = "ball.A7";
debug_log.uartLog.UART.TXD.$assign = "ball.A6";

mpu_armv71.$name             = "CONFIG_MPU_REGION0";
mpu_armv71.size              = 31;
mpu_armv71.attributes        = "Device";
mpu_armv71.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv71.allowExecute      = false;

mpu_armv72.$name             = "CONFIG_MPU_REGION1";
mpu_armv72.size              = 15;
mpu_armv72.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv73.$name             = "CONFIG_MPU_REGION2";
mpu_armv73.baseAddr          = 0x80000;
mpu_armv73.size              = 15;
mpu_armv73.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv74.$name             = "CONFIG_MPU_REGION3";
mpu_armv74.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv74.baseAddr          = 0x70000000;
mpu_armv74.size              = 21;

epwm_xbar1.$name                    = "CONFIG_EPWM_XBAR0";
epwm_xbar1.xbarOutput               = ["GPIO120"];
epwm_xbar1["xbarConfig-0"].$name    = "CONFIG_INPUT_XBAR3";
epwm_xbar1["xbarConfig-0"].instance = "INPUT_XBAR_2";

icl_xbar1.$name      = "CONFIG_ICL_XBAR0";
icl_xbar1.xbarOutput = ["MDL1_OUTA"];

input_xbar1.$name      = "CONFIG_INPUT_XBAR0";
input_xbar1.xbarOutput = "GPIO43";

input_xbar2.$name      = "CONFIG_INPUT_XBAR1";
input_xbar2.instance   = "INPUT_XBAR_1";
input_xbar2.xbarOutput = "GPIO45";

int_xbar1.$name      = "CONFIG_INT_XBAR0";
int_xbar1.xbarOutput = ["EPWM0_INT"];

int_xbar2.$name      = "CONFIG_INT_XBAR1";
int_xbar2.xbarOutput = ["EPWM1_INT"];
int_xbar2.instance   = "INT_XBAR_1";

int_xbar3.$name      = "CONFIG_INT_XBAR2";
int_xbar3.xbarOutput = ["EPWM6_TZINT"];
int_xbar3.instance   = "INT_XBAR_2";

output_xbar1.$name            = "CONFIG_OUTPUT_XBAR0";
output_xbar1.xbarOutput       = ["EPWM4_SYNCOUT"];
output_xbar1.xbarConfig.$name = "CONFIG_EPWM_SYNCOUT_XBAR0";

output_xbar2.$name      = "CONFIG_OUTPUT_XBAR1";
output_xbar2.xbarOutput = ["DEL6_TRIP"];

/**
 * Pinmux solution for unlocked pins/peripherals. This ensures that minor changes to the automatic solver in a future
 * version of the tool will not impact the pinmux you originally saw.  These lines can be completely deleted in order to
 * re-solve from scratch.
 */
epwm1.EPWM.A.$suggestSolution                    = "ball.B2";
epwm1.EPWM.B.$suggestSolution                    = "ball.B1";
epwm2.EPWM.A.$suggestSolution                    = "ball.D3";
epwm3.EPWM.A.$suggestSolution                    = "ball.C2";
epwm3.EPWM.B.$suggestSolution                    = "ball.C1";
epwm4.EPWM.A.$suggestSolution                    = "ball.E2";
epwm4.EPWM.B.$suggestSolution                    = "ball.E3";
epwm5.EPWM.A.$suggestSolution                    = "ball.G1";
epwm5.EPWM.B.$suggestSolution                    = "ball.H2";
epwm6.EPWM.A.$suggestSolution                    = "ball.H1";
epwm6.EPWM.B.$suggestSolution                    = "ball.J2";
epwm7.EPWM.A.$suggestSolution                    = "ball.K2";
epwm7.EPWM.B.$suggestSolution                    = "ball.J1";
debug_log.uartLog.UART.$suggestSolution          = "UART0";
output_xbar1.OUTPUTXBAR.$suggestSolution         = "OUTPUTXBAR0";
output_xbar1.OUTPUTXBAR.XBAROUT.$suggestSolution = "ball.C9";
output_xbar2.OUTPUTXBAR.$suggestSolution         = "OUTPUTXBAR0";
output_xbar2.OUTPUTXBAR.XBAROUT.$suggestSolution = "ball.R3";

/**
 * These arguments were used when this file was generated. They will be automatically applied on subsequent loads
 * via the GUI or CLI. Run CLI with '--help' for additional information on how to override these arguments.
 * @cliArgs --device "AM243x_ALX_beta" --package "ALX" --part "ALX" --context "r5fss0-0" --product "MCU_PLUS_SDK@07.03.01"
 * @versions {"tool":"1.18.0+3266"}
 */

/**
 * Import the modules used in this configuration.
 */
const eeprom          = scripting.addModule("/board/eeprom/eeprom", {}, false);
const eeprom1         = eeprom.addInstance();
const gpio            = scripting.addModule("/drivers/gpio/gpio", {}, false);
const gpio1           = gpio.addInstance();
const gpio2           = gpio.addInstance();
const i2c             = scripting.addModule("/drivers/i2c/i2c", {}, false);
const i2c1            = i2c.addInstance();
const debug_log       = scripting.addModule("/kernel/dpl/debug_log");
const mpu_armv7       = scripting.addModule("/kernel/dpl/mpu_armv7", {}, false);
const mpu_armv71      = mpu_armv7.addInstance();
const mpu_armv72      = mpu_armv7.addInstance();
const mpu_armv73      = mpu_armv7.addInstance();
const mpu_armv74      = mpu_armv7.addInstance();
const mpu_armv75      = mpu_armv7.addInstance();
const mpu_armv76      = mpu_armv7.addInstance();
const default_linker  = scripting.addModule("/memory_configurator/default_linker", {}, false);
const default_linker1 = default_linker.addInstance();
const general         = scripting.addModule("/memory_configurator/general", {}, false);
const general1        = general.addInstance();
const region          = scripting.addModule("/memory_configurator/region", {}, false);
const region1         = region.addInstance();
const section         = scripting.addModule("/memory_configurator/section", {}, false);
const section1        = section.addInstance();
const section2        = section.addInstance();
const section3        = section.addInstance();
const section4        = section.addInstance();
const section5        = section.addInstance();
const section6        = section.addInstance();
const section7        = section.addInstance();
const enet_cpsw       = scripting.addModule("/networking/enet_cpsw/enet_cpsw", {}, false);
const enet_cpsw1      = enet_cpsw.addInstance();

/**
 * Write custom configuration values to the imported modules.
 */
eeprom1.$name = "CONFIG_EEPROM0";

gpio1.pinDir               = "OUTPUT";
gpio1.$name                = "CONFIG_ENET_RGMII_PHY_RST";
gpio1.GPIO.$assign         = "GPIO0";
gpio1.GPIO.gpioPin.pu_pd   = "pu";
gpio1.GPIO.gpioPin.$assign = "GPMC0_AD11";

gpio2.pinDir               = "OUTPUT";
gpio2.$name                = "CONFIG_ENET_RGMII_MUX_SEL";
gpio2.GPIO.$assign         = "GPIO0";
gpio2.GPIO.gpioPin.pu_pd   = "pu";
gpio2.GPIO.gpioPin.$assign = "GPMC0_AD12";

i2c1.$name               = "CONFIG_I2C0";
eeprom1.peripheralDriver = i2c1;
i2c1.I2C.$assign         = "I2C0";

debug_log.enableUartLog        = true;
debug_log.enableCssLog         = false;
debug_log.uartLog.$name        = "CONFIG_UART0";
debug_log.uartLog.UART.$assign = "USART0";

const uart_v0_template  = scripting.addModule("/drivers/uart/v0/uart_v0_template", {}, false);
const uart_v0_template1 = uart_v0_template.addInstance({}, false);
uart_v0_template1.$name = "drivers_uart_v0_uart_v0_template0";
debug_log.uartLog.child = uart_v0_template1;

mpu_armv71.$name             = "CONFIG_MPU_REGION0";
mpu_armv71.size              = 31;
mpu_armv71.attributes        = "Device";
mpu_armv71.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv71.allowExecute      = false;

mpu_armv72.$name             = "CONFIG_MPU_REGION1";
mpu_armv72.size              = 15;
mpu_armv72.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv73.$name             = "CONFIG_MPU_REGION2";
mpu_armv73.baseAddr          = 0x41010000;
mpu_armv73.size              = 15;
mpu_armv73.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv74.$name             = "CONFIG_MPU_REGION3";
mpu_armv74.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv74.baseAddr          = 0x70000000;
mpu_armv74.size              = 23;

mpu_armv75.$name             = "CONFIG_MPU_REGION5";
mpu_armv75.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv75.baseAddr          = 0xA5000000;
mpu_armv75.size              = 23;
mpu_armv75.attributes        = "NonCached";

mpu_armv76.$name    = "CONFIG_MPU_REGION6";
mpu_armv76.size     = 27;
mpu_armv76.baseAddr = 0x60000000;

default_linker1.$name = "memory_configurator_default_linker0";

general1.$name           = "CONFIG_GENERAL0";
general1.stack_size      = 8192;
general1.heap_size       = 1024;
general1.additional_data = "#include \"ti_enet_config.h\"";
general1.linker.$name    = "TIARMCLANG0";

region1.$name                               = "MEMORY_REGION_CONFIGURATION0";
region1.memory_region.create(5);
region1.memory_region[0].type               = "TCMA_R5F";
region1.memory_region[0].$name              = "R5F_VECS";
region1.memory_region[0].size               = 0x40;
region1.memory_region[0].auto               = false;
region1.memory_region[1].type               = "TCMA_R5F";
region1.memory_region[1].$name              = "R5F_TCMA";
region1.memory_region[1].size               = 0x7FC0;
region1.memory_region[2].type               = "TCMB_R5F";
region1.memory_region[2].$name              = "R5F_TCMB0";
region1.memory_region[2].size               = 0x8000;
region1.memory_region[3].$name              = "MSRAM";
region1.memory_region[3].auto               = false;
region1.memory_region[3].manualStartAddress = 0x70080000;
region1.memory_region[3].size               = 0x110000;
region1.memory_region[4].type               = "FLASH";
region1.memory_region[4].$name              = "FLASH";
region1.memory_region[4].auto               = false;
region1.memory_region[4].manualStartAddress = 0x60100000;
region1.memory_region[4].size               = 0x80000;

section1.$name                        = "Vector Table";
section1.load_memory                  = "R5F_VECS";
section1.group                        = false;
section1.output_section.create(1);
section1.output_section[0].$name      = ".vectors";
section1.output_section[0].palignment = true;

section2.$name                        = "Text Segments";
section2.load_memory                  = "MSRAM";
section2.output_section.create(5);
section2.output_section[0].$name      = ".text.hwi";
section2.output_section[0].palignment = true;
section2.output_section[1].$name      = ".text.cache";
section2.output_section[1].palignment = true;
section2.output_section[2].$name      = ".text.mpu";
section2.output_section[2].palignment = true;
section2.output_section[3].$name      = ".text.boot";
section2.output_section[3].palignment = true;
section2.output_section[4].$name      = ".text:abort";
section2.output_section[4].palignment = true;

section3.$name                        = "Code and Read-Only Data";
section3.load_memory                  = "MSRAM";
section3.output_section.create(2);
section3.output_section[0].$name      = ".text";
section3.output_section[0].palignment = true;
section3.output_section[1].$name      = ".rodata";
section3.output_section[1].palignment = true;

section4.$name                        = "Data Segment";
section4.load_memory                  = "MSRAM";
section4.output_section.create(1);
section4.output_section[0].$name      = ".data";
section4.output_section[0].palignment = true;

section5.$name                                   = "Memory Segments";
section5.load_memory                             = "MSRAM";
section5.output_section.create(3);
section5.output_section[0].$name                 = ".bss";
section5.output_section[0].palignment            = true;
section5.output_section[0].output_sections_start = "__BSS_START";
section5.output_section[0].output_sections_end   = "__BSS_END";
section5.output_section[1].$name                 = ".sysmem";
section5.output_section[1].palignment            = true;
section5.output_section[2].$name                 = ".stack";
section5.output_section[2].palignment            = true;

section6.$name                                    = "Stack Segments";
section6.load_memory                              = "MSRAM";
section6.output_section.create(5);
section6.output_section[0].$name                  = ".irqstack";
section6.output_section[0].output_sections_start  = "__IRQ_STACK_START";
section6.output_section[0].output_sections_end    = "__IRQ_STACK_END";
section6.output_section[0].input_section.create(1);
section6.output_section[0].input_section[0].$name = ". = . + __IRQ_STACK_SIZE;";
section6.output_section[1].$name                  = ".fiqstack";
section6.output_section[1].output_sections_start  = "__FIQ_STACK_START";
section6.output_section[1].output_sections_end    = "__FIQ_STACK_END";
section6.output_section[1].input_section.create(1);
section6.output_section[1].input_section[0].$name = ". = . + __FIQ_STACK_SIZE;";
section6.output_section[2].$name                  = ".svcstack";
section6.output_section[2].output_sections_start  = "__SVC_STACK_START";
section6.output_section[2].output_sections_end    = "__SVC_STACK_END";
section6.output_section[2].input_section.create(1);
section6.output_section[2].input_section[0].$name = ". = . + __SVC_STACK_SIZE;";
section6.output_section[3].$name                  = ".abortstack";
section6.output_section[3].output_sections_start  = "__ABORT_STACK_START";
section6.output_section[3].output_sections_end    = "__ABORT_STACK_END";
section6.output_section[3].input_section.create(1);
section6.output_section[3].input_section[0].$name = ". = . + __ABORT_STACK_SIZE;";
section6.output_section[4].$name                  = ".undefinedstack";
section6.output_section[4].output_sections_start  = "__UNDEFINED_STACK_START";
section6.output_section[4].output_sections_end    = "__UNDEFINED_STACK_END";
section6.output_section[4].input_section.create(1);
section6.output_section[4].input_section[0].$name = ". = . + __UNDEFINED_STACK_SIZE;";

section7.$name                                              = "CONFIG_SECTION0";
section7.load_memory                                        = "MSRAM";
section7.type                                               = "NOLOAD";
section7.group                                              = false;
section7.output_section.create(1);
section7.output_section[0].$name                            = ".enet_dma_mem";
section7.output_section[0].alignment                        = 0;
section7.output_section[0].input_section.create(2);
section7.output_section[0].input_section[0].$name           = "*(*ENET_DMA_DESC_MEMPOOL)";
section7.output_section[0].input_section[1].$name           = "*(*ENET_DMA_RING_MEMPOOL)";
section7.output_section[0].input_section[1].additional_data = "#if (ENET_SYSCFG_PKT_POOL_ENABLE == 1)\n        *(*ENET_DMA_PKT_MEMPOOL)\n#endif";

enet_cpsw1.$name                       = "CONFIG_ENET_CPSW0";
enet_cpsw1.DisableMacPort2             = true;
enet_cpsw1.mdioMode                    = "MDIO_MODE_MANUAL";
enet_cpsw1.txDmaChannel[0].$name       = "ENET_DMA_TX_CH0";
enet_cpsw1.rxDmaChannel[0].$name       = "ENET_DMA_RX_CH0";
enet_cpsw1.pinmux[0].$name             = "ENET_CPSW_PINMUX0";
enet_cpsw1.pinmux[0].MDIO.$assign      = "MDIO0";
enet_cpsw1.pinmux[0].MDIO.MDC.$assign  = "PRG1_MDIO0_MDC";
enet_cpsw1.pinmux[0].MDIO.MDIO.$assign = "PRG1_MDIO0_MDIO";
enet_cpsw1.pinmux[0].RGMII1.$assign    = "RGMII1";
enet_cpsw1.pinmux[0].RGMII2.$assign    = "RGMII2";

const udma         = scripting.addModule("/drivers/udma/udma", {}, false);
const udma1        = udma.addInstance({}, false);
enet_cpsw1.udmaDrv = udma1;

/**
 * Pinmux solution for unlocked pins/peripherals. This ensures that minor changes to the automatic solver in a future
 * version of the tool will not impact the pinmux you originally saw.  These lines can be completely deleted in order to
 * re-solve from scratch.
 */
i2c1.I2C.SCL.$suggestSolution                       = "I2C0_SCL";
i2c1.I2C.SDA.$suggestSolution                       = "I2C0_SDA";
debug_log.uartLog.UART.RXD.$suggestSolution         = "UART0_RXD";
debug_log.uartLog.UART.TXD.$suggestSolution         = "UART0_TXD";
enet_cpsw1.pinmux[0].RGMII1.RD0.$suggestSolution    = "PRG0_PRU1_GPO7";
enet_cpsw1.pinmux[0].RGMII1.RD1.$suggestSolution    = "PRG0_PRU1_GPO9";
enet_cpsw1.pinmux[0].RGMII1.RD2.$suggestSolution    = "PRG0_PRU1_GPO10";
enet_cpsw1.pinmux[0].RGMII1.RD3.$suggestSolution    = "PRG0_PRU1_GPO17";
enet_cpsw1.pinmux[0].RGMII1.RX_CTL.$suggestSolution = "PRG0_PRU0_GPO9";
enet_cpsw1.pinmux[0].RGMII1.RXC.$suggestSolution    = "PRG0_PRU0_GPO10";
enet_cpsw1.pinmux[0].RGMII1.TD0.$suggestSolution    = "PRG1_PRU1_GPO7";
enet_cpsw1.pinmux[0].RGMII1.TD1.$suggestSolution    = "PRG1_PRU1_GPO9";
enet_cpsw1.pinmux[0].RGMII1.TD2.$suggestSolution    = "PRG1_PRU1_GPO10";
enet_cpsw1.pinmux[0].RGMII1.TD3.$suggestSolution    = "PRG1_PRU1_GPO17";
enet_cpsw1.pinmux[0].RGMII1.TX_CTL.$suggestSolution = "PRG1_PRU0_GPO9";
enet_cpsw1.pinmux[0].RGMII1.TXC.$suggestSolution    = "PRG1_PRU0_GPO10";
enet_cpsw1.pinmux[0].RGMII2.RD0.$suggestSolution    = "PRG1_PRU1_GPO0";
enet_cpsw1.pinmux[0].RGMII2.RD1.$suggestSolution    = "PRG1_PRU1_GPO1";
enet_cpsw1.pinmux[0].RGMII2.RD2.$suggestSolution    = "PRG1_PRU1_GPO2";
enet_cpsw1.pinmux[0].RGMII2.RD3.$suggestSolution    = "PRG1_PRU1_GPO3";
enet_cpsw1.pinmux[0].RGMII2.RX_CTL.$suggestSolution = "PRG1_PRU1_GPO4";
enet_cpsw1.pinmux[0].RGMII2.RXC.$suggestSolution    = "PRG1_PRU1_GPO6";
enet_cpsw1.pinmux[0].RGMII2.TD0.$suggestSolution    = "PRG1_PRU1_GPO11";
enet_cpsw1.pinmux[0].RGMII2.TD1.$suggestSolution    = "PRG1_PRU1_GPO12";
enet_cpsw1.pinmux[0].RGMII2.TD2.$suggestSolution    = "PRG1_PRU1_GPO13";
enet_cpsw1.pinmux[0].RGMII2.TD3.$suggestSolution    = "PRG1_PRU1_GPO14";
enet_cpsw1.pinmux[0].RGMII2.TX_CTL.$suggestSolution = "PRG1_PRU1_GPO15";
enet_cpsw1.pinmux[0].RGMII2.TXC.$suggestSolution    = "PRG1_PRU1_GPO16";
